/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package designtemplate;

import static designtemplate.DesignTemplate.countDown;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.embed.swing.SwingNode;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextArea;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.SwingUtilities;
import plotwavform.PlotWave;
import javafx.scene.image.ImageView;
import testing_phase.OvalPart_testController;
import testing_phase.Pause_testController;

/**
 *
 * @author nazibur
 */

public class DesignTemplate extends Application {
    
    private Stage primaryStage;
    private static BorderPane rootLayout;
    public static DesignTemplate obj;
    public static Stage dialogStage;
    String SearchID,changetext,changetextPass,changetextFail,testFilePath;
    public static String Mode;
    public static String fName,lName,txtPhoneno,testID;
    public int progressLimit;
    public static int countDown=0,countDownTi=0;
    public static boolean usrmode=true;
    public static int moduleSelect=0;
    public Thread thd;
    public static boolean stopTimer,stopTimerTi;
    public static int repeat=0,no,TISectnce,micValue;
    public static StringBuffer speakerid=new StringBuffer();
    public static String SpkrId="",miliSec,msec;
    protected boolean running;
    public static boolean tiResult,vpResult,tdResult;
    public static String userNumber,id;
    ByteArrayOutputStream out;
    private ByteArrayOutputStream  recordBytes= new ByteArrayOutputStream();
    
    final SoundRecordingUtil recorder = new SoundRecordingUtil();
    Thread recordThread,recordThread2;
    final JavaSoundRecorder recorderWav = new JavaSoundRecorder();
    public static PlotWave pw;
    
    public static double ivectorScore;
    
   
    Process p,p1,p2;
    //private static BorderPane root=new BorderPane();
    
    public static PlotWave getPW()
    {
        return pw;
    }
    
    public static int getPromptNo()
    {
        return no;
    }
    
    public static String getMSec()
    {
        return msec;
    }
    public static String getMiliSec()
    {
        return miliSec;
    }
    
    public static BorderPane getRoot(){
        return rootLayout;
    }
    
     public Stage getPrimaryStage() {
        return primaryStage;
    }
     
    public int getrepeatLoop()
    {
        
        return(repeat);
    }
    public DesignTemplate getDP()
    {
        return obj;
    }
    
    public static Stage getStage()
    {
        return dialogStage;
    }
    public String getUserID()
    {
        return id;
    }
    
    public String getFName()
    {
        return fName;
    }
    public String getLName()
    {
        return lName;
    }
    
    public int getMicStatusValue()
    {
        return micValue;
    }
    
  
    public void cancelTimer()
    {
        timerTask.cancel();
        stopTimer=true;
        System.out.println(stopTimer);
        System.out.println("Inside cancel "+countDown);
    }
    
    public void cancelTimerTi()
    {
        stopTimerTi=true;
        System.out.println("Stop Timer "+stopTimerTi);
        System.out.println("Inside cancel "+countDown);
    }
    
    public String getUserNumber(){
        return userNumber;
    }
    
    public String getTestSpkrId(){
        return testID;
    }
    
    public boolean getTiResult()
    {
        return tiResult;
    }
    
    public boolean getVpResult()
    {
        return vpResult;
    }
    
    public boolean getTdResult()
    {
        return tdResult;
    }
    
    public int getTISectnce()
    {
        return TISectnce;
    }
    
    public Double getIvectorScore()
    {
        return ivectorScore;
    }
    
    /*---------------Global countdown timer---------------------*/
    public void countDowntimer(String searchId,int value,String changetxt,String progress)
    {
       SearchID=searchId;
       countDown=value;
       stopTimer=false;
       changetext=changetxt;
       progressLimit=value;
        thd=new Thread(timerTask);
        thd.start();
        System.out.println(searchId);
        ((Label)rootLayout.lookup(searchId)).textProperty().bind(timerTask.messageProperty());
        ((ProgressBar)rootLayout.lookup(progress)).progressProperty().bind(timerTask.progressProperty());
       
    }
    
    Task<Void> timerTask = new Task<Void>()
    {
           int i=0;
            @Override
            public Void call() throws Exception{
                for(;countDown>=0;countDown--,i++)
                {
                   
                    updateMessage("" + countDown);
                    updateProgress(i,progressLimit);
                    System.out.println(countDown);
                    
                    if(stopTimer==true)
                    {
                        System.out.print("Before break"+stopTimer);
                        this.cancel();
                        break;
                    }
                    try{
                        Thread.sleep(1000);
                    }
                    catch(InterruptedException e){
                        e.printStackTrace();
                    }
               }
                if (countDown == -1 && stopTimer==false)
                {
                    this.cancel();
                    
                    System.out.println("ifcountDown==-1"+countDown);
                  //  System.out.println(changetext);
                    Platform.runLater(new Runnable() {
                        public void run() {
                             try 
                             {
                                 FXMLLoader loader2 = new FXMLLoader();        
                                 loader2.setLocation(DesignTemplate.class.getResource(changetext));           
                                 AnchorPane pause= (AnchorPane)loader2.load();                   
                                 BorderPane border2=DesignTemplate.getRoot();           
                                 border2.setLeft(pause);           
                                
                             }
                             catch(IOException e)
                             {
                                 e.printStackTrace();
                             }
                            
                           
                        }
                    });
                
                    
                    
                }

                return null;
            }
     };
     
    //-------end of countDown-------//
    
    // count down timer for testing
    
    
    public void countDowntimerTest(String searchId,int value,String changetxtPass,String changetxtFail, String progress,String filePath,String strMode)
    {
       SearchID=searchId;
       countDown=value;
       stopTimer=false;
       changetextPass=changetxtPass;
       changetextFail=changetxtFail;
       testFilePath=filePath;
       Mode=strMode;
       progressLimit=value;
        thd=new Thread(timerTest);
        thd.start();
        System.out.println(searchId);
        ((Label)rootLayout.lookup(searchId)).textProperty().bind(timerTest.messageProperty());
        ((ProgressBar)rootLayout.lookup(progress)).progressProperty().bind(timerTest.progressProperty());
       
    }
    
    Task<Void> timerTest = new Task<Void>()
    {
           int i=0;
            @Override
            public Void call() throws Exception{
                for(;countDown>=0;countDown--,i++)
                {
                   
                    updateMessage("" + countDown);
                    updateProgress(i,progressLimit);
                    System.out.println(countDown);
                    
                    if(stopTimer==true)
                    {
                        System.out.print("Before break"+stopTimer);
                        this.cancel();
                        break;
                    }
                    try{
                        Thread.sleep(1000);
                    }
                    catch(InterruptedException e){
                        e.printStackTrace();
                    }
               }
                if (countDown == -1 && stopTimer==false)
                {
                    this.cancel();
                    
                    System.out.println("ifcountDown==-1"+countDown);
                  //  System.out.println(changetext);
                   // pc.showImage();
                    
                    
                    
                    
                    Platform.runLater(new Runnable() {
                        public void run() {
                             try 
                             {
                                 if(Mode.equals("VP"))
                                 {  
                                     p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                     p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                         p1=Runtime.getRuntime().exec("python /home/scripts/vpExtractMfcc.py "+getTestSpkrId()+" "+testFilePath);
                                         p1.waitFor();
                                         findResult();
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                                 else if(Mode.equals("TD"))
                                 {
                                     p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                     p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                         p1=Runtime.getRuntime().exec("python /home/scripts/tdExtractMfcc.py "+getTestSpkrId()+" "+testFilePath);
                                         p1.waitFor();
                                         findResult();
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                                 else
                                 {
                                      p=Runtime.getRuntime().exec("/home/scripts/exportLib.sh");
                                     
                                      p.waitFor();
                                     p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                     p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                          p1=Runtime.getRuntime().exec("python /home/scripts/ivect_testing.py  "+getTestSpkrId()+" "+testFilePath);
                                          p1.waitFor();
                                          findResult(); 
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                                 
                             }
                             catch(Exception e)
                             {
                                 e.printStackTrace();
                             } 
                        }
                    });
                }

                return null;
            }
    };
    
    private void findResult() throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(p1.getInputStream()));
        String str,str1="";
        while((str=br.readLine())!=null)
        {
            System.out.println(str);
            str1=str;
        }
        if(str1.equals("pass"))
        {
            if(Mode.equals("VP"))
            {
                vpResult=true;
            }
            else if(Mode.equals("TD"))
            {
                tdResult=true;
            }
            else
            {
                tiResult=true;
            }
            FXMLLoader loader2 = new FXMLLoader();
            loader2.setLocation(DesignTemplate.class.getResource(changetextPass));           
            AnchorPane pause= (AnchorPane)loader2.load();      
            BorderPane border2=DesignTemplate.getRoot();           
            border2.setLeft(pause);    
        }
        else
        {
            FXMLLoader loader2 = new FXMLLoader();   
            loader2.setLocation(DesignTemplate.class.getResource(changetextFail));           
            AnchorPane pause= (AnchorPane)loader2.load();                   
            BorderPane border2=DesignTemplate.getRoot();           
            border2.setLeft(pause);    
        }
    }
    
    private void findResultDebug() throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(p2.getInputStream()));
        String str,str1="";
        while((str=br.readLine())!=null)
        {
            System.out.println(str);
            str1=str;
        }
        if(str1.equals("pass"))
        {
            if(Mode.equals("VP"))
            {
                vpResult=true;
            }
            else if(Mode.equals("TD"))
            {
                tdResult=true;
            }
            else
            {
                tiResult=true;
            }
            FXMLLoader loader2 = new FXMLLoader();
            loader2.setLocation(DesignTemplate.class.getResource(changetextPass));           
            AnchorPane pause= (AnchorPane)loader2.load();      
            BorderPane border2=DesignTemplate.getRoot();           
            border2.setLeft(pause);    
        }
        else
        {
            FXMLLoader loader2 = new FXMLLoader();
            loader2.setLocation(DesignTemplate.class.getResource(changetextPass));           
            AnchorPane pause= (AnchorPane)loader2.load();      
            BorderPane border2=DesignTemplate.getRoot();           
            border2.setLeft(pause);    
        }
    }
    
  /*--countDownTimer2-----------*/
    
    public void countDowntimer2(String searchId,int value,String changetxt,String progress)
    {
       SearchID=searchId;
       countDownTi=value;
       stopTimerTi=false;
       changetext=changetxt;
       System.out.println(changetext);
       progressLimit=value;
       MyService myservice=new MyService();
       myservice.start();
       
        System.out.println(searchId);
        ((ProgressBar)rootLayout.lookup(progress)).progressProperty().bind(myservice.progressProperty());
        ((Label)rootLayout.lookup(searchId)).textProperty().bind(myservice.messageProperty());
        
       
    }
     
    private class MyService extends Service<Void> {
        
        int i;
        
        @Override
        protected Task<Void> createTask() {
            return new Task<Void>() {
                @Override
                 public Void call() throws Exception{
                     if(countDownTi==30)
                         i=0;
                     else
                         i=30-countDownTi;
                for(;countDownTi>=0;countDownTi--,i++)
                {
                   
                    updateMessage("" + countDownTi);
                    updateProgress(i,30);
                    System.out.println(countDownTi);
                    System.out.println("i="+i);
                    
                    if(stopTimerTi==true)
                    {
                        System.out.print("Before break"+stopTimer);
                        this.cancel();
                        break;
                    }
                     Thread.sleep(1000);
               }
                 if (countDownTi == -1 && stopTimerTi==false)
                {
                    this.cancel();
                    System.out.println("ifcountDown==-1"+countDownTi);
                  //  System.out.println(changetext);
                    Platform.runLater(new Runnable() {
                        public void run() {
                             try 
                             {
                                 FXMLLoader loader2 = new FXMLLoader();        
                                 loader2.setLocation(DesignTemplate.class.getResource(changetext));           
                                 AnchorPane pause= (AnchorPane)loader2.load();                   
                                 BorderPane border2=DesignTemplate.getRoot();           
                                 border2.setLeft(pause);    
                                
                                 if(getrepeatLoop()==1 && DesignTemplate.countDownTi==-1)
                                 {
                                     ((TextArea)DesignTemplate.getRoot().lookup("#txtArea3")).setText("After some time, he met Dharmabuddhi, \"My friend, we need to earn money to provide for ourselves when we grow old. Let us travel to some other kingdom to earn money. Besides, unless we travel to far-off kingdoms, we will not have any stories to tell our grand children! .\"Dharmabuddhi agreed to his plan, and took the blessings of his parents and teachers to travel to a distant kingdom.On an auspicious day, they began their journey.");
                                 }
                                 if(getrepeatLoop()==2 && DesignTemplate.countDownTi==-1)
                                 {
                                     ((TextArea)DesignTemplate.getRoot().lookup("#txtArea3")).setText("The two of them made a lot of money due to Dharmabuddhi's skills and knowledge. After some time, pleased with their earnings, they planned to return home. On their way to their home, as they approached their village, Papabuddhi said to Dharmabuddhi, \"Friend, It will be improper for us to carry so much money home as all our friends and relatives will start requesting us money. Besides, there is danger of theft.");
                                 }
                             }
                             catch(IOException e)
                             {
                                 e.printStackTrace();
                             }
                            
                           
                        }
                    });
                
                    
                    
                }
                

                return null;
            }
             
            };
        }
    }
    
    
    
    public void countDowntimerDebug(String searchId,int value,String changetxtPass, String progress,String filePath,String strMode)
    {
       SearchID=searchId;
       countDown=value;
       stopTimer=false;
       changetextPass=changetxtPass;
      // changetextFail=changetxtFail;
       testFilePath=filePath;
       Mode=strMode;
       progressLimit=value;
        thd=new Thread(timerdebug);
        thd.start();
        System.out.println(searchId);
        ((Label)rootLayout.lookup(searchId)).textProperty().bind(timerdebug.messageProperty());
        ((ProgressBar)rootLayout.lookup(progress)).progressProperty().bind(timerdebug.progressProperty());
       
    }
    
    Task<Void> timerdebug = new Task<Void>()
    {
           int i=0;
            @Override
            public Void call() throws Exception{
                for(;countDown>=0;countDown--,i++)
                {
                   
                    updateMessage("" + countDown);
                    updateProgress(i,progressLimit);
                    System.out.println(countDown);
                    
                    if(stopTimer==true)
                    {
                        System.out.print("Before break"+stopTimer);
                        this.cancel();
                        break;
                    }
                    try{
                        Thread.sleep(1000);
                    }
                    catch(InterruptedException e){
                        e.printStackTrace();
                    }
               }
                if (countDown == -1 && stopTimer==false)
                {
                    this.cancel();
                    
                    System.out.println("ifcountDown==-1"+countDown);
                  //  System.out.println(changetext);
                    Platform.runLater(new Runnable() {
                        public void run() {
                             try 
                             {
                                 if(Mode.equals("VP"))
                                 {  
                                     p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                     p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                         p2=Runtime.getRuntime().exec("python /home/scripts/vpExtractMfcc.py "+getTestSpkrId()+" "+testFilePath);
                                         p2.waitFor();
                                         findResultDebug();
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                                 else if(Mode.equals("TD"))
                                 {
                                     p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                     p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                         p2=Runtime.getRuntime().exec("python /home/scripts/tdExtractMfcc.py "+getTestSpkrId()+" "+testFilePath);
                                         p2.waitFor();
                                         findResultDebug();
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                                 else
                                 {
                                      p=Runtime.getRuntime().exec("/home/scripts/exportLib.sh");
                                     
                                      p.waitFor();
                                      p=Runtime.getRuntime().exec("python /home/scripts/checkEnergy.py "+testFilePath);
                                      p.waitFor();
                                     BufferedReader br1=new BufferedReader(new InputStreamReader(p.getInputStream()));
                                     String strEnergy2 = "",strEnergy;
                                     while((strEnergy=br1.readLine())!=null)
                                     {
                                         System.out.println(strEnergy);
                                         strEnergy2=strEnergy;
                                     }
                                     if(strEnergy2.equals("pass"))
                                     {
                                          p2=Runtime.getRuntime().exec("python /home/scripts/ivect_testing.py  "+getTestSpkrId()+" "+testFilePath);
                                          p2.waitFor();
                                          findResultDebug(); 
                                     }
                                     else
                                     {
                                         FXMLLoader loader2 = new FXMLLoader();   
                                         loader2.setLocation(DesignTemplate.class.getResource("/testing_phase/CheckFrame.fxml"));           
                                         AnchorPane pause= (AnchorPane)loader2.load();                   
                                         BorderPane border2=DesignTemplate.getRoot();           
                                         border2.setLeft(pause);    
                                     }
                                 }
                             }
                             catch(Exception e)
                             {
                                 e.printStackTrace();
                             } 
                        }
                    });
                }

                return null;
            }
     };
    
    
    /*------end of service function----*/
   
     public void recordWavFile(String fileName,final int RECORD_TIME)   
     {
       //  final JavaSoundRecorder recorder = new JavaSoundRecorder();
         Thread stopper = new Thread(new Runnable() {
			public void run() {
				try {
					Thread.sleep(RECORD_TIME);
				} catch (InterruptedException ex) {
					ex.printStackTrace();
				}
                                System.out.println(recorderWav);
				recorderWav.finish();
			}
		});

		stopper.start();

		// start recording
		recorderWav.start(fileName);
     }
        
     public void stopWavFile()
     {
        // System.out.println(recorderWav);
         Thread stopThread=new Thread(new Runnable(){
            public void run()
            {
                recorderWav.finish();
               
            }
         });
         stopThread.start();
         //recorderWav.finish();
     }
     
     
  
    public void recordWav (String path,int RECORD_TIME) throws IOException 
    {
        File wavFile = new File(path);
        System.out.println(path);
        System.out.println(RECORD_TIME);
       // final SoundRecordingUtil recorder = new SoundRecordingUtil();
         recordThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    System.out.println("Start recording...");
                    recorder.start();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    System.exit(-1);
                }              
            }
        });
         
        recordThread.start();
         
        try {
            Thread.sleep(RECORD_TIME);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        
         if(recorder.x!=-1)
         {
             try 
             {
                 recorder.stop();
                 recorder.save(wavFile);
                 System.out.println("STOPPED");
             }
             catch (Exception ex) 
             {
                 System.out.println("File not found");
                 ex.printStackTrace();
             }
         }
         else
         {
            recorder.save(wavFile);
            System.out.println("value of x"+recorder.x);    
            System.out.println("DONE");
         }
        
    }
    
  
    public void stopRecord() throws IOException, InterruptedException
    {
       
        recordThread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    System.out.println("Stop recording...");
                   
                    recorder.stop();
                    recorder.x=-1;
                } catch (Exception ex) {
                    ex.printStackTrace();
                    System.exit(-1);
                }              
            }
        });
         
        recordThread2.start();
            
        
    }
    
    
    public void playAudio(String audioFile)
    {
        
        SourceDataLine soundLine = null;
        int BUFFER_SIZE = 64*1024; 
        try 
        {
            File soundFile = new File(audioFile);
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(soundFile);
            AudioFormat audioFormat = audioInputStream.getFormat();
            DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
            soundLine = (SourceDataLine) AudioSystem.getLine(info);
            soundLine.open(audioFormat);
            soundLine.start();
            int nBytesRead = 0;
            byte[] sampledData = new byte[BUFFER_SIZE];
            while (nBytesRead != -1) 
            {
                nBytesRead = audioInputStream.read(sampledData, 0, sampledData.length);
                if (nBytesRead >= 0) 
                {
                    soundLine.write(sampledData, 0, nBytesRead);
                }
            }
        }
        catch (UnsupportedAudioFileException ex) 
        {
            ex.printStackTrace();
        } 
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }
        catch (LineUnavailableException ex) 
        {
            ex.printStackTrace();
        }
        finally 
        {
            soundLine.drain();
            soundLine.close();
        }
    }
    
   
    
    public void start(Stage stage) throws Exception {
        primaryStage=stage;
        primaryStage.setTitle("Attendance System");
        primaryStage.setResizable(false);
        initRootLayer();
        showWelCome();
      //  Parent root = FXMLLoader.load(getClass().getResource("RootLayer.fxml"));
        
       // Scene scene = new Scene(root);
        
       // stage.setScene(scene);
       // stage.show();
    }
    
    public void initRootLayer()
    {
        try{
            
            FXMLLoader loader=new FXMLLoader();
            loader.setLocation(DesignTemplate.class.getResource("RootLayer.fxml"));
            rootLayout=(BorderPane)loader.load();
            Scene scene=new Scene(rootLayout);
            primaryStage.setScene(scene);
            primaryStage.show();
            
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
    }
    
    public void showWelCome()
    {
        try
        {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(DesignTemplate.class.getResource("MainPage.fxml"));
            AnchorPane welCome = (AnchorPane) loader.load();
                    
            rootLayout.setLeft(welCome);
            MainPageController controller = loader.getController();
            //controller.setMainApp(this);
            obj=this;
          
          
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
    }
    
   
    
 

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
}
