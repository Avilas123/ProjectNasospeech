/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlotWave.java
 *
 * Created on 24 Dec, 2012, 11:49:41 AM
 */
package Speech.WavePanel;

import Speech.annotations.Hash;
import Speech.common.*;
//import Speech.gui.MainFrame;
//import Speech.gui.UIControls;
//import Speech.rmi.VrasiClientKWS;
//import Speech.rmi.VrasiClientPDS;
//import Speech.rmi.VrasiClientSID;
import Speech.signalProcessing.SignalProc;
import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.*;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.border.*;
import java.util.List;
import Speech.gui.MainFrame;
import Speech.gui.Mainpopup;
/**
 *
 *  @author Tatapower SED
 *  
 */
public class PlotWave extends javax.swing.JPanel implements ActionListener, ControlContext, PlotwaveCommon {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    final int bufSize = 16384;
    public int frames_per_pixel;
    //FormatControls formatControls = new FormatControls();
    Capture capture;
    RecordWaveGraph recordGraph;
    public Playback playback;
    public AudioInputStream audioInputStream;
    public SamplingGraph samplingGraph;
    String errStr;
    double duration, seconds;
    File file;
    public String fileName = "untitled";
    public String abbfilePath = null;
    Vector lines = new Vector();
    private Toolkit tk;
    public double mousePosX1, mousePosX2, mouseMoveX1, mousePosY1;
    public JPopupMenu menu;
    public StreamBytes streamBytes;
    public MainFrame mainFrame;
   // public Mainpopup mainpopup;
    private SamplingGraph sg;
    private int graphFromScreen = 5, graphVerticalSize = 240, normalPixcel = 60;
    public boolean selectedPlay = false;
    public StreamVariables streamVariable;
    public RightClickEvent rightClick;
    public String[][] annotationPos;
    public ByteArrayOutputStream capOut;
    private int samplingpanelSize;
    List<List<Integer>> dummyList;
    public ServerFinder serverStatus;
    public int xSize;
    public String fileHashValue;
    private double record_duration;
    private boolean buffStatus = true;
    private boolean lineStatus = false;
    public static String filenamefortab;
    public PlotWave(MainFrame mainFrame, AudioInputStream audioStreamArray) {
       
        initComponents();
        // Create Objects Area
        capture = new Capture();
        recordGraph = new RecordWaveGraph();
        playback = new Playback();
        streamBytes = new StreamBytes();
        this.mainFrame = mainFrame;
        menu = new JPopupMenu("Popup");
        EmptyBorder eb = new EmptyBorder(1, 2, 2, 2);
        EmptyBorder subeb = new EmptyBorder(1, 2, 2, 2);
        SoftBevelBorder sbb = new SoftBevelBorder(SoftBevelBorder.LOWERED);
        SoftBevelBorder subsbb = new SoftBevelBorder(SoftBevelBorder.LOWERED);
        sg = new SamplingGraph();
        dummyList = new ArrayList<>();
        serverStatus = new ServerFinder();
        streamVariable = new StreamVariables();
        rightClick = new RightClickEvent(this);
        // End Object Area
        
        
        
        

        //Setsize Area
        //Screen Size
        this.tk = Toolkit.getDefaultToolkit();
        xSize = (int) tk.getScreenSize().getWidth();
        System.out.println(xSize);
        int ySize = (int) tk.getScreenSize().getHeight();
        //xSize = xSize - 295;
        xSize = xSize - 80;
        this.setSize(new Dimension((xSize), 320));
        samplingpanelSize = xSize;
        //Sampling Graph and Drawing area
        

        samplingPanel.setBorder(new CompoundBorder(eb, sbb));
        sg.setSize(new Dimension((xSize - graphFromScreen), graphVerticalSize));
        samplingPanel.setPreferredSize(new java.awt.Dimension((xSize - graphFromScreen)-586, graphVerticalSize));
        jScrollPane1.setSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        jScrollPane1.setPreferredSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        jScrollPane1.setMinimumSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));


        //End Size


        //Com Porperties

        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
       // jScrollPane1.getHorizontalScrollBar().addAdjustmentListener(adjustmentListener);
        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(100);

        //End

        //Add Com
        samplingPanel.add(samplingGraph = sg);
        //End

        //Call Method
        //createAudioInputStream(null, audioStreamArray, true);
        //End
        //Finding server availablity
        pausBtn.setEnabled(false);
        serverStatus.start();
        try {
          //  new UIControls(mainFrame).startControlProcess();
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    PlotWave() {
        
      
     
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wavePanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        samplingPanel = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        pausBtn = new javax.swing.JButton();
        captBtn = new javax.swing.JButton();
        playBtn = new javax.swing.JButton();

        setAutoscrolls(true);

        wavePanel.setBackground(new java.awt.Color(255, 255, 255));
        wavePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        wavePanel.setAutoscrolls(true);
        wavePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wavePanelMouseClicked(evt);
            }
        });

        jToolBar1.setBackground(new java.awt.Color(246, 246, 246));
        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar1.setOpaque(false);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/icons8-Fit to Width-20.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/zoom-in-3.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMaximumSize(new java.awt.Dimension(33, 33));
        jButton1.setMinimumSize(new java.awt.Dimension(33, 33));
        jButton1.setPreferredSize(new java.awt.Dimension(33, 33));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/zoom-out-3.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setMaximumSize(new java.awt.Dimension(33, 33));
        jButton2.setMinimumSize(new java.awt.Dimension(33, 33));
        jButton2.setPreferredSize(new java.awt.Dimension(33, 33));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 279));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jScrollPane1MousePressed(evt);
            }
        });
        jScrollPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jScrollPane1KeyPressed(evt);
            }
        });

        samplingPanel.setBackground(new java.awt.Color(255, 255, 255));
        samplingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                samplingPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                samplingPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                samplingPanelMouseReleased(evt);
            }
        });
        samplingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                samplingPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                samplingPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout samplingPanelLayout = new javax.swing.GroupLayout(samplingPanel);
        samplingPanel.setLayout(samplingPanelLayout);
        samplingPanelLayout.setHorizontalGroup(
            samplingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 995, Short.MAX_VALUE)
        );
        samplingPanelLayout.setVerticalGroup(
            samplingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(samplingPanel);

        timeLabel.setBackground(new java.awt.Color(204, 255, 255));
        timeLabel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        timeLabel.setText("jLabel2");

        pausBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/stop.png"))); // NOI18N
        pausBtn.setToolTipText("pause");
        pausBtn.setBorderPainted(false);
        pausBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausBtnActionPerformed(evt);
            }
        });

        captBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/record.png"))); // NOI18N
        captBtn.setToolTipText("record");
        captBtn.setBorderPainted(false);
        captBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captBtnActionPerformed(evt);
            }
        });

        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/play-button.png"))); // NOI18N
        playBtn.setToolTipText("play");
        playBtn.setBorderPainted(false);
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wavePanelLayout = new javax.swing.GroupLayout(wavePanel);
        wavePanel.setLayout(wavePanelLayout);
        wavePanelLayout.setHorizontalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wavePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(wavePanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(255, 255, 255)
                        .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pausBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(captBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        wavePanelLayout.setVerticalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wavePanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(playBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pausBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(captBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(wavePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    AdjustmentListener adjustmentListener = new AdjustmentListener() {
        @Override
        public void adjustmentValueChanged(AdjustmentEvent e) {
            if (audioInputStream != null) {
                samplingGraph.createWaveForm(null);
            }
        }
    };

    public void setExeutionTime(String exe_time) {
//        this.lblexecTime.setText(exe_time);
    }

    public void clearInfoLabel() {
        fileName = "untitled";
        duration = 0.00;
//        lblexecTime.setText("Done !");
    }

    public void clearExTimeLanel() {
   //     lblexecTime.setText("Done !");
    }

    //File Load
    
  
    
    
    public String fileOpenMethod() {
        
        String filename="";
        try {
             
            File fileDir = new File(System.getProperty("user.dir"));
            JFileChooser fc = new JFileChooser(fileDir);

            fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                @Override
                public boolean accept(File file) {

                    if (file.isDirectory()) {
                        return true;
                    }
                    String name = file.getName().toLowerCase();
                    if (name.endsWith(".wav") || name.endsWith(".mp3") || name.endsWith(".wma")) {
                        return true;
                    }
                    return false;
                }

                @Override
                public String getDescription() {
                    return ".wav, .mp3, .wma";
                }
            });


            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

                long start = System.currentTimeMillis();

                String source_file_name = (fc.getSelectedFile().getName()).toLowerCase();//eg. test.mp3

                int idx = source_file_name.lastIndexOf('.');
                String wav_file_name = source_file_name.substring(0, idx) + ".wav";

                File convertedFile = new File("conf/converted");
                convertedFile.mkdir();
                File soxExefile = new File("sox/sox.exe");
                File allToWavExefile = new File("sox/AlltowavCmd.exe");
                Process pr;
                String sox_path = soxExefile.getAbsolutePath();
                String allToWav_path = allToWavExefile.getAbsolutePath();

                String source_file_path = fc.getSelectedFile().getAbsolutePath();
                String wav_file_path = convertedFile.getAbsolutePath() + "\\" + wav_file_name;
                 filename=wav_file_path;
                String sox_command = sox_path + " " + source_file_path + " -r 8k " + convertedFile.getAbsolutePath() + "\\" + wav_file_name;
                //String mystring1 = sox_path+" -r 8k -e signed -b 8 -c 1 "+source_file_path+" d:\\converted\\"+newFileName;
                String AllToWav_command = allToWav_path + " " + source_file_path + " -O" + convertedFile.getAbsolutePath() + "\\" + wav_file_name + " -S8000";
                try {
                    if ((source_file_name).endsWith(".mp3")) {


                        Process t = Runtime.getRuntime().exec(sox_command);
                        t.waitFor();


                        System.out.println("sox command: " + sox_command);
                        File wave = new File(wav_file_path);

                        if (!wave.exists()) {
                            System.out.println("Error : File not found !");
                        }

                        createAudioInputStream(wave, null, true);
                      //  loadB.setEnabled(false);
                        //lblloading.setText("Done");
                    } else if ((source_file_name).endsWith(".wma")) {
                        Process t = Runtime.getRuntime().exec(AllToWav_command);
                        t.waitFor();


                        System.out.println("All to wave command: " + AllToWav_command);
                        File wave = new File(wav_file_path);

                        if (!wave.exists()) {
                            System.out.println("Error: File not found !");
                        }

                        createAudioInputStream(wave, null, true);
                    //    loadB.setEnabled(false);
                        //lblloading.setText("Done");

                    } else {
                        createAudioInputStream(fc.getSelectedFile(), null, true);
//                        loadB.setEnabled(false);
                    }
                    //--
                    double elapsed = (System.currentTimeMillis() - start) / 1000.0;
                    //lblprocTime.setText("Processing Time: " + elapsed + " sec");
                    //System.out.println("Processing Time: " + elapsed + " sec");
                } catch (IOException ex) {
                    //Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex1) {
                    // Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex1);
                }

            }
        } catch (SecurityException ex) {
            // JavaSound.showInfoDialog();
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
       
      mainFrame.setVisible(true);
     System.out.println("filename === "+ filename);
      //  boolean autoscrolls = jScrollPane1.getAutoscrolls();
      //jScrollPane1.createHorizontalScrollBar();
      filenamefortab=filename;
      System.out.println("filenamefortab === "+ filenamefortab);
      return filename;// = convertedFile.getAbsolutePath() + "\\" + wav_file_name;

      
      
      //mainpopup.setVisible(false);
    }//End File Load
    
    public void dummyopennewtab()
    {
 mainFrame.opennewtab();
     }
    
   

    public void playSound() {
        try {

            buffStatus = true;
            lineStatus = false;

            playback.start();
            samplingGraph.start();
            captBtn.setEnabled(false);
            pausBtn.setEnabled(true);
            playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/pause.png")));
            playBtn.setToolTipText("pause");

        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void stopSound() {
        try {
            buffStatus = true;
            lineStatus = false;
            if (playback.line.isOpen()) {
                if (!playback.line.isActive() || !playback.line.isRunning()) {
                    playback.line.start();
                }
            }
            System.out.println("Stop");
            playback.stop();
            samplingGraph.stop();
            captBtn.setEnabled(true);
            pausBtn.setEnabled(false);
            playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/play-button.png")));
            pausBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/stop.png")));
            playBtn.setToolTipText("play");
            pausBtn.setToolTipText("stop");
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    public void pauseSound() {
        try {
            if (capture.thread != null) {
                capture.line.stop();
            } else {


                if (playback.thread != null) {
                    buffStatus = false;

                    while (!lineStatus && playback.thread != null) {
                        try {
                            Thread.sleep(10);
                        } catch (Exception er) {
                        }
                    }

                    playback.line.stop();
                }
            }
            playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/play-button.png")));

            playBtn.setToolTipText("resume");
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void resumeSound() {
        try {
            if (capture.thread != null) {
                capture.line.start();
            } else {
                if (playback.thread != null) {

                    buffStatus = true;
                    lineStatus = false;
                    playback.line.start();
                }
            }
            playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech.icons1/pause.png")));
            playBtn.setToolTipText("pause");
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void recordSound() {
        try {
            file = null;
            capture.start();
            fileName = "untitled";
            recordGraph.start();
//            loadB.setEnabled(false);
            playBtn.setEnabled(false);
            pausBtn.setEnabled(true);

           // waveB.setEnabled(false);
            captBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/stop.jpg")));
            captBtn.setToolTipText("stop");
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void stopRecord() {
        try {
            lines.removeAllElements();
            capture.stop();
            recordGraph.stop();
//            loadB.setEnabled(true);
            playBtn.setEnabled(true);
            pausBtn.setEnabled(false);
           // waveB.setEnabled(true);
            captBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/record.jpg")));
            captBtn.setToolTipText("record");
        } catch (Exception er) {
            System.err.println(er);
        }
    }
          private void samplingPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMousePressed
              // TODO add your handling code here:

              if (evt.getButton() == MouseEvent.BUTTON3) {
                  rightClick.addMenuItems();
                  menu.show(evt.getComponent(), evt.getX(), evt.getY());
              } else {
                  if (mousePosX1 == 0 && mousePosX2 == 0) {
                      mousePosX1 = evt.getX();
                      mousePosY1 = evt.getY();

                  } else {
                      mousePosX1 = 0;
                      mousePosX2 = 0;
                      mousePosY1 = 0;

                  }

              }
              // ;
          }//GEN-LAST:event_samplingPanelMousePressed

          private void samplingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseClicked
              // TODO add your handling code here:
              samplingGraph.repaint();

          }//GEN-LAST:event_samplingPanelMouseClicked

          private void samplingPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseReleased
              // TODO add your handling code here:
              try {
                  if (evt.getY() > 190) {
                      if (audioInputStream != null) {
                          rightClick.resizeandAddannotation();
                      }
                  }
                  samplingGraph.repaint();
              } catch (Exception er) {
                  System.err.println(er);
              }
              // ;
          }//GEN-LAST:event_samplingPanelMouseReleased

          private void samplingPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseDragged
              // TODO add your handling code here:
              try {
                  if (mousePosX1 == 0) {
                      mousePosX1 = evt.getX();
                  }
                  mousePosX2 = evt.getX();
                  samplingGraph.repaint();
              } catch (Exception er) {
                  System.err.println(er);
              }
              // ;
          }//GEN-LAST:event_samplingPanelMouseDragged

          private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
              // TODO add your handling code here:
              setZoomIn();

          }//GEN-LAST:event_jButton1ActionPerformed

    public void setZoomIn() {
        try {
            if (audioInputStream != null) {
                int screenWidth = (int) (samplingPanel.getSize().getWidth() * 2);
                setGrphSizeinScreen(screenWidth);
               // mousePosX1 = (double) (mousePosX1 * 2);
               // mousePosX2 = (double) (mousePosX2 * 2);
                samplingGraph.createWaveForm(streamBytes.getCurrent());
               // jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) mousePosX1 - 50, 0));
              //  jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void setZoomOut() {
        try {
            if (audioInputStream != null) {

                if (frames_per_pixel > 4000) {
                    return;
                }
                
                int screenWidth = (int) (samplingPanel.getSize().getWidth() / 2);
                int xSize = (int) tk.getScreenSize().getWidth();
                setGrphSizeinScreen(screenWidth);
                if ((screenWidth >= xSize - graphFromScreen)) {
                    mousePosX1 = (double) (mousePosX1 / 2);
                    mousePosX2 = (double) (mousePosX2 / 2);
                }
                samplingGraph.createWaveForm(streamBytes.getCurrent());
               // jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) mousePosX1 - 50, 0));
                
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }
          private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
              // TODO add your handling code here:            
              setZoomOut();
          }//GEN-LAST:event_jButton2ActionPerformed

          private void samplingPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseMoved
              // TODO add your handling code here:
              mouseMoveX1 = evt.getX();
              samplingGraph.repaint();
          }//GEN-LAST:event_samplingPanelMouseMoved

    private void wavePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wavePanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_wavePanelMouseClicked

    private void jScrollPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MousePressed

    private void jScrollPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane1KeyPressed
        // TODO add your handling code here:
        // javax.swing.JOptionPane.showMessageDialog(mainFrame, "hello");
    }//GEN-LAST:event_jScrollPane1KeyPressed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        // TODO add your handling code here:
        
        try {
            if (audioInputStream != null) 
            {
                if (playBtn.getToolTipText().equals("play")||playBtn.getToolTipText().equals("Play")) 
                {
                    if (rightClick.sourceAvailValidation()) 
                    {
                        
                        rightClick.playSoundAll();
                    }
                } else 
                {
                   if (audioInputStream != null) 
                   {
                             if (playBtn.getToolTipText().equals("pause")||playBtn.getToolTipText().equals("Pause")) 
                             {
                                 pauseSound();
                                } 
                             else if (playBtn.getToolTipText().equals("resume")||playBtn.getToolTipText().equals("Resume"))
                             {
                                     resumeSound();
                              }
                    }//stopSound();
                }
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }//GEN-LAST:event_playBtnActionPerformed

    private void pausBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausBtnActionPerformed
        // TODO add your handling code here:
               stopSound();
    }//GEN-LAST:event_pausBtnActionPerformed

    private void captBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captBtnActionPerformed
        // TODO add your handling code here:
        if (captBtn.getToolTipText().equals("record")||captBtn.getToolTipText().equals("Record")) {
                  recordSound();
                  pausBtn.setEnabled(false);
                  playBtn.setEnabled(false);
              } else {
                  stopRecord();
                  playBtn.setEnabled(true);
              }
    }//GEN-LAST:event_captBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int i = 0;
        while (i<10)
        {
            setZoomOut();
            i++;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton captBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton pausBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JPanel samplingPanel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel wavePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void open() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void close() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    //Set Screen Size
    public void setGrphSizeinScreen(int screenWidth) {
        try {
           
            int xSize = (int) tk.getScreenSize().getWidth();
            
            
            if (screenWidth < (xSize - graphFromScreen)) {
                screenWidth = xSize - graphFromScreen;
            }
            if (streamBytes.getCurrent() != null) {
                if (screenWidth > ((streamBytes.getCurrent().length) / 2)) {
                    screenWidth = ((streamBytes.getCurrent().length) / 2);
                }
            }
            sg.setSize(new Dimension(screenWidth, graphVerticalSize));
            samplingPanel.setSize(new Dimension(screenWidth, graphVerticalSize));
            samplingPanel.setPreferredSize(new java.awt.Dimension(screenWidth, graphVerticalSize));
            this.revalidate();
            this.repaint();
        } catch (Exception er) {
            System.err.println(er);
        }
    }//End Screen Size

    //Fix Initial Screen Pixel
    private int setNormalScreen(AudioInputStream audioInput) {

        int pixcelPerscreen = 0;
        try {
            if (audioInput == null) {
                return 0;
            }
            int audioLenth = (int) audioInput.getFrameLength();
            pixcelPerscreen = (audioLenth / normalPixcel);
            

        } catch (Exception ex) {
            System.out.println(ex);
        }
        System.out.println("pixel per screen = "+pixcelPerscreen);
        return pixcelPerscreen;
    }//End Initial Screen pixel

    //Create Audio InputStream Method
    public void createAudioInputStream(File file, AudioInputStream audioStreamArray, boolean updateComponents) {

        if (file != null && file.isFile()) {
            try {

                if (!(file.getName().toLowerCase().endsWith(".wav"))) {
                    javax.swing.JOptionPane.showMessageDialog(mainFrame, "This is not correct formate");
                    return;
                }

                this.file = file;
                this.audioInputStream = AudioSystem.getAudioInputStream(file);
                fileName = file.getName();
                abbfilePath = file.getAbsolutePath();

            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                javax.swing.JOptionPane.showMessageDialog(this, "Can not open the file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            } catch (IOException ex) {
                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                javax.swing.JOptionPane.showMessageDialog(this, "Can not open the file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else if (audioStreamArray != null) {
            try {
                if (audioStreamArray.available() < 1) {
                    return;
                }

                this.audioInputStream = audioStreamArray;
                fileName = "Wave1.wav";

            } catch (IOException ex) {
                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // reportStatus("Audio file required.");
            return;
        }
        try {
            if (this.audioInputStream != null) {
                try {
                    if (this.audioInputStream.available() < 1) {
                        return;
                    }


                } catch (IOException ex) {
                    Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
            errStr = null;
            if (capture.thread == null) {
                playBtn.setEnabled(true);
            }

            //Set Bytes and Generated
            byte[] audioBytes = StreamConverter.streamTobyte(audioInputStream);
            //streamBytes.setOriginal(audioBytes);
            if (audioBytes == null) {
                audioInputStream = null;
                return;
            }
            streamBytes.setCurrent(audioBytes);
            audioBytes = null;
            audioInputStream = StreamConverter.byteTostream(streamBytes.getCurrent(), audioInputStream);
            fileHashValue = Hash.getHashValue(audioInputStream);

           // int widthScreen = setNormalScreen(audioInputStream);
            int widthScreen = 1492;
            System.out.println("width screen = "+widthScreen);
            setGrphSizeinScreen(widthScreen);
            long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / audioInputStream.getFormat().getFrameRate());
            duration = milliseconds / 1000.0;

//            waveB.setEnabled(true);
            if (updateComponents) {
                samplingGraph.createWaveForm(streamBytes.getCurrent());
            }
        } catch (Exception ex) {
            System.out.println("Error1 " + ex);
            reportStatus(ex.toString());
        }
    }//End Audio Input stream

//Error Report Method
    private void reportStatus(String msg) {
        if ((errStr = msg) != null) {
            System.out.println(errStr);
            //samplingGraph.repaint();
        }
    }//End Error Report

    //File Save Method
    public void saveToFile(String name, AudioFileFormat.Type fileType) {

        if (audioInputStream == null) {
            reportStatus("No loaded audio to save");
            return;
        } else if (file != null) {
            createAudioInputStream(file, null, false);
        }

        // reset to the beginnning of the captured data
        try {
            audioInputStream.reset();
        } catch (Exception e) {
            reportStatus("Unable to reset stream " + e);
            return;
        }

        File fileDir = new File(fileName = name);
        try {
            if (AudioSystem.write(audioInputStream, fileType, fileDir) == -1) {
                throw new IOException("Problems writing to file");
            }
        } catch (Exception ex) {
            reportStatus(ex.toString());
        }
        samplingGraph.repaint();
    }
    // End File Save

    /**
     * ********************************************************************************************************
     * Write data to the OutputChannel.
     */
    public class Playback implements Runnable {

        public SourceDataLine line;
        Thread thread;

        public void start() {
            errStr = null;
            thread = new Thread(this);
            thread.setName("Playback");
            thread.start();
        }

        public void stop() {
            thread = null;
        }

        private void shutDown(String message) {
            if ((errStr = message) != null) {
                System.err.println(errStr);
                samplingGraph.repaint();
            }
            if (thread != null) {
                thread = null;
                samplingGraph.stop();
                captBtn.setEnabled(true);
                pausBtn.setEnabled(false);
                playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/btn_play_icon.png")));
                playBtn.setToolTipText("Play");
            }
        }

        @Override
        public void run() {
            try {

                if (streamBytes.getCurrent() == null) {
                    shutDown("No loaded audio to play back");
                    return;
                } else {
                    if (!selectedPlay) {
                        audioInputStream = StreamConverter.byteTostream(streamBytes.getCurrent(), audioInputStream);
                    } else {
                        if (streamBytes.getSelectedPlay() == null) {
                            return;
                        }
                        audioInputStream = StreamConverter.byteTostream(streamBytes.getSelectedPlay(), audioInputStream);
                    }

                }

                if (audioInputStream == null) {
                    shutDown("No loaded audio to play back");
                    return;
                }
                long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / audioInputStream.getFormat().getFrameRate());
                duration = milliseconds / 1000.0;

                if (line != null) {
                    line.stop();
                    line.close();
                    System.out.println("Reached");
                    line = null;
                }


                // get an AudioInputStream of the desired format for playback
                AudioFormat format = audioInputStream.getFormat();
                AudioInputStream playbackInputStream = AudioSystem.getAudioInputStream(format, audioInputStream);

                if (playbackInputStream == null) {
                    shutDown("Unable to convert stream of format " + audioInputStream + " to format " + format);
                    return;
                }

                // define the required attributes for our line,
                // and make sure a compatible line is supported.

                DataLine.Info info = new DataLine.Info(SourceDataLine.class,
                        format);
                if (!AudioSystem.isLineSupported(info)) {
                    shutDown("Line matching " + info + " not supported.");
                    return;
                }

                // get and open the source data line for playback.

                try {
                    line = (SourceDataLine) AudioSystem.getLine(info);
                    line.open(format, bufSize);
                } catch (LineUnavailableException ex) {
                    shutDown("Unable to open the line: " + ex);
                    return;
                }

                // play back the captured audio data

                int frameSizeInBytes = format.getFrameSize();
                int bufferLengthInFrames = line.getBufferSize() / 16;
                int bufferLengthInBytes = bufferLengthInFrames * frameSizeInBytes;
                byte[] data = new byte[bufferLengthInBytes];
                int numBytesRead = 0;

                // start the source data line
                line.start();

                while (thread != null) {
                    try {
                        if ((numBytesRead = playbackInputStream.read(data)) == -1) {
                            break;
                        }
                        int numBytesRemaining = numBytesRead;
                        while (numBytesRemaining > 0) {
                            Thread.sleep(5);
                            if (buffStatus) {
                                numBytesRemaining -= line.write(data, 0, numBytesRemaining);
                            } else {
                                lineStatus = true;
                            }
                        }
                    } catch (Exception e) {
                        shutDown("Error during playback: " + e);
                        break;
                    }
                }
                // we reached the end of the stream.  let the data play out, then
                // stop and close the line.
                if (thread != null) {
                    line.drain();
                }

                line.stop();
                line.close();
                System.out.println("Reached");
                line = null;
                selectedPlay = false;
                data = null;
                shutDown(null);
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    } // End class Playback

    //********************************************************************************************************
    /**
     * Reads data from the input channel and writes to the output stream
     */
    class Capture implements Runnable {

        TargetDataLine line;
        Thread thread;

        public void start() {
            errStr = null;
            thread = new Thread(this);
            thread.setName("Capture");
            thread.start();
        }

        public void stop() {
            thread = null;
        }

        private void shutDown(String message) {
            try {
                if ((errStr = message) != null && thread != null) {
                    thread = null;
                    //samplingGraph.stop();
//                    loadB.setEnabled(true);
                    playBtn.setEnabled(true);
                    pausBtn.setEnabled(false);

//                    waveB.setEnabled(true);
                    captBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/record.jpg")));
                    captBtn.setToolTipText("record");
                    System.err.println(errStr);
                    //samplingGraph.repaint();
                }
            } catch (Exception er) {
            }
        }

        private AudioFormat getAudioFormat() {
            float sampleRate = 8000.0F;
            //8000,11025,16000,22050,44100
            int sampleSizeInBits = 16;
            //8,16
            int channels = 1;
            //1,2
            boolean signed = true;
            //true,false
            boolean bigEndian = false;
            //true,false

            return new AudioFormat(sampleRate,
                    sampleSizeInBits,
                    channels,
                    signed,
                    bigEndian);
        }//end getAudioFormat

        @Override
        public void run() {
            try {
                duration = 0;
                audioInputStream = null;

                // define the required attributes for our line,
                // and make sure a compatible line is supported.

                try {
                    AudioFormat format = null;
                    DataLine.Info info = null;
                    try {

                        format = getAudioFormat();

                        info = new DataLine.Info(TargetDataLine.class,
                                format);
                        AudioSystem.getLine(info);

                        if (!AudioSystem.isLineSupported(info)) {
                            shutDown("Line matching " + info + " not supported.");
                            return;
                        }

                    } catch (Exception er) {
                    }

                    // get and open the target data line for capture.

                    try {
                        line = (TargetDataLine) AudioSystem.getLine(info);
                        line.open(format, line.getBufferSize());
                    } catch (LineUnavailableException ex) {
                        shutDown("Unable to open the line: " + ex);
                        return;
                    } catch (SecurityException ex) {
                        shutDown(ex.toString());
                        //JavaSound.showInfoDialog();
                        return;
                    } catch (Exception ex) {
                        shutDown(ex.toString());
                        return;
                    }

                    // play back the captured audio data
                    capOut = new ByteArrayOutputStream();
                    int frameSizeInBytes = format.getFrameSize();
                    int bufferLengthInFrames = line.getBufferSize() / 8;
                    int bufferLengthInBytes = bufferLengthInFrames * frameSizeInBytes;
                    byte[] data = new byte[bufferLengthInBytes];
                    int numBytesRead, noofwrites = 1;


                    line.start();

                    while (thread != null) {
                        if ((numBytesRead = line.read(data, 0, bufferLengthInBytes)) == -1) {
                            break;
                        }


                        try {

                            FileOutputStream fos2 = new FileOutputStream("record/out2.wav", true);
                            fos2.write(data);
                            fos2.close();
                        } catch (Exception e1) {//Catch exception if any
                            System.err.println("Error: " + e1.getMessage());
                        }
                        capOut.write(data, 0, numBytesRead);
                    }

                    // we reached the end of the stream.  stop and close the line.
                    line.stop();
                    line.close();
                    line = null;

                    // stop and close the output stream
                    try {
                        capOut.flush();
                        capOut.close();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }

                    // load bytes into the audio input stream for playback

                    byte audioBytes[] = capOut.toByteArray();


                    ByteArrayInputStream bais = new ByteArrayInputStream(audioBytes);
                    audioInputStream = new AudioInputStream(bais, format, audioBytes.length / frameSizeInBytes);

                    String recordFile = rightClick.saveLocation();
                    if (recordFile == null) {
                        recordFile = "temp.wav";
                    }
                    StreamConverter.streamTowavefile(recordFile, audioInputStream);
                    audioInputStream = null;
                    File recordFileName = new File(recordFile);
                    if (recordFileName.exists()) {
                        createAudioInputStream(recordFileName, null, true);
                    } else {
                        javax.swing.JOptionPane.showConfirmDialog(mainFrame, "Unable to create file");
                    }
                    //streamBytes.setOriginal(audioBytes);
              /*  streamBytes.setCurrent(audioBytes);
                     int widthScreen = setNormalScreen(audioInputStream);
                     setGrphSizeinScreen(widthScreen);
                     long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / format.getFrameRate());
                     duration = milliseconds / 1000.0;


                     audioInputStream.reset();*/
                } catch (Exception ex) {
                    ex.printStackTrace();
                    return;
                }
                // saveToFile("saidesh", AudioFileFormat.Type.WAVE);
                // samplingGraph.createWaveForm(audioBytes);
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    } // End class Capture

    //************************************************************************************************
    /**
     * Render a WaveForm.
     */
    class SamplingGraph extends JPanel implements Runnable {

        private Thread thread;
        private AudioFormat format;
        private Font font10 = new Font("serif", Font.PLAIN, 10);
        private Font font12 = new Font("serif", Font.PLAIN, 12);
        Color jfcBlue = new Color(204, 204, 255);
        Color pink = new Color(139, 0, 0);
        private int[] audioDataNormalize;
        private int normalizedValue = 3000;
        Speech.signalProcessing.SignalProc sigProc;

        public SamplingGraph() {
            setBackground(new Color(255, 255, 255, 255));

        }

        public void createWaveForm(byte[] audiobyte) {

            if (audioInputStream == null) {
                return;
            }

            // Declation part
            Dimension d = getSize();
            d = this.getSize();
            int w = d.width;
            int h = d.height;
            byte my_byte = 0;
            double y_last = 0;
            int[] audioData = null;
            format = audioInputStream.getFormat();
            int numChannels = format.getChannels();
            normalizedValue = 5000;


            // mainFrame.heepSize();

            //End Declation
            try {
                //Read Bytes from current Bytes
                if (audiobyte == null) {
                    try {
                        audiobyte = streamBytes.getCurrent();
                    } catch (Exception ex) {
                        reportStatus(ex.toString());
                        return;
                    }
                }

                try {
                    long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / audioInputStream.getFormat().getFrameRate());
                    System.out.println("actual length  " +audioInputStream.getFrameLength());
                    duration = milliseconds / 1000.0;
                } catch (Exception er) {
                    System.err.println(er.getMessage());
                }





                //pix rate

                //frames_per_pixel = audiobyte.length / format.getFrameSize() / w;
               
             
                //End Normalized


                //Postion taken

                int endPaint = jScrollPane1.getSize().width;
                System.out.println(endPaint);
               // System.out.println("jscrollPanel = "+jScrollPane1.getSize().width + "    horizontal = "+ jScrollPane1.getHorizontalScrollBar().getValue());
                int startPaint = jScrollPane1.getHorizontalScrollBar().getValue();
                System.out.println("pankaj tested\t"+startPaint);
                endPaint = (startPaint + endPaint);
                
                
                int constantWidth = 1595;
                //System.out.println(w);
                int divFactor = w/constantWidth;
                
                frames_per_pixel = audiobyte.length /endPaint/2/divFactor;
                
                
                int startbytes = startPaint * frames_per_pixel*2 ;
                int endbytes = endPaint * frames_per_pixel *2;
               
              //  jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) mousePosX1 - 50, 0));
               
               // System.out.println("end paint = "+endPaint + "  start paint = "+startPaint + " bytes "+audiobyte.length / format.getFrameSize() ) ;

                byte[] audioBytes = new byte[endbytes - startbytes];
                int newby = 0;
                for (int by = startbytes; by < endbytes - 10; by++) {
                    if (by < (audiobyte.length - 10)) {
                        audioBytes[newby++] = audiobyte[by];
                    }
                }


                //End read
//System.err.println(audioInputStream.getFormat().getFrameRate());
//Bit Calculation

                if (format.getSampleSizeInBits() == 16) {
                    int nlengthInSamples = audioBytes.length / 2;
                    audioData = new int[nlengthInSamples];
                    if (format.isBigEndian()) {
                        for (int i = 0; i < nlengthInSamples; i++) {
                            /* First byte is MSB (high order) */
                            int MSB = (int) audioBytes[2 * i];
                            /* Second byte is LSB (low order) */
                            int LSB = (int) audioBytes[2 * i + 1];
                            audioData[i] = MSB << 8 | (255 & LSB);
                        }
                    } else {
                        for (int i = 0; i < nlengthInSamples; i++) {
                            /* First byte is LSB (low order) */
                            int LSB = (int) audioBytes[2 * i];
                            /* Second byte is MSB (high order) */
                            int MSB = (int) audioBytes[2 * i + 1];
                            audioData[i] = MSB << 8 | (255 & LSB);
                            
                            
                           /* File fi=new File("C:\\TATA-V-42\\src\\Speech\\WavePanel\\Au.txt");
	                    FileWriter fw=new FileWriter(fi,true);
                            BufferedWriter tout = new BufferedWriter(fw);
	                    tout.write(String.valueOf(audioData[i]));
                            tout.newLine();
                            tout.flush();
                            tout.close();  */
                            //System.out.println(audioData[i]);
                        }
                        
//calculating the maximum and minimum amplitude 
                           int maximum = audioData[0];   // start with the first value
                           for (int m=1; m<audioData.length; m++) {
                           if (audioData[m] > maximum) {
                           maximum = audioData[m];   // new maximum
                           
                            }
                        }
                           
                         
                           int minimum = audioData[0];   // start with the first value
                           for (int k=1; k<audioData.length; k++) {
                           if (audioData[k] < minimum) {
                           minimum = audioData[k];   // new maximum
                           
                            }
                        }
                           
                            }
                        }
                                
                                     
                                
                            
                           
                 else if (format.getSampleSizeInBits() == 8) {
                    int nlengthInSamples = audioBytes.length;
                    audioData = new int[nlengthInSamples];
                    if (format.getEncoding().toString().startsWith("PCM_SIGN")) {
                        for (int i = 0; i < audioBytes.length; i++) {
                            audioData[i] = audioBytes[i];

                        }
                    } else {
                        for (int i = 0; i < audioBytes.length; i++) {
                            audioData[i] = audioBytes[i] - 128;

                        }
                    }
                }



//End Bit calcution
                if (capture.thread == null) {
                    //Normalized Bit
                    sigProc = new SignalProc();
                    audioDataNormalize = sigProc.doubleToInt(sigProc.normalize(sigProc.intToDouble(audioData), 1400));
                    //frames_per_pixel = audioBytes.length / format.getFrameSize() / w;
                    //End Normalized

                    //Start Normalized audio bytes

                } else {
                    sigProc = new SignalProc();
                    audioDataNormalize = sigProc.doubleToInt(sigProc.normalize(sigProc.intToDouble(audioData), 1400));
                    //  frames_per_pixel = audioBytes.length / format.getFrameSize() / w;
                }
                lines.removeAllElements();
                double inc = 0.02;
                // Calculate Screen Pixels                   
                for (double x = startPaint; x < endPaint && audioDataNormalize != null; x = x + 0.02) 
                {   inc = inc + 0.02;
                    int idx = (int) (frames_per_pixel * numChannels * inc);
                    

                    if (idx >= audioDataNormalize.length) {
                        break;
                    }
                    if (format.getSampleSizeInBits() == 8) {

                        my_byte = (byte) audioDataNormalize[idx];
                    } else {
                        my_byte = (byte) (2100 * audioDataNormalize[idx] / 32000);
                    }
                    double y_new = (double) (h * (100 - my_byte) / 240);
                    System.out.println("also");
                    lines.add(new Line2D.Double(x, y_last, x, y_new));
                    y_last = y_new;

                }

                //End Calculation




                if (capture.thread == null) {
                    //Create Annotation
                    try {
                       /* Speech.annotations.GetAnnotation annObj = new Speech.annotations.GetAnnotation(mainFrame.getConn());

                        //System.out.println(fileHashValue);
                        Thread.sleep(100);
                        annotationPos = annObj.getAll(fileHashValue);
*/

                    } catch (Exception er) {
                        System.err.println(er);
                    }
                }
                //End to create Annotation
                audioDataNormalize = null;
                audiobyte = null;
                audioData = null;
                audioBytes = null;
                sigProc = null;
                repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
        }

        @Override
        public void paint(Graphics g) {
            
            try {
                
                Dimension d = this.getSize();
                int w = d.width;
                
                int h = d.height - 20;
                int INFOPAD = 15;

                Graphics2D g2 = (Graphics2D) g;
                g2.setBackground(getBackground());
                g2.clearRect(0, 0, w, h);
                g2.setColor(Color.white);
                //g2.fillRect(0, h - INFOPAD, w, INFOPAD);

                if (errStr != null) {
                    g2.setColor(jfcBlue);
                    g2.setFont(new Font("serif", Font.BOLD, 18));
                    g2.drawString("ERROR", 5, 20);
                    AttributedString as = new AttributedString(errStr);
                    as.addAttribute(TextAttribute.FONT, font12, 0, errStr.length());
                    AttributedCharacterIterator aci = as.getIterator();
                    FontRenderContext frc = g2.getFontRenderContext();
                    LineBreakMeasurer lbm = new LineBreakMeasurer(aci, frc);
                    float x = 5, y = 25;
                    lbm.setPosition(0);
                    while (lbm.getPosition() < errStr.length()) {
                        TextLayout tl = lbm.nextLayout(w - x - 5);
                        if (!tl.isLeftToRight()) {
                            x = w - tl.getAdvance();
                        }
                        tl.draw(g2, x, y += tl.getAscent());
                        y += tl.getDescent() + tl.getLeading();
                    }
                } else {
                    
                    g2.setColor(Color.black);
                    g2.setFont(font12);
                   String fileNameDis = "";
                    int startPaint = jScrollPane1.getHorizontalScrollBar().getValue();
                    if (fileName.length() > 15) {

                        try {
                            fileNameDis = fileName.substring(0, 15);
                        } catch (Exception er) {
                            System.err.println(er);
                        }
                    } else {
                        fileNameDis = fileName;
                    }
                    if (capture.thread != null) {
                        g2.setColor(Color.black);
                        g2.setFont(font12);
                       timeLabel.setText("Length: " + timeConversion((int) record_duration));
                    } else {

                        if (playback.thread != null) {//timeLabel.setVisible(false);
                            if (mousePosX1 != 0 && mousePosX2 != 0) {
                                   System.out.println("i am here1");
                                int minValue = (int) ((mousePosX1 - mousePosX2) < 0 ? mousePosX1 : mousePosX2);

                                double intial_second = ((minValue * frames_per_pixel) / audioInputStream.getFormat().getFrameRate()) + seconds;

                                timeLabel.setText(/*"File : " + fileNameDis + "        Length : " + timeConversion((int) (streamBytes.getCurrent().length / (audioInputStream.getFormat().getFrameRate() * audioInputStream.getFormat().getFrameSize()))) + "       "Position : " + */ timeConversion((int) intial_second));

                            } else if (mousePosX1 != 0 && mousePosX2 == 0) {
System.out.println("i am here2");
                                double intial_second = ((mousePosX1 * frames_per_pixel) / audioInputStream.getFormat().getFrameRate()) + seconds;

                                timeLabel.setText(/*"File : " + fileNameDis + "        Length : " + timeConversion((int) (streamBytes.getCurrent().length / (audioInputStream.getFormat().getFrameRate() * audioInputStream.getFormat().getFrameSize()))) + "        Position : " +*/ timeConversion((int) intial_second));
                            } else {System.out.println("i am here3");
                                timeLabel.setText(/*"File : " + fileNameDis + "        Length : " + timeConversion((int) (streamBytes.getCurrent().length / (audioInputStream.getFormat().getFrameRate() * audioInputStream.getFormat().getFrameSize()))) + "      Position : " + */timeConversion((int) seconds));
                            }
                        } else {System.out.println("i am here4");
                            if (audioInputStream != null) {
                                timeLabel.setText(/*"File : " + fileNameDis + "        Length : " + timeConversion((int) (streamBytes.getCurrent().length / (audioInputStream.getFormat().getFrameRate() * audioInputStream.getFormat().getFrameSize()))) + "       Position : " + */ timeConversion((int) seconds));
                            } else {System.out.println("i am here5");
                                timeLabel.setText(/*"File : " + fileNameDis + "        Length : " + timeConversion((int) duration) + "      Position : " +*/ timeConversion((int) seconds));
                            }


                        }

                    }


                    // g2.fillRect((int) 0, 95, (int) startPaint+jScrollPane1.getWidth(),2);
                    if (audioInputStream != null && format != null) {

                        //Declaration Part
                        byte my_byte;
                        double y_last = 0;
                        int numChannels = format.getChannels();
                        int endPaint = jScrollPane1.getSize().width;
                        endPaint = (startPaint + endPaint);
                        




                        //End Declaration


                        //Draw Selection portion 
                        //Color mouseDraggedbg = new Color(255, 255, 153);
                        Color mouseDraggedbg = new Color(51, 153, 255);
                        g2.setColor(mouseDraggedbg);
                        int widthPos1 = (int) (mousePosX1 - mousePosX2);
                        int minValue1 = (int) (widthPos1 < 0 ? mousePosX1 : mousePosX2);
                        widthPos1 = (widthPos1 < 0 ? -1 * widthPos1 : widthPos1);
                        if (minValue1 != 0) {
                            g2.fillRect((int) minValue1, 0, (int) widthPos1, h - INFOPAD);
                            if (mousePosY1 > 195) {
                                try {
                                    BufferedImage image2 = ImageIO.read(new File("conf/img/L_01.jpg"));
                                    g2.drawImage(image2, (int) mousePosX2, (int) h - INFOPAD - 2, null);
                                    samplingGraph.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                                } catch (IOException ex) {
                                    Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                        //End Selection

                        //Annotation Part
                        if (annotationPos != null) {
                            if (annotationPos.length > 0) {
                                PixcelConversion pixConversion = new PixcelConversion();
                                for (int ann = 0; ann < annotationPos.length; ann++) {
                                    int anStartpos = pixConversion.milliSecondToPixcel(annotationPos[ann][0], frames_per_pixel, (int) format.getFrameRate());
                                    int anEndpos = pixConversion.milliSecondToPixcel(annotationPos[ann][1], frames_per_pixel, (int) format.getFrameRate());
                                    if (anStartpos == 0 || anEndpos == 0) {
                                        continue;
                                    }
                                    

                                    Color annotatioColor;
                                    switch (annotationPos[ann][2]) {
                                        case "High":
                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image, image2;
                                                    image = ImageIO.read(new File("conf/img/r1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/r2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle
                                            annotatioColor = new Color(255, 0, 0);
                                            break;
                                        case "Low":
                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image, image2;
                                                    image = ImageIO.read(new File("conf/img/b1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/b2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle
                                            annotatioColor = new Color(0, 0, 255);
                                            break;
                                        case "Regular":
                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image, image2;
                                                    image = ImageIO.read(new File("conf/img/g1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/g2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle
                                            annotatioColor = new Color(0, 255, 0);
                                            break;
                                        default:
                                            continue;
                                    }
                                    g2.setColor(annotatioColor);
                                    // System.err.println("InS "+annotationPos[ann][0]+" OS "+anStartpos+" inE "+annotationPos[ann][1]+" OE "+anEndpos);
                                    //g2.fillRect((int) anStartpos, 20, (int) anEndpos - anStartpos, h - INFOPAD - 40);
                                    double thickness = 2;
                                    Stroke oldStroke = g2.getStroke();
                                    Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,
                                            new float[]{12, 3}, 3);
                                    g2.setStroke(stroke);
                                    g2.drawRect((int) anStartpos, 20, (int) anEndpos - anStartpos, h - INFOPAD - 60);
                                    g2.setStroke(oldStroke);

                                }


                            }

                        }

                        //End Annotation

                        

                        // Time and amplitude Display
                        
                        if (capture.thread == null) {
                            System.out.println(endPaint);

                            for (int t = startPaint; t < 1014; t++) {     //replaced endPaint with 1014

                                
                                if ((t * frames_per_pixel) % format.getFrameRate() < frames_per_pixel) {
                                    g2.setColor(Color.RED);
                                    int timeLine = (int) ((t * frames_per_pixel) / format.getFrameRate());
                                    
                                    if (frames_per_pixel > 4000) {
                                        if (timeLine % 300 != 0) {
                                            continue;
                                        }
                                    } else if (frames_per_pixel > 2000) {
                                        if (timeLine % 60 != 0) {
                                            continue;
                                        }
                                    } else if (frames_per_pixel > 250) {
                                        if (timeLine % 30 != 0) {
                                            continue;
                                        }
                                    }
                                    if (frames_per_pixel > 220) {
                                        if (timeLine % 10 != 0) {
                                            continue;
                                        }
                                    } else if (frames_per_pixel > 110) {
                                        if (timeLine % 5 != 0) {
                                            continue;
                                        }
                                    } else {
                                    }



                                    String hD = "", mD = "", sD = "", totalTD = "";
                                    int hour = timeLine / 3600;
                                    int hour_balance = timeLine % 3600;
                                    int min = hour_balance / 60;
                                    int min_balance = hour_balance % 60;

                                    if (hour < 10) {
                                        hD = "0" + hour;
                                    } else {
                                        hD = hD + hour;
                                    }
                                    if (min < 10) {
                                        mD = "0" + min;
                                    } else {
                                        mD = mD + min;
                                    }
                                    if (min_balance < 10) {
                                        sD = "0" + min_balance;
                                    } else {
                                        sD = sD + min_balance;
                                    }

                                    totalTD = hD + ":" + mD + ":" + sD;
                                    
                                    g2.draw((Line2D) new Line2D.Double(t, h - 30, t, h - 20));
                                    g2.setColor(Color.black);
                                    g2.drawString(totalTD, t - 20, h - 7);

                                }


                            }
                            g2.setColor(Color.blue);
                            g2.drawLine(startPaint, h - 20 , 1014, h - 20);         //replaced endPaint with 1014
                           // System.out.println(startPaint);
                           // System.out.println(endPaint);
                        }
                        
                        
                        
                          for (int t = startPaint; t < endPaint; t++) {
                          g2.setColor(Color.BLACK);
                            
                          int value = 32768;
                      
                          g2.drawString(String.valueOf(value),3,10);
                          g2.drawString("-32767",3, (float) ((((int)getHeight())*3)/3.7)); 
                        }
                          
                        //End Time and amplitude Display



                        //Start Drawing signal and Time  Line
                        //Color linecolor = new Color(128, 128, 128);
                        Color linecolor = new Color(0,0,100);
                        g2.setColor(linecolor);
                        System.out.println("audioinutstream"+audioInputStream.getFrameLength());
                        System.out.println("lines size"+lines.size());
                        for (int i = 0; i < lines.size(); i++) {

                            // Draw Signal Graph
                            try {
                                if (((Line2D) lines.get(i)).getY2() != 0 && ((Line2D) lines.get(i)).getY1() != 0) {
                                   // System.out.println("signal draw"+i);
                                    g2.draw((Line2D) lines.get(i));
                                }
                            } catch (Exception er) {
                            }

                            //End Draw Singal 


                        }
//End loop of drawing signals and Time lines

                        //mouse movement
                        
                        //Color mouseMovement = new Color(220, 20, 60);
                        Color mouseMovement = new Color(45,179,0);//mouse movement color
                        g2.setColor(mouseMovement);
                        if (mouseMoveX1 != 0) {
                              //double intial_second = ((mouseMoveX1 * frames_per_pixel) / audioInputStream.getFormat().getFrameRate()) + seconds;
                            //System.out.println("i am here my position is-->"+/*timeConversion((int) seconds)*/mouseMoveX1);
                          // int x=(int)mouseMoveX1/8000;
                           double intial_second = ((mouseMoveX1 * frames_per_pixel) / audioInputStream.getFormat().getFrameRate()) ;
                           
                           System.out.println("initial seconds"+intial_second+"\tmouse x1\t"+mouseMoveX1+"\tframespersecond\t"+frames_per_pixel);
                           double x=intial_second*1000; 
                            System.out.println("time type cast\t"+x);
                            timeLabel.setText(""+ timeConversion2(x));
                            g2.fillRect((int) mouseMoveX1, 0, (int) 2, h - INFOPAD);
                        }
                        //End Selection and mouse movement


                        // .. draw current position .. & Playing cursor

                        if (seconds != 0 && !selectedPlay) {
                          
                            double loc = seconds / duration ;
                            loc = loc*1600;
                           // System.out.println("loc = "+loc);
                            g2.setColor(pink);
                            g2.setStroke(new BasicStroke(3));
                            if ((((int) loc % (jScrollPane1.getWidth())) < 50) && loc != 0 && ((loc + jScrollPane1.getWidth()) < (samplingGraph.getWidth() - 10))) {
                              //  jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                            } else {
                                if (endPaint < loc) {
                                //    jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                }
                            }  
                            g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                        } else {
                            if (mousePosX1 != 0 && mousePosX2 != 0) {
                                 
                                int widthPos = (int) (mousePosX1 - mousePosX2);
                                int minValue = (int) (widthPos < 0 ? mousePosX1 : mousePosX2);
                                widthPos = (widthPos < 0 ? -1 * widthPos : widthPos);
                                double loc = (seconds / duration * widthPos) + minValue;
                                g2.setColor(pink);
                                g2.setStroke(new BasicStroke(3));
                                g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                            } else if (mousePosX1 != 0 && mousePosX2 == 0) {
                                
                                int widthPos = (int) (mousePosX1 - (int) ((samplingGraph.getSize().width) - 10));
                                int minValue = (int) (widthPos < 0 ? mousePosX1 : (int) ((samplingGraph.getSize().width) - 10));
                                widthPos = (widthPos < 0 ? -1 * widthPos : widthPos);
                                double loc = (seconds / duration * widthPos) + minValue;
                                g2.setColor(pink);
                                g2.setStroke(new BasicStroke(3));
                               
                                if ((((int) loc % (jScrollPane1.getWidth())) < 50) && loc != 0 && ((loc + jScrollPane1.getWidth()) < (samplingGraph.getWidth() - 10))) {
                                  //  jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                } else {
                                    if (endPaint < loc) {
                                    //    jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                    }
                                }
                                g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                            }
                        }
                    } else {
                        if (capture.thread == null) {
                            //BufferedImage image = ImageIO.read(new File("conf/img/sed-logo.png"));
                            //g2.drawImage(image, (int) (xSize - 250) / 2, (int) (h - 90) / 2, null);
                        }

                    }

                    //End initial condision
                }
                //End else part
            } catch (Exception er) {
                System.err.println(er);
            }
        }
        //End function

        public void start() {
            thread = new Thread(this);
            thread.setName("SamplingGraph");
            thread.start();
            seconds = 0;
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        @Override
        public void run() {

            try {
                seconds = 0;
                while (thread != null) {

                    if ((playback.line != null) && (playback.line.isOpen())) {

                        long milliseconds = (long) (playback.line.getMicrosecondPosition() / 1000);
                        seconds = milliseconds / 1000.0;
                    } else if ((capture.line != null) && (capture.line.isActive())) {

                        long milliseconds = (long) (capture.line.getMicrosecondPosition() / 1000);
                        seconds = milliseconds / 1000.0;
                    }

                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {
                        break;
                    }

                    repaint();


                    while ((capture.line != null && !capture.line.isActive())
                            || (playback.line != null && !playback.line.isOpen())) {
                        try {
                            thread.sleep(10);

                        } catch (Exception e) {
                            break;
                        }
                    }
                }
                seconds = 0;
                selectedPlay = false;
                repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    }
    
    
    
    
    public  String ReturnFilename()
    {
       // super();
    
        //super();
        
        String fileNameDis = "";
        
        if (fileName.length() > 15) {

                        try {
                            fileNameDis = fileName.substring(0, 15);
                        } catch (Exception er) {
                            System.err.println(er);
                        }
                    } else {
                        fileNameDis = fileName;
                    }
        return fileNameDis;
    }
    

// End class SamplingGraph
//*********************************************************************************************************
    public void loadWaveFromRemote() {
        samplingGraph.createWaveForm(null);
    }

    @Override
    public void reorderWavePanel() {
        samplingGraph.createWaveForm(null);
    }

    public void scrollWaveFromRemote(int pix) {
      //  jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) pix - 50, 0));
    }

    public void setStreamDrawGraph() {
        try {
            if (this.streamBytes.getCurrent() != null) {
                this.audioInputStream = StreamConverter.byteTostream(this.streamBytes.getCurrent(), this.audioInputStream);
                int widthScreen = this.setNormalScreen(this.audioInputStream);
                this.setGrphSizeinScreen(widthScreen);
                fileHashValue = Hash.getHashValue(audioInputStream);
                this.samplingGraph.createWaveForm(this.streamBytes.getCurrent());

            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public class RecordWaveGraph implements Runnable {

        private Thread thread;

        public void start() {
            thread = new Thread(this);
            thread.setName("SamplingGraph");
            thread.start();
            seconds = 0;
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        @Override
        public void run() {
            try {

                samplingPanel.setPreferredSize(new java.awt.Dimension((int) (tk.getScreenSize().getWidth() * 0.764), graphVerticalSize));
                sg.setSize(new java.awt.Dimension((int) (tk.getScreenSize().getWidth() - graphFromScreen), graphVerticalSize));
                samplingPanel.revalidate();
                samplingPanel.repaint();
                boolean audioFormate = true;
                int sWidth = 100000000;
                thread.sleep(500);
                while (thread != null) {

                    try {
                        if (capOut == null) {
                            continue;
                        }
                        byte audioBytes[] = capOut.toByteArray();
                        AudioFormat format = capture.getAudioFormat();
                        int frameSizeInBytes = format.getFrameSize();

                        if (audioFormate) {
                            ByteArrayInputStream bais = new ByteArrayInputStream(audioBytes);
                            audioInputStream = new AudioInputStream(bais, format, audioBytes.length / frameSizeInBytes);
                            sWidth = samplingPanel.getWidth() * normalPixcel * audioInputStream.getFormat().getFrameSize();
                            audioFormate = false;

                        }
                        record_duration = audioBytes.length / (audioInputStream.getFormat().getFrameRate() * audioInputStream.getFormat().getFrameSize());


                        if (audioBytes.length > (sWidth - 40000)) {
                            byte[] tempaudioBytes = new byte[sWidth];
                            int inSpos = audioBytes.length - (sWidth - 40000);
                            int lastPos = 0;
                            for (int kp = inSpos; kp < audioBytes.length - 10; kp++) {
                                tempaudioBytes[lastPos++] = audioBytes[kp];
                            }

                            samplingGraph.createWaveForm(tempaudioBytes);
                            try {
                                thread.sleep(250);
                            } catch (Exception er) {
                            }
                        } else {
                            byte[] tempaudioBytes = new byte[sWidth];
                            int lastPos = 0;
                            for (int kp = 0; kp < audioBytes.length - 10; kp++) {
                                tempaudioBytes[lastPos++] = audioBytes[kp];

                            }

                            samplingGraph.createWaveForm(tempaudioBytes);
                            try {
                                thread.sleep(200);
                            } catch (Exception er) {
                            }
                        }


                    } catch (Exception ex) {
                        Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    }

    private boolean textAreaBottomIsVisible() {
        Adjustable sb = jScrollPane1.getVerticalScrollBar();
        int val = sb.getValue();
        int lowest = val + sb.getVisibleAmount();
        int maxVal = sb.getMaximum();
        boolean atBottom = maxVal == lowest;
        return atBottom;
    }
// ServerFinder class 
    public class ServerFinder implements Runnable {

        public Thread thread;

        public void start() {
            thread = new Thread(this);
            thread.setName("ServerStatus");
            thread.start();
            seconds = 0;
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        @Override
        public void run() {


            try {
                try {
                    File testFile = new File("testing.wav");
                    if (!testFile.exists()) {
                        File takeTemp = new File("conf/buf/server.wav");
                        if (takeTemp.exists()) {
                            StreamConverter.streamTowavefile("testing.wav", AudioSystem.getAudioInputStream(takeTemp));
                        }
                    }
                } catch (IOException er) {
                    System.err.println(er);
                } catch (Exception er) {
                    System.err.println(er);
                }



               // boolean findPDS = new VrasiClientPDS().setRemoteConnection(mainFrame.getUserID(), "testing.wav");
                //boolean findKWS = new VrasiClientKWS().setRemoteConnection(mainFrame.getUserID(), "testing.wav");
                //boolean findSID = new VrasiClientSID().setRemoteConnection(mainFrame.getUserID());
               /* for (int lo = 0; lo < 10; lo++) {

                    Thread.sleep(500);
                    pdsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/blank.png")));
                    //kwsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/blank.png")));
                    //sidServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/blank.png")));
                    Thread.sleep(500);

                    if (findPDS) {
                        pdsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveron.png")));
                    } else {
                        pdsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveroff.png")));
                    }


                    if (findKWS) {
                        //kwsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveron.png")));
                    } else {
                       // kwsServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveroff.png")));
                    }


                    if (findSID) {
                        //sidServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveron.png")));
                    } else {
                        //sidServerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/serveroff.png")));
                    }


                }*/

            } catch (Exception ex) {
                Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public void setfileNameColor(Color color) {

        timeLabel.setForeground(color);


    }

    public Color getfileNameColor() {

        return timeLabel.getForeground();


    }

    private String timeConversion(int time) {

        String hD = "", mD = "", sD = "", msd="", totalTD = "";
        try {
            int hour = time / 3600;
            int hour_balance = time % 3600;
            int min = hour_balance / 60;
            int min_balance = hour_balance % 60;
            int sec=min_balance/60;
            int sec_balance=min_balance%60;
            System.out.println("time\t"+time+"sec\t"+sec);
            if (hour < 10) {
                hD = "0" + hour;
            } else {
                hD = hD + hour;
            }
            if (min < 10) {
                mD = "0" + min;
            } else {
                mD = mD + min;
            }
            if (min_balance < 10) {
                sD = "0" + min_balance;
            } else {
                sD = sD + min_balance;
            }
            if(sec<120){
               msd= "00"+sec;          
             }else{
            msd=msd+sec_balance;
            }

            totalTD = hD + ":" + mD + ":" + sD+":"+msd;
        } catch (Exception er) {
            Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, er);
        }
        return totalTD;
    }
    
     private String timeConversion2(double time1) {

        String hD = "", mD = "", sD = "", msd="", totalTD = "";
        try {
            int time=(int)time1;
            int hour = time / (1000*3600);
            int hour_balance = time % (1000*3600);
            int min = hour_balance / (60*1000);
            int min_balance = hour_balance % (60*1000);
            int sec=min_balance/(1000);
            int sec_balance=min_balance% (1000);
            System.out.println("time\t"+time+"sec\t"+sec+"hour"+hour_balance+"minute"+min);
            if (hour < 10*1000) {
                hD = "0" + hour;
            } else {
                hD = hD + hour;
            }
            if (min < 10*1000) {
                mD = "0" + min;
            } else {
                mD = mD + min;
            }
            if (sec < 60*1000) {
                sD = "0" + sec;
            } else {
                sD = sD + sec;
            }
            if(sec_balance<10){
               msd= "00"+sec_balance;          
             }else{
            msd=msd+sec_balance;
            }

            totalTD = hD + ":" + mD + ":" + sD+":"+msd;
        } catch (Exception er) {
            Logger.getLogger(PlotWave.class.getName()).log(Level.SEVERE, null, er);
        }
        return totalTD;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
