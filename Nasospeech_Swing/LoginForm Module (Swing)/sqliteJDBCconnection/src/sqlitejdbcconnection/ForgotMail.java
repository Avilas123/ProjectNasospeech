/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sqlitejdbcconnection;

import java.net.PasswordAuthentication;
import java.security.Security;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.*;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import org.simplejavamail.email.Email;
import org.simplejavamail.email.EmailBuilder;
import org.simplejavamail.mailer.Mailer;
import org.simplejavamail.mailer.config.ProxyConfig;
import org.simplejavamail.mailer.config.ServerConfig;
import org.simplejavamail.mailer.config.TransportStrategy;


/**
 *
 * @author IITG
 */
public class ForgotMail extends javax.swing.JFrame {

    /**
     * Creates new form ForgotMail
     */
    public ForgotMail() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        enteruntxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Please enter your registered email");

        enteruntxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enteruntxtActionPerformed(evt);
            }
        });

        jButton1.setText("Send password");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(enteruntxt)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enteruntxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enteruntxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enteruntxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enteruntxtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Connection conn = SqliteJDBCconnection.connect();
        String retrievedEmail = "";
        String retrievedPassword = "";
         PreparedStatement ps;
        if(enteruntxt.getText().equals("")){
        JOptionPane.showMessageDialog(null, "Please enter your username");
        
        }
        
        else{
            
            try {
                 ps = conn.prepareStatement( "SELECT * FROM Therapist_Master_Table WHERE email = ?" );
                ps.setString(1, enteruntxt.getText());
                ResultSet result = ps.executeQuery();
                while( result.next() ) {
                   retrievedEmail = result.getString( "email" );
                   retrievedPassword = result.getString("password");
            }   
                
                
                if( retrievedEmail.equals( enteruntxt.getText() ) ) {
                JOptionPane.showMessageDialog(null,"Email Exists");
                
          /*    final String username = "nasospeech@gmail.com"; // enter your mail id
		final String password = "pass123nasospeech";// enter ur password
                 final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
		Properties props = System.getProperties();
		props.setProperty("proxySet","true");
                props.setProperty("socksProxyHost","202.141.80.30");
                props.setProperty("socksProxyPort","3128");
                props.setProperty("mail.smtp.host", "smtp.gmail.com");
                props.setProperty("mail.smtp.socketFactory.class", SSL_FACTORY);
                props.setProperty("mail.smtp.socketFactory.fallback", "false");
                props.setProperty("mail.smtp.port", "465");
                props.setProperty("mail.smtp.socketFactory.port", "465");
                props.put("mail.smtp.auth", "true");
                props.put("mail.debug", "true");
                props.put("mail.store.protocol", "pop3");
                props.put("mail.transport.protocol", "smtp");
                
         Session session = Session.getInstance(props,
		  new javax.mail.Authenticator() {
                               @Override
                               protected javax.mail.PasswordAuthentication getPasswordAuthentication(){
                               return new javax.mail.PasswordAuthentication(username, password);
			}
		  });
         
          try {

                                Message message = new MimeMessage(session);
                            message.setFrom(new InternetAddress("nasospeech@gmail.com"));
                            message.setRecipients(Message.RecipientType.TO,
                                    InternetAddress.parse(enteruntxt.getText()));
                            message.setSubject("Testing Subject");
                        message.setText("Dear Friends This is your Password," +
                                    retrievedPassword);

                    Transport.send(message);

                        System.out.println("Done");

                        } catch (MessagingException e) {
                            throw new RuntimeException(e);
                                }
                */
         
      /*    String host = "202.141.80.30"; // proxy server address 
     String from = "roshanchettri@iitg.ernet.in"; 
     String to = enteruntxt.getText(); 
     Properties props = System.getProperties(); 
     props.put("mail.smtp.host", host); 
     props.put("mail.smtp.port", "3128");
     Session session = Session.getDefaultInstance(props,null); 
     MimeMessage message = new MimeMessage(session); 
     message.setFrom(new InternetAddress(from)); 
     message.addRecipient(Message.RecipientType.TO, new InternetAddress(to)); 
     System.out.println(" setting subject and message ");
     message.setSubject("just testing my mail prog");
     message.setText("Welcome to My mailing service \n This is an auto generated mail pls do not reply to it "); 
     Transport.send(message); 
     System.out.println(" sent the message ");
     System.out.println(" thanks ");  */
         
      
 /*Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
// Get a Properties object
Properties props = System.getProperties();
props.setProperty("proxySet","true");
props.setProperty("socksProxyHost","202.141.80.30");
props.setProperty("socksProxyPort","3128");
props.setProperty("mail.smtp.host", "smtp.gmail.com");
props.setProperty("mail.smtp.socketFactory.class", SSL_FACTORY);
props.setProperty("mail.smtp.socketFactory.fallback", "true");
props.setProperty("mail.smtp.port", "465");
props.setProperty("mail.smtp.socketFactory.port", "465");
//props.put("mail.smtp.ssl.enable", "true");
props.put("mail.smtp.auth", "true");
props.put("mail.debug", "true");
props.put("mail.store.protocol", "pop3");
props.put("mail.transport.protocol", "smtp");
final String username = "nasospeech@gmail.com";
final String password = "pass123nasospeech";
Session session = Session.getDefaultInstance(props,
 new javax.mail.Authenticator() {
                               @Override
                               protected javax.mail.PasswordAuthentication getPasswordAuthentication(){
                               return new javax.mail.PasswordAuthentication(username, password);
			}});

// -- Create a new message --
Message msg = new MimeMessage(session);

// -- Set the FROM and TO fields --
msg.setFrom(new InternetAddress("nasospeech@gmail.com"));
msg.setRecipients(Message.RecipientType.TO,
InternetAddress.parse("erroshanchettri89@gmail.com",false));
msg.setSubject("Hello");
msg.setText("How are you");

Transport.send(msg);
System.out.println("Message sent."); */
 final String username = "nasospeech@gmail.com"; // enter your mail id
		final String password = "pass123nasospeech";// enter ur password

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");

		Session session;
                     session = Session.getInstance(props,
                             new javax.mail.Authenticator() {
                                 @Override
                                 protected javax.mail.PasswordAuthentication getPasswordAuthentication(){
                                     return new javax.mail.PasswordAuthentication(username, password);
                                 }
                             });

		try {

			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress("nasospeech@gmail.com")); // same email id
			message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse("erroshanchettri89@gmail.com"));// whome u have to send mails that person id
			message.setSubject("Password Recovery");
			message.setText("Dear User,"
				+ "\n\t Your Password is " +retrievedPassword +
                                "\n\n Regards\n Team Nasospeech");

			Transport.send(message);

			System.out.println("Done");
                }
                        catch (MessagingException e) {
			throw new RuntimeException(e);
		}
      
 
 
      

            }

                
                
                
                
                
                
            else {
                JOptionPane.showMessageDialog(null,"Invalid Email");
            }
                System.out.println("The retrieved password is  "+ retrievedPassword);

                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(ForgotMail.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        
        
        
        }
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForgotMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForgotMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForgotMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForgotMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForgotMail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField enteruntxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
