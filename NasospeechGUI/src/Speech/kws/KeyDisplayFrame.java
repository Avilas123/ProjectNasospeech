/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KeyDisplayFrame.java
 *
 * Created on 31 Dec, 2012, 10:08:17 AM
 */
package Speech.kws;

import java.awt.BorderLayout;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.plaf.IconUIResource;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Tatapower SED
 *
 */
public class KeyDisplayFrame extends javax.swing.JFrame {

    private JTree tree;
    public PlotWaveKws pWave;

    /**
     * Creates new form KeyDisplayFrame
     */
    public KeyDisplayFrame(PlotWaveKws pWave) {

        initComponents();
        this.pWave = pWave;

    }

    public void treeBuilder() {
        List keyWord = pWave.keyBuilder.getKeywordsList();
        List startTime = pWave.keyBuilder.getStartTimeList();
        List endTime = pWave.keyBuilder.getEndTimeList();
        Icon empty = new TreeIcon();
        UIManager.put("Tree.closedIcon", empty);
        UIManager.put("Tree.openIcon", empty);
        UIManager.put("Tree.leafIcon", empty);
        UIManager.put("Tree.collapsedIcon", new IconUIResource(new NodeIcon('+')));
        UIManager.put("Tree.expandedIcon", new IconUIResource(new NodeIcon('-')));
        DefaultMutableTreeNode parent = new DefaultMutableTreeNode("KeyWord List", true);
        boolean isKeyAlready = false;
        DefaultMutableTreeNode key;
        DefaultMutableTreeNode time;
        List indexPos = new ArrayList();
        for (int i = 0; i < keyWord.size(); i++) {
            String keyStr = keyWord.get(i).toString();
            for (int k = 0; k < indexPos.size(); k++) {
                if (keyStr.toLowerCase().equals(indexPos.get(k).toString())) {
                    isKeyAlready = true;
                    break;
                }
            }
            if (isKeyAlready) {
                isKeyAlready = false;
                continue;
            }

            key = new DefaultMutableTreeNode(keyStr.toUpperCase());
            time = new DefaultMutableTreeNode(startTime.get(i).toString() + " - " + endTime.get(i).toString(), true);
            key.add(time);

            for (int j = i + 1; j < keyWord.size(); j++) {
                if ((keyStr.toLowerCase()).equals((keyWord.get(j).toString()).toLowerCase())) {
                    time = new DefaultMutableTreeNode(startTime.get(j).toString() + " - " + endTime.get(j).toString(), true);
                    key.add(time);
                    indexPos.add(keyStr.toLowerCase());
                }
            }
            parent.add(key);
        }
        tree = new JTree(parent);
        tree.setFont(new Font("Courier New", Font.PLAIN, 16));
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                // Get all nodes whose selection status has changed
                TreePath[] paths = evt.getPaths();

                // Iterate through all affected nodes
                for (int i = 0; i < paths.length; i++) {
                    if (evt.isAddedPath(i)) {
                        // This node has been selected
                        System.out.println(paths[i].getLastPathComponent().toString());
                        break;
                    } else {
                        // This node has been deselected
                        break;
                    }
                }
            }
        });
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(tree);
        jPanel1.revalidate();
        jPanel1.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(java.awt.Color.white);
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 137, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        jButton1.setText("Keyword Color");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new KeywordColor(pWave).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new KeyDisplayFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
