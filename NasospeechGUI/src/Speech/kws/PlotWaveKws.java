/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlotWave.java
 *
 * Created on 24 Dec, 2012, 11:49:41 AM
 */
package Speech.kws;

import Speech.WavePanel.ControlContext;
import Speech.WavePanel.StreamBytes;
import Speech.WavePanel.StreamVariables;
import Speech.annotations.Hash;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Line2D;
import javax.swing.*;
import javax.swing.border.*;
import java.util.Vector;
import java.io.*;
import javax.sound.sampled.*;
import Speech.signalProcessing.SignalProc;
import Speech.common.*;
import Speech.gui.MainFrame;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.imageio.ImageIO;

/**
 *
 * @author Tatapower SED
 *
 */
public class PlotWaveKws extends javax.swing.JPanel implements ActionListener, ControlContext, PlotwaveCommon {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    final int bufSize = 16384;
    public int frames_per_pixel;
    //FormatControls formatControls = new FormatControls();
    Capture capture = new Capture();
    Playback playback = new Playback();
    AudioInputStream audioInputStream;
    public SamplingGraph samplingGraph;
    private SubSamplingGraph subsamplingGraph;
    String errStr;
    double duration, seconds;
    File file;
    String fileName = "untitled";
    Vector lines = new Vector();
    Vector sublines = new Vector();
    private Toolkit tk;
    public double mousePosX1, mousePosX2, mouseMoveX1, mouseMoveY1, mousePosY1;
    public JPopupMenu menu;
    public StreamBytes streamBytes;
    public MainFrame mainFrame;
    private SamplingGraph sg;
    private SubSamplingGraph subsg;
    private int graphFromScreen = 10, graphVerticalSize = 210, normalPixcel = 60;
    public boolean selectedPlay = false;
    public StreamVariables streamVariable;
    public RightClickEventKws rightClick;
    public ResultKeyWordPanel keyDisplay;
    public KeyWordBuilder keyBuilder;
    public KeyColorHandler keyColorHandler;
    public String language;
    public String[][] annotationPos;
    String fileHashValue;
    private boolean buffStatus = true;
    private boolean lineStatus = false;

    public PlotWaveKws(MainFrame mainFrame, AudioInputStream audioStreamArray, String language, ArrayList selectedKeyword, ArrayList processedList) {
        initComponents();
        // Create Objects Area
        if (audioStreamArray == null || language == null) {
            return;
        }
        streamBytes = new StreamBytes();
        this.mainFrame = mainFrame;
        menu = new JPopupMenu("Popup");
        EmptyBorder eb = new EmptyBorder(10, 20, 20, 20);
        EmptyBorder subeb = new EmptyBorder(10, 20, 20, 20);
        SoftBevelBorder sbb = new SoftBevelBorder(SoftBevelBorder.LOWERED);
        SoftBevelBorder subsbb = new SoftBevelBorder(SoftBevelBorder.LOWERED);
        sg = new SamplingGraph();
        subsg = new SubSamplingGraph();
        streamVariable = new StreamVariables();
        rightClick = new RightClickEventKws(this);
        keyBuilder = new KeyWordBuilder();
        try {
            byte[] tempCurrent = StreamConverter.streamTobyte(audioStreamArray);
            if (tempCurrent == null) {
                return;
            }
            if (tempCurrent.length < 1) {
                return;
            }
            this.language = language;
            File audioFile = new File(mainFrame.getUserID() + ".wav");
            if (audioFile.exists()) {
                audioFile.delete();

            }

            StreamConverter.byteTowavefile(tempCurrent, audioStreamArray, mainFrame.getUserID() + ".wav");
            audioStreamArray = StreamConverter.byteTostream(tempCurrent, audioStreamArray);
            boolean getResult = keyBuilder.setSource(mainFrame.getUserID() + ".wav", language, mainFrame.getUserID(), selectedKeyword, processedList);
            if (!getResult) {
                javax.swing.JOptionPane.showMessageDialog(mainFrame, "No record found");
                audioStreamArray = null;
            }
            keyDisplay = new ResultKeyWordPanel(this, language);
            keyColorHandler = new KeyColorHandler(this);

            tempCurrent = null;
        } catch (Exception er) {
            System.err.println(er);
        }
        // End Object Area

        //Setsize Area
        //Screen Size
        this.tk = Toolkit.getDefaultToolkit();
        int xSize = (int) tk.getScreenSize().getWidth();
        int ySize = (int) tk.getScreenSize().getHeight();
        xSize = xSize - 290;
        this.setSize(new Dimension((xSize), 270));

        //Sampling Graph and Drawing area

        samplingPanel.setBorder(new CompoundBorder(eb, sbb));
        subSambling.setBorder(new CompoundBorder(subeb, subsbb));
        sg.setSize(new Dimension((xSize - graphFromScreen), graphVerticalSize));
        subsg.setSize(new Dimension((xSize - graphFromScreen), 10));
        samplingPanel.setPreferredSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        subSambling.setPreferredSize(new java.awt.Dimension((xSize - graphFromScreen), 10));

        //End Size


        //Com Porperties
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.getHorizontalScrollBar().addAdjustmentListener(adjustmentListener);
        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(100);
        jScrollPane1.setSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        jScrollPane1.setPreferredSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        jScrollPane1.setMinimumSize(new java.awt.Dimension((xSize - graphFromScreen), graphVerticalSize));
        //End

        //Add Com
        samplingPanel.add(samplingGraph = sg);
        subSambling.add(subsamplingGraph = subsg);
        //End

        //Call Method
        pausB.setEnabled(false);
        waveB.setEnabled(false);
        createAudioInputStream(null, audioStreamArray, true);
        //End

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wavePanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        waveB = new javax.swing.JToggleButton();
        playB = new javax.swing.JToggleButton();
        pausB = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        samplingPanel = new javax.swing.JPanel();
        subSambling = new javax.swing.JPanel();

        setAutoscrolls(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kwsPanelMouseCilcked(evt);
            }
        });

        wavePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        wavePanel.setAutoscrolls(true);

        jToolBar1.setRollover(true);

        waveB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/save.jpg"))); // NOI18N
        waveB.setFocusable(false);
        waveB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        waveB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        waveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveBActionPerformed(evt);
            }
        });
        jToolBar1.add(waveB);

        playB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/play.jpg"))); // NOI18N
        playB.setToolTipText("play");
        playB.setFocusable(false);
        playB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBActionPerformed(evt);
            }
        });
        jToolBar1.add(playB);

        pausB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/pause.jpg"))); // NOI18N
        pausB.setToolTipText("pause");
        pausB.setFocusable(false);
        pausB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pausB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pausB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausBActionPerformed(evt);
            }
        });
        jToolBar1.add(pausB);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/zoom-in-3.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/zoom-out-3.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/zoom-original-2.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        samplingPanel.setPreferredSize(new java.awt.Dimension(822, 100));
        samplingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                samplingPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                samplingPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                samplingPanelMouseReleased(evt);
            }
        });
        samplingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                samplingPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                samplingPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout samplingPanelLayout = new javax.swing.GroupLayout(samplingPanel);
        samplingPanel.setLayout(samplingPanelLayout);
        samplingPanelLayout.setHorizontalGroup(
            samplingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 822, Short.MAX_VALUE)
        );
        samplingPanelLayout.setVerticalGroup(
            samplingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(samplingPanel);

        subSambling.setBackground(java.awt.Color.white);
        subSambling.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subSambling.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                subSamblingMousePressed(evt);
            }
        });

        javax.swing.GroupLayout subSamblingLayout = new javax.swing.GroupLayout(subSambling);
        subSambling.setLayout(subSamblingLayout);
        subSamblingLayout.setHorizontalGroup(
            subSamblingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        subSamblingLayout.setVerticalGroup(
            subSamblingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout wavePanelLayout = new javax.swing.GroupLayout(wavePanel);
        wavePanel.setLayout(wavePanelLayout);
        wavePanelLayout.setHorizontalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subSambling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        wavePanelLayout.setVerticalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subSambling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(wavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    AdjustmentListener adjustmentListener = new AdjustmentListener() {
        @Override
        public void adjustmentValueChanged(AdjustmentEvent e) {
            // System.out.println("i am start");
            if (audioInputStream != null) {
                samplingGraph.createWaveForm(null);
            }
        }
    };
//File Load  

    public void fileOpenMethod() {

        try {
            File fileDir = new File(System.getProperty("user.dir"));
            JFileChooser fc = new JFileChooser(fileDir);
            fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String name = f.getName();
                    if (name.endsWith(".wav")) {
                        return true;
                    }
                    return false;
                }

                public String getDescription() {
                    return ".wav";
                }
            });
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                createAudioInputStream(fc.getSelectedFile(), null, true);
            }
        } catch (SecurityException ex) {
            // JavaSound.showInfoDialog();
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//End File Load

    public void playSound() {
        try {

            buffStatus = true;
            lineStatus = false;

            playback.start();
            samplingGraph.start();


            pausB.setEnabled(true);
            playB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/stop.jpg")));

            playB.setToolTipText("stop");
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void stopSound() {
        try {

            buffStatus = true;
            lineStatus = false;

            if (playback.line.isOpen()) {
                if (!playback.line.isActive() || !playback.line.isRunning()) {
                    playback.line.start();
                }
            }
            System.out.println("Stop");
            playback.stop();
            samplingGraph.stop();


            pausB.setEnabled(false);
            playB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/play.jpg")));
            pausB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/pause.jpg")));
            playB.setToolTipText("play");
            pausB.setToolTipText("pause");
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    public void pauseSound() {
        try {
            if (capture.thread != null) {
                capture.line.stop();
            } else {
                if (playback.thread != null) {
                    buffStatus = false;

                    while (!lineStatus && playback.thread != null) {
                        try {
                            Thread.sleep(10);
                        } catch (Exception er) {
                        }
                    }
                    playback.line.stop();
                }
            }
            pausB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/undo.png")));
            pausB.setToolTipText("undo");
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    public void resumeSound() {
        try {
            if (capture.thread != null) {
                capture.line.start();
            } else {
                if (playback.thread != null) {
                    buffStatus = true;
                    lineStatus = false;
                    playback.line.start();
                }
            }
            pausB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/pause.jpg")));
            pausB.setToolTipText("pause");
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void recordSound() {
        try {
            file = null;
            capture.start();
            fileName = "untitled";
            samplingGraph.start();


            playB.setEnabled(false);
            pausB.setEnabled(true);

            waveB.setEnabled(false);

        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void stopRecord() {
        try {
            lines.removeAllElements();
            capture.stop();
            samplingGraph.stop();


            playB.setEnabled(true);
            pausB.setEnabled(false);
            waveB.setEnabled(true);

        } catch (Exception er) {
            System.err.println(er);
        }
    }

          private void waveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveBActionPerformed
              // TODO add your handling code here:
              saveToFile("Test_new.wav", AudioFileFormat.Type.WAVE);
          }//GEN-LAST:event_waveBActionPerformed

          private void samplingPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMousePressed
              // TODO add your handling code here:
              try {
                  if (evt.getButton() == MouseEvent.BUTTON3) {
                      rightClick.addMenuItems();
                      menu.show(evt.getComponent(), evt.getX(), evt.getY());
                  } else {
                      if (mousePosX1 == 0 && mousePosX2 == 0) {
                          mousePosX1 = evt.getX();
                          mousePosY1 = evt.getY();
                      } else {
                          mousePosX1 = 0;
                          mousePosX2 = 0;
                          mousePosY1 = 0;
                      }
//Set Player and play keyword
                      boolean mousedrawColor = false;
                      int mousekeyStPos = 0, mousekeyEnPos = 0;
                      for (int col = 0; col < keyColorHandler.getStartPixel().size(); col++) {
                          mousekeyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                          mousekeyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());
                          //  System.out.println("Key "+mousekeyStPos +" "+mousekeyEnPos);
                          if (mousekeyStPos <= mouseMoveX1 && mousekeyEnPos >= mouseMoveX1) {
                              mousedrawColor = true;
                              break;
                          }

                      }
                      if (mousedrawColor) {
                          if (mousekeyStPos < 10) {
                              mousekeyStPos = 10;
                          }
                          mousePosX1 = mousekeyStPos;
                          mousePosX2 = mousekeyEnPos;
                          if (rightClick.sourceAvailValidation()) {
                              rightClick.playSoundAll();
                          }
                      }
//End play keyword

                  }

                  //end Left Click
              } catch (Exception er) {
                  System.err.println(er);
              }
          }//GEN-LAST:event_samplingPanelMousePressed

          private void samplingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseClicked
              // TODO add your handling code here:
              samplingGraph.repaint();

          }//GEN-LAST:event_samplingPanelMouseClicked

          private void samplingPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseReleased
              // TODO add your handling code here:

              if (evt.getY() > 170) {
                  rightClick.resizeandAddannotation();
              }
              samplingGraph.repaint();

          }//GEN-LAST:event_samplingPanelMouseReleased

          private void samplingPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseDragged
              // TODO add your handling code here:
              if (mousePosX1 == 0) {
                  mousePosX1 = evt.getX();
              }
              mousePosX2 = evt.getX();
              samplingGraph.repaint();

          }//GEN-LAST:event_samplingPanelMouseDragged

          private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
              // TODO add your handling code here:
              setZoomIn();

          }//GEN-LAST:event_jButton1ActionPerformed

    public void setZoomIn() {
        try {
            if (audioInputStream != null) {
                int screenWidth = (int) (samplingPanel.getSize().getWidth() * 2);
                setGrphSizeinScreen(screenWidth);
                mousePosX1 = (double) (mousePosX1 * 2);
                mousePosX2 = (double) (mousePosX2 * 2);
                // System.out.println("Zoom Test Screen "+screenWidth+" "+samplingPanel.getSize()+" "+samplingGraph.getWidth()+" "+mousePosX1+ " "+mousePosX2);
                samplingGraph.createWaveForm(streamBytes.getCurrent());
                jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) mousePosX1 - 50, 0));
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void setZoomOut() {
        try {
            if (audioInputStream != null) {

                if (frames_per_pixel > 4000) {
                    return;
                }

                int screenWidth = (int) (samplingPanel.getSize().getWidth() / 2);
                int xSize = (int) tk.getScreenSize().getWidth();
                setGrphSizeinScreen(screenWidth);
                if ((screenWidth >= xSize - graphFromScreen)) {
                    mousePosX1 = (double) (mousePosX1 / 2);
                    mousePosX2 = (double) (mousePosX2 / 2);
                }
                samplingGraph.createWaveForm(streamBytes.getCurrent());
                jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) mousePosX1 - 50, 0));
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }
          private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
              // TODO add your handling code here:            
              setZoomOut();
          }//GEN-LAST:event_jButton2ActionPerformed

          private void subSamblingMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subSamblingMousePressed
              // TODO add your handling code here:
             try {
                  int xPos = evt.getX();
                  int perPixcel = (int) (samplingPanel.getWidth() / subSambling.getWidth());
                  int finalPix = xPos * perPixcel;
                  if (keyColorHandler.sourceValidation(frames_per_pixel)) {
                      int keyStPos = 0, keyEnPos = 0;
                      boolean keyFind = false;
                      for (int col = 0; col < keyColorHandler.getStartPixel().size(); col++) {
                          keyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                          keyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());

                          if (keyStPos <= finalPix && keyEnPos >= finalPix) {
                              keyFind = true;
                              break;
                          }
                      }
                      if (keyFind) {
                          jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) keyStPos - 50, 0));
                          samplingGraph.repaint();
                      } else {
                          jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) finalPix - 50, 0));
                          samplingGraph.repaint();
                      }

                  } else {

                      jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) finalPix - 50, 0));
                      samplingGraph.repaint();
                  }

              } catch (Exception er) {
                  System.err.println(er);
              }
          }//GEN-LAST:event_subSamblingMousePressed

          private void samplingPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_samplingPanelMouseMoved
              // TODO add your handling code here:
              mouseMoveX1 = evt.getX();
              mouseMoveY1 = evt.getY();
              samplingGraph.repaint();
          }//GEN-LAST:event_samplingPanelMouseMoved


          private void playBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBActionPerformed
              // TODO add your handling code here:
              if (audioInputStream != null) {
                  if (playB.getToolTipText().equals("play")) {
                      if (rightClick.sourceAvailValidation()) {
                          rightClick.playSoundAll();
                      }
                  } else {
                      stopSound();
                  }
              }
          }//GEN-LAST:event_playBActionPerformed

          private void pausBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausBActionPerformed
              // TODO add your handling code here:
              if (audioInputStream != null) {
                  if (pausB.getToolTipText().equals("pause")) {
                      pauseSound();
                  } else {
                      resumeSound();
                  }
              }
          }//GEN-LAST:event_pausBActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (audioInputStream != null) {
            if (rightClick.sourceAvailValidation()) {
                setSreemDrawGraph();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void kwsPanelMouseCilcked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kwsPanelMouseCilcked
        // TODO add your handling code here:
    }//GEN-LAST:event_kwsPanelMouseCilcked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToggleButton pausB;
    private javax.swing.JToggleButton playB;
    private javax.swing.JPanel samplingPanel;
    private javax.swing.JPanel subSambling;
    private javax.swing.JToggleButton waveB;
    private javax.swing.JPanel wavePanel;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void open() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void close() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    //Set Screen Size
    private void setGrphSizeinScreen(int screenWidth) {
        try {
            int xSize = (int) tk.getScreenSize().getWidth();
            if (screenWidth < (xSize - graphFromScreen)) {
                screenWidth = xSize - graphFromScreen;
            }
            if (streamBytes.getCurrent() != null) {
                if (screenWidth > ((streamBytes.getCurrent().length) / 2)) {
                    screenWidth = ((streamBytes.getCurrent().length) / 2);

                }
            }
            sg.setSize(new Dimension(screenWidth, graphVerticalSize));
            samplingPanel.setSize(new Dimension(screenWidth, graphVerticalSize));
            samplingPanel.setPreferredSize(new java.awt.Dimension(screenWidth, graphVerticalSize));
            this.revalidate();
            this.repaint();
        } catch (Exception er) {
            System.err.println(er);
        }
    }//End Screen Size

    //Fix Initial Screen Pixel
    private int setNormalScreen(AudioInputStream audioInput) {
        int pixcelPerscreen = 0;
        try {
            if (audioInput == null) {
                return 0;
            }
            int audioLenth = (int) audioInput.getFrameLength();
            pixcelPerscreen = (audioLenth / normalPixcel);

        } catch (Exception ex) {
            System.out.println(ex);
        }
        return pixcelPerscreen;
    }//End Initial Screen pixel

    //Create Audio InputStream Method
    public void createAudioInputStream(File file, AudioInputStream audioStreamArray, boolean updateComponents) {
        if (file != null && file.isFile()) {
            try {
                this.file = file;
                this.audioInputStream = AudioSystem.getAudioInputStream(file);
                fileName = file.getName();

            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (audioStreamArray != null) {
            try {
                if (audioStreamArray.available() < 1) {
                    return;
                }

                this.audioInputStream = audioStreamArray;
                fileName = "Wave1.wav";

            } catch (IOException ex) {
                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // reportStatus("Audio file required.");
            return;
        }
        try {
            if (this.audioInputStream != null) {
                try {
                    if (this.audioInputStream.available() < 1) {
                        return;
                    }


                } catch (IOException ex) {
                    Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
            errStr = null;
            playB.setEnabled(true);

            //Set Bytes and Generated
            byte[] audioBytes = StreamConverter.streamTobyte(audioInputStream);
            // streamBytes.setOriginal(audioBytes);
            streamBytes.setCurrent(audioBytes);
            audioBytes = null;
            audioInputStream = StreamConverter.byteTostream(streamBytes.getCurrent(), audioInputStream);
            fileHashValue = Hash.getHashValue(audioInputStream);
            int widthScreen = setNormalScreen(audioInputStream);
            setGrphSizeinScreen(widthScreen);
            long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / audioInputStream.getFormat().getFrameRate());
            duration = milliseconds / 1000.0;

            waveB.setEnabled(true);
            if (updateComponents) {
                samplingGraph.createWaveForm(streamBytes.getCurrent());

            }
        } catch (Exception ex) {
            System.out.println("Error1 " + ex);
            reportStatus(ex.toString());
        }
    }//End Audio Input stream

//Error Report Method
    private void reportStatus(String msg) {
        if ((errStr = msg) != null) {
            System.out.println(errStr);
            //samplingGraph.repaint();
        }
    }//End Error Report

    //File Save Method
    public void saveToFile(String name, AudioFileFormat.Type fileType) {
        try {
            if (audioInputStream == null) {
                reportStatus("No loaded audio to save");
                return;
            } else if (file != null) {
                createAudioInputStream(file, null, false);
            }

            // reset to the beginnning of the captured data
            try {
                audioInputStream.reset();
            } catch (Exception e) {
                reportStatus("Unable to reset stream " + e);
                return;
            }

            File fileDir = new File(fileName = name);
            try {
                if (AudioSystem.write(audioInputStream, fileType, fileDir) == -1) {
                    throw new IOException("Problems writing to file");
                }
            } catch (Exception ex) {
                reportStatus(ex.toString());
            }
            samplingGraph.repaint();
        } catch (Exception er) {
            System.err.println(er);
        }
    }
    // End File Save

    /**
     * ********************************************************************************************************
     * Write data to the OutputChannel.
     */
    public class Playback implements Runnable {

        SourceDataLine line;
        Thread thread;

        public void start() {
            errStr = null;
            thread = new Thread(this);
            thread.setName("Playback");
            thread.start();
        }

        public void stop() {
            thread = null;
        }

        private void shutDown(String message) {
            if ((errStr = message) != null) {
                System.err.println(errStr);
                samplingGraph.repaint();
            }
            if (thread != null) {
                thread = null;
                samplingGraph.stop();

                pausB.setEnabled(false);
                playB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/play.jpg")));

                playB.setToolTipText("play");
            }
        }

        public void run() {
            try {
                if (streamBytes.getCurrent() == null) {
                    shutDown("No loaded audio to play back");
                    return;
                } else {
                    if (!selectedPlay) {
                        audioInputStream = StreamConverter.byteTostream(streamBytes.getCurrent(), audioInputStream);
                    } else {
                        if (streamBytes.getSelectedPlay() == null) {
                            return;
                        }
                        audioInputStream = StreamConverter.byteTostream(streamBytes.getSelectedPlay(), audioInputStream);
                    }

                }

                if (audioInputStream == null) {
                    shutDown("No loaded audio to play back");
                    return;
                }
                long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / audioInputStream.getFormat().getFrameRate());
                duration = milliseconds / 1000.0;

                if (line != null) {
                    line.stop();
                    line.close();
                    System.out.println("Reched");
                    line = null;
                }


                // get an AudioInputStream of the desired format for playback
                AudioFormat format = audioInputStream.getFormat();
                AudioInputStream playbackInputStream = AudioSystem.getAudioInputStream(format, audioInputStream);

                if (playbackInputStream == null) {
                    shutDown("Unable to convert stream of format " + audioInputStream + " to format " + format);
                    return;
                }

                // define the required attributes for our line,
                // and make sure a compatible line is supported.

                DataLine.Info info = new DataLine.Info(SourceDataLine.class,
                        format);
                if (!AudioSystem.isLineSupported(info)) {
                    shutDown("Line matching " + info + " not supported.");
                    return;
                }

                // get and open the source data line for playback.

                try {
                    line = (SourceDataLine) AudioSystem.getLine(info);
                    line.open(format, bufSize);
                } catch (LineUnavailableException ex) {
                    shutDown("Unable to open the line: " + ex);
                    return;
                }

                // play back the captured audio data

                int frameSizeInBytes = format.getFrameSize();
                int bufferLengthInFrames = line.getBufferSize() / 16;
                int bufferLengthInBytes = bufferLengthInFrames * frameSizeInBytes;
                byte[] data = new byte[bufferLengthInBytes];
                int numBytesRead = 0;

                // start the source data line
                line.start();

                while (thread != null) {
                    try {
                        if ((numBytesRead = playbackInputStream.read(data)) == -1) {
                            break;
                        }
                        int numBytesRemaining = numBytesRead;
                        while (numBytesRemaining > 0) {
                            Thread.sleep(5);
                            if (buffStatus) {
                                numBytesRemaining -= line.write(data, 0, numBytesRemaining);
                            } else {
                                lineStatus = true;
                            }
                        }
                    } catch (Exception e) {
                        shutDown("Error during playback: " + e);
                        break;
                    }
                }
                // we reached the end of the stream.  let the data play out, then
                // stop and close the line.
                if (thread != null) {
                    line.drain();
                }
                line.stop();
                line.close();
                System.out.println("Reched");
                line = null;
                data = null;
                selectedPlay = false;
                shutDown(null);
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    } // End class Playback

    //********************************************************************************************************
    /**
     * Reads data from the input channel and writes to the output stream
     */
    class Capture implements Runnable {

        TargetDataLine line;
        Thread thread;

        public void start() {
            errStr = null;
            thread = new Thread(this);
            thread.setName("Capture");
            thread.start();
        }

        public void stop() {
            thread = null;
        }

        private void shutDown(String message) {
            if ((errStr = message) != null && thread != null) {
                thread = null;
                samplingGraph.stop();

                playB.setEnabled(true);
                pausB.setEnabled(false);

                waveB.setEnabled(true);

                samplingGraph.repaint();
            }
        }

        private AudioFormat getAudioFormat() {
            float sampleRate = 8000.0F;
            //8000,11025,16000,22050,44100
            int sampleSizeInBits = 16;
            //8,16
            int channels = 1;
            //1,2
            boolean signed = true;
            //true,false
            boolean bigEndian = false;
            //true,false
            return new AudioFormat(sampleRate,
                    sampleSizeInBits,
                    channels,
                    signed,
                    bigEndian);
        }//end getAudioFormat

        public void run() {

            duration = 0;
            audioInputStream = null;

            // define the required attributes for our line,
            // and make sure a compatible line is supported.


            AudioFormat format = getAudioFormat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class,
                    format);

            if (!AudioSystem.isLineSupported(info)) {
                shutDown("Line matching " + info + " not supported.");
                return;
            }

            // get and open the target data line for capture.

            try {
                line = (TargetDataLine) AudioSystem.getLine(info);
                line.open(format, line.getBufferSize());
            } catch (LineUnavailableException ex) {
                shutDown("Unable to open the line: " + ex);
                return;
            } catch (SecurityException ex) {
                shutDown(ex.toString());
                //JavaSound.showInfoDialog();
                return;
            } catch (Exception ex) {
                shutDown(ex.toString());
                return;
            }

            // play back the captured audio data
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            int frameSizeInBytes = format.getFrameSize();
            int bufferLengthInFrames = line.getBufferSize() / 8;
            int bufferLengthInBytes = bufferLengthInFrames * frameSizeInBytes;
            byte[] data = new byte[bufferLengthInBytes];
            int numBytesRead, noofwrites = 1;


            line.start();

            while (thread != null) {
                if ((numBytesRead = line.read(data, 0, bufferLengthInBytes)) == -1) {
                    break;
                }

                try {

                    FileOutputStream fos2 = new FileOutputStream("out2.wav", true);
                    fos2.write(data);
                    fos2.close();
                } catch (Exception e1) {//Catch exception if any
                    System.err.println("Error: " + e1.getMessage());
                }

                out.write(data, 0, numBytesRead);
            }

            // we reached the end of the stream.  stop and close the line.
            line.stop();
            line.close();
            line = null;

            // stop and close the output stream
            try {
                out.flush();
                out.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            // load bytes into the audio input stream for playback

            byte audioBytes[] = out.toByteArray();
            ByteArrayInputStream bais = new ByteArrayInputStream(audioBytes);
            audioInputStream = new AudioInputStream(bais, format, audioBytes.length / frameSizeInBytes);
            streamBytes.setOriginal(audioBytes);
            streamBytes.setCurrent(audioBytes);
            int widthScreen = setNormalScreen(audioInputStream);
            setGrphSizeinScreen(widthScreen);
            long milliseconds = (long) ((audioInputStream.getFrameLength() * 1000) / format.getFrameRate());
            duration = milliseconds / 1000.0;

            try {
                audioInputStream.reset();
            } catch (Exception ex) {
                ex.printStackTrace();
                return;
            }
            // saveToFile("saidesh", AudioFileFormat.Type.WAVE);
            samplingGraph.createWaveForm(audioBytes);
        }
    } // End class Capture

    //************************************************************************************************
    /**
     * Render a WaveForm.
     */
    class SamplingGraph extends JPanel implements Runnable {

        private Thread thread;
        private AudioFormat format;
        private Font font10 = new Font("serif", Font.PLAIN, 10);
        private Font font12 = new Font("serif", Font.PLAIN, 12);
        Color jfcBlue = new Color(204, 204, 255);
        Color pink = new Color(139, 0, 0);
        private int[] audioDataNormalize;
        private int normalizedValue = 3000;
        Speech.signalProcessing.SignalProc sigProc;
        boolean iscolorKeyWordAvailable = false;

        public SamplingGraph() {
            setBackground(new Color(255, 255, 255, 255));

        }

        public void createWaveForm(byte[] audiobyte) {

            if (audioInputStream == null) {
                return;
            }

            // Declation part
            Dimension d = getSize();
            d = this.getSize();
            int w = d.width;
            int h = d.height;
            byte my_byte = 0;
            double y_last = 0;
            int[] audioData = null;
            format = audioInputStream.getFormat();
            int numChannels = format.getChannels();
            normalizedValue = 5000;

            //End Declation
            try {
                //Read Bytes from current Bytes
                if (audiobyte == null) {
                    try {
                        audiobyte = streamBytes.getCurrent();
                    } catch (Exception ex) {
                        reportStatus(ex.toString());
                        return;
                    }
                }
                //End read


                //pix rate

                frames_per_pixel = audiobyte.length / format.getFrameSize() / w;
                //End Normalized


                //Postion taken

                int endPaint = jScrollPane1.getSize().width;
                int startPaint = jScrollPane1.getHorizontalScrollBar().getValue();
                endPaint = (startPaint + endPaint);
                int startbytes = startPaint * frames_per_pixel * 2;
                int endbytes = endPaint * frames_per_pixel * 2;


                byte[] audioBytes = new byte[endbytes - startbytes];
                int newby = 0;
                for (int by = startbytes; by < endbytes - 10; by++) {
                    if (by < (audiobyte.length - 10)) {
                        audioBytes[newby++] = audiobyte[by];
                    }
                }



//Bit Calculation
                if (format.getSampleSizeInBits() == 16) {
                    int nlengthInSamples = audioBytes.length / 2;
                    audioData = new int[nlengthInSamples];
                    if (format.isBigEndian()) {
                        for (int i = 0; i < nlengthInSamples; i++) {
                            /*
                             * First byte is MSB (high order)
                             */
                            int MSB = (int) audioBytes[2 * i];
                            /*
                             * Second byte is LSB (low order)
                             */
                            int LSB = (int) audioBytes[2 * i + 1];
                            audioData[i] = MSB << 8 | (255 & LSB);
                        }
                    } else {
                        for (int i = 0; i < nlengthInSamples; i++) {
                            /*
                             * First byte is LSB (low order)
                             */
                            int LSB = (int) audioBytes[2 * i];
                            /*
                             * Second byte is MSB (high order)
                             */
                            int MSB = (int) audioBytes[2 * i + 1];
                            audioData[i] = MSB << 8 | (255 & LSB);
                        }
                    }
                } else if (format.getSampleSizeInBits() == 8) {
                    int nlengthInSamples = audioBytes.length;
                    audioData = new int[nlengthInSamples];
                    if (format.getEncoding().toString().startsWith("PCM_SIGN")) {
                        for (int i = 0; i < audioBytes.length; i++) {
                            audioData[i] = audioBytes[i];
                        }
                    } else {
                        for (int i = 0; i < audioBytes.length; i++) {
                            audioData[i] = audioBytes[i] - 128;
                        }
                    }
                }
//End Bit calcution

                //Normalized Bit
                sigProc = new SignalProc();
                audioDataNormalize = sigProc.doubleToInt(sigProc.normalize(sigProc.intToDouble(audioData), 1300));

                //End Normalized
                lines.removeAllElements();
                double inc = 0.02;
                // Calculate Screen Pixels                   
                for (double x = startPaint; x < endPaint && audioDataNormalize != null; x = x + 0.02) {
                    inc = inc + 0.02;
                    int idx = (int) (frames_per_pixel * numChannels * inc);

                    if (idx >= audioDataNormalize.length) {
                        break;
                    }
                    if (format.getSampleSizeInBits() == 8) {

                        my_byte = (byte) audioDataNormalize[idx];
                    } else {
                        my_byte = (byte) (1400 * audioDataNormalize[idx] / 32000);
                    }
                    double y_new = (double) (h * (90 - my_byte) / 210);
                    lines.add(new Line2D.Double(x, y_last, x, y_new));
                    y_last = y_new;

                }



                //Create Color for Keywords
                if (keyColorHandler.sourceValidation(frames_per_pixel)) {
                    if (keyColorHandler.isKeywordFind()) {
                        iscolorKeyWordAvailable = true;
                    }
                }
                //End Color Creation

                //Create Annotation
                try {
                    Speech.annotations.GetAnnotation annObj = new Speech.annotations.GetAnnotation(mainFrame.getConn());
                    annotationPos = annObj.getAll(fileHashValue);


                } catch (Exception er) {
                    System.err.println(er);
                }
                //End to create Annotation
                audioDataNormalize = null;
                audiobyte = null;
                audioData = null;
                audioBytes = null;
                sigProc = null;
                repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
        }

        @Override
        public void paint(Graphics g) {
            try {
                Dimension d = this.getSize();
                int w = d.width;
                int h = d.height - 20;
                int INFOPAD = 15;

                Graphics2D g2 = (Graphics2D) g;
                g2.setBackground(getBackground());
                g2.clearRect(0, 0, w, h);
                g2.setColor(Color.white);
                g2.fillRect(0, h - INFOPAD, w, INFOPAD);

                if (errStr != null) {
                    g2.setColor(jfcBlue);
                    g2.setFont(new Font("serif", Font.BOLD, 18));
                    g2.drawString("ERROR", 5, 20);
                    /*
                     * AttributedString as = new AttributedString(errStr);
                     * as.addAttribute(TextAttribute.FONT, font12, 0,
                     * errStr.length()); AttributedCharacterIterator aci =
                     * as.getIterator(); FontRenderContext frc =
                     * g2.getFontRenderContext(); LineBreakMeasurer lbm = new
                     * LineBreakMeasurer(aci, frc); float x = 5, y = 25;
                     * lbm.setPosition(0); while (lbm.getPosition() <
                     * errStr.length()) { TextLayout tl = lbm.nextLayout(w - x -
                     * 5); if (!tl.isLeftToRight()) { x = w - tl.getAdvance(); }
                     * tl.draw(g2, x, y += tl.getAscent()); y += tl.getDescent()
                     * + tl.getLeading();
                     }
                     */
                } else if (capture.thread != null) {
                    g2.setColor(Color.black);
                    g2.setFont(font12);

                } else {
                    g2.setColor(Color.black);
                    g2.setFont(font12);


                    int startPaint = jScrollPane1.getHorizontalScrollBar().getValue();

                    // g2.fillRect((int) 0, 95, (int) startPaint+jScrollPane1.getWidth(),2);
                    if (audioInputStream != null && format != null) {

                        //Declaration Part
                        byte my_byte = 0;
                        double y_last = 0;
                        int numChannels = format.getChannels();
                        int endPaint = jScrollPane1.getSize().width;
                        endPaint = (startPaint + endPaint);





                        //End Declaration



                        //Draw Selection portion and mouse movement

                        Color mouseDraggedbg = new Color(255, 255, 153);
                        g2.setColor(mouseDraggedbg);
                        int widthPos1 = (int) (mousePosX1 - mousePosX2);
                        int minValue1 = (int) (widthPos1 < 0 ? mousePosX1 : mousePosX2);
                        widthPos1 = (widthPos1 < 0 ? -1 * widthPos1 : widthPos1);
                        if (minValue1 != 0) {
                            g2.fillRect((int) minValue1, 0, (int) widthPos1, h - INFOPAD);
                            if (mousePosY1 > 170) {
                                try {
                                    BufferedImage image2 = ImageIO.read(new File("conf/img/L_01.jpg"));
                                    g2.drawImage(image2, (int) mousePosX2, (int) h - INFOPAD - 2, null);
                                    samplingGraph.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                                } catch (IOException ex) {
                                    Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }


                        //Annotation Part
                        try {
                            if (annotationPos != null) {
                                if (annotationPos.length > 0) {
                                    PixcelConversion pixConversion = new PixcelConversion();
                                    for (int ann = 0; ann < annotationPos.length; ann++) {
                                        int anStartpos = pixConversion.milliSecondToPixcel(annotationPos[ann][0], frames_per_pixel, (int) format.getFrameRate());
                                        int anEndpos = pixConversion.milliSecondToPixcel(annotationPos[ann][1], frames_per_pixel, (int) format.getFrameRate());
                                        if (anStartpos == 0 || anEndpos == 0) {
                                            continue;
                                        }

                                        Color annotatioColor;
                                        if (annotationPos[ann][2].equals("High")) {

                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image = null, image2 = null;
                                                    image = ImageIO.read(new File("conf/img/r1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/r2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle

                                            annotatioColor = new Color(255, 0, 0);
                                        } else if (annotationPos[ann][2].equals("Low")) {

                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image = null, image2 = null;
                                                    image = ImageIO.read(new File("conf/img/b1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/b2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle

                                            annotatioColor = new Color(0, 0, 255);
                                        } else if (annotationPos[ann][2].equals("Regular")) {

                                            //draw Triangle Green
                                            try {
                                                if ((anEndpos - anStartpos) > 10) {
                                                    BufferedImage image = null, image2 = null;
                                                    image = ImageIO.read(new File("conf/img/g1.png"));
                                                    image2 = ImageIO.read(new File("conf/img/g2.png"));
                                                    g2.drawImage(image, (int) anStartpos, (int) h - INFOPAD, null);
                                                    g2.drawImage(image2, (int) anEndpos - 15, (int) h - INFOPAD, null);
                                                }
                                            } catch (IOException ex) {
                                                Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //End Draw Triangle

                                            annotatioColor = new Color(0, 255, 0);
                                        } else {
                                            continue;
                                        }
                                        g2.setColor(annotatioColor);
                                        // System.err.println("InS "+annotationPos[ann][0]+" OS "+anStartpos+" inE "+annotationPos[ann][1]+" OE "+anEndpos);
                                        //g2.fillRect((int) anStartpos, 20, (int) anEndpos - anStartpos, h - INFOPAD - 40);
                                        double thickness = 2;
                                        Stroke oldStroke = g2.getStroke();
                                        Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,
                                                new float[]{12, 3}, 3);
                                        g2.setStroke(stroke);
                                        g2.drawRect((int) anStartpos, 20, (int) anEndpos - anStartpos, h - INFOPAD - 60);
                                        g2.setStroke(oldStroke);

                                    }


                                }

                            }
                        } catch (Exception er) {
                            Logger.getLogger(PlotWaveKws.class.getName()).log(Level.SEVERE, null, er);
                        }

                        //End Annotation





                        // Time Display

                        for (int t = startPaint; t < endPaint; t++) {


                            if ((t * frames_per_pixel) % format.getFrameRate() < frames_per_pixel) {
                                g2.setColor(Color.RED);
                                int timeLine = (int) ((t * frames_per_pixel) / format.getFrameRate());
                                if (frames_per_pixel > 4000) {
                                    if (timeLine % 300 != 0) {
                                        continue;
                                    }
                                } else if (frames_per_pixel > 2000) {
                                    if (timeLine % 60 != 0) {
                                        continue;
                                    }
                                } else if (frames_per_pixel > 250) {
                                    if (timeLine % 30 != 0) {
                                        continue;
                                    }
                                }
                                if (frames_per_pixel > 220) {
                                    if (timeLine % 10 != 0) {
                                        continue;
                                    }
                                } else if (frames_per_pixel > 110) {
                                    if (timeLine % 5 != 0) {
                                        continue;
                                    }
                                } else {
                                }



                                String hD = "", mD = "", sD = "", totalTD = "";
                                int hour = timeLine / 3600;
                                int hour_balance = timeLine % 3600;
                                int min = hour_balance / 60;
                                int min_balance = hour_balance % 60;

                                if (hour < 10) {
                                    hD = "0" + hour;
                                } else {
                                    hD = hD + hour;
                                }
                                if (min < 10) {
                                    mD = "0" + min;
                                } else {
                                    mD = mD + min;
                                }
                                if (min_balance < 10) {
                                    sD = "0" + min_balance;
                                } else {
                                    sD = sD + min_balance;
                                }

                                totalTD = hD + ":" + mD + ":" + sD;
                                g2.draw((Line2D) new Line2D.Double(t, h - 30, t, h - 20));
                                g2.setColor(Color.black);
                                g2.drawString(totalTD, t - 20, h - 7);

                            }


                        }
                        g2.setColor(Color.RED);
                        g2.drawLine(startPaint, h - 20, endPaint, h - 20);

                        //End Time Display

                        if (iscolorKeyWordAvailable) {
                            keyColorHandler.setColorIndex(startPaint, endPaint);
                        }

                        boolean drawColor = false;
                        int col = 0;
                        //Start Drawing signal and Time  Line

                        for (int i = 0; i < lines.size(); i++) {
                            //System.out.println(keyColorHandler.getStartPixel().size());

                            // Draw Signal Graph

                            if (((Line2D) lines.get(i)).getY2() != 0 && ((Line2D) lines.get(i)).getY1() != 0) {

                                if (iscolorKeyWordAvailable) {
                                    //Start Keyword Color Code


                                    int screenXpos = (int) (i / 50), keyStPos = 0, keyEnPos = 0;
                                    String currentKeyword = "";
                                    screenXpos = startPaint + screenXpos;



                                    if (i % 50 == 0) {
                                        drawColor = false;

                                        for (col = keyColorHandler.getColorStart(); col < keyColorHandler.getColorEnd(); col++) {
                                            keyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                                            keyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());
                                            if (keyStPos <= screenXpos && keyEnPos >= screenXpos) {
                                                drawColor = true;
                                                break;
                                            }

                                        }
                                    }



                                    if (drawColor) {

                                        if (keyColorHandler.getKeyWordName().get(col) != null) {
                                            currentKeyword = keyColorHandler.getKeyWordName().get(col).toString();

                                        }
                                        if (keyBuilder.getKeywordsColor() == null) {
                                            g2.setColor(new Color(165, 42, 42));
                                            g2.draw((Line2D) lines.get(i));
                                            g2.setColor(new Color(119, 136, 153));
                                            Stroke oldStroke = g2.getStroke();
                                            g2.drawRect(keyStPos, 10, (keyEnPos - keyStPos), h - 50);
                                            g2.setColor(Color.red);
                                            if ((keyEnPos - keyStPos) > 100) {
                                                g2.setFont(new Font("Serif", Font.PLAIN, 11));
                                                g2.drawString(currentKeyword.toUpperCase(), keyStPos + 10, 20);
                                                g2.setFont(new Font("Serif", Font.PLAIN, 12));
                                            }

                                        } else {
                                            if (keyBuilder.getKeywordsColor().get(currentKeyword.toLowerCase()) != null) {

                                                g2.setColor((Color) (keyBuilder.getKeywordsColor().get(currentKeyword.toLowerCase())));
                                            } else {
                                                g2.setColor(new Color(165, 42, 42));
                                            }
                                            g2.draw((Line2D) lines.get(i));
                                            g2.setColor(new Color(119, 136, 153));
                                            Stroke oldStroke = g2.getStroke();
                                            g2.drawRect(keyStPos, 10, (keyEnPos - keyStPos), h - 50);
                                            g2.setColor(Color.red);
                                            if ((keyEnPos - keyStPos) > 100) {
                                                g2.setFont(new Font("Serif", Font.PLAIN, 11));
                                                g2.drawString(currentKeyword.toUpperCase(), keyStPos + 10, 20);
                                                g2.setFont(new Font("Serif", Font.PLAIN, 12));
                                            }


                                        }
                                    } else {

                                        g2.setColor(new Color(128, 0, 128));
                                        g2.draw((Line2D) lines.get(i));
                                    }
                                    //End Keyword Color code

                                } else {
                                    // System.err.println(i);

                                    g2.setColor(new Color(128, 0, 128));
                                    g2.draw((Line2D) lines.get(i));
                                }
                            }

                            //End Draw Singal 


                        }
//End loop of drawing signals and Time lines

//Mouse Movement and play keyPortion

                        Color mouseMovement = new Color(220, 20, 60);
                        g2.setColor(mouseMovement);
                        if (mouseMoveX1 != 0) {
                            g2.fillRect((int) mouseMoveX1, 0, (int) 2, h - INFOPAD);

                            boolean mousedrawColor = false;

                            int mousekeyStPos = 0, mousekeyEnPos = 0;

                            if (keyColorHandler.getStartPixel() == null || keyColorHandler.getEndPixel() == null) {
                                return;
                            }

                            for (col = 0; col < keyColorHandler.getStartPixel().size(); col++) {
                                mousekeyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                                mousekeyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());
                                if (mousekeyStPos <= mouseMoveX1 && mousekeyEnPos >= mouseMoveX1) {
                                    mousedrawColor = true;
                                    break;
                                }

                            }

                            if (mousedrawColor) {
                                try {
                                    if ((mouseMoveY1 - 12) <= 0) {
                                        mouseMoveY1 = 12;
                                    }
                                    BufferedImage image = ImageIO.read(new File("conf/img/play.png"));
                                    g2.drawImage(image, (int) mouseMoveX1 - 5, (int) (mouseMoveY1 - 12), null);
                                } catch (IOException e) {
                                }
                            }

                        }
                        //End Selection and mouse movement


                        // .. draw current position .. & Playing cursor
                        if (seconds != 0 && !selectedPlay) {
                            double loc = seconds / duration * w;
                            g2.setColor(pink);
                            g2.setStroke(new BasicStroke(3));
                            if ((((int) loc % (jScrollPane1.getWidth())) < 50) && loc != 0 && ((loc + jScrollPane1.getWidth()) < (samplingGraph.getWidth() - 10))) {
                                jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                            } else {
                                if (endPaint < loc) {
                                    jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                }
                            }
                            g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                        } else {
                            if (mousePosX1 != 0 && mousePosX2 != 0) {

                                int widthPos = (int) (mousePosX1 - mousePosX2);
                                int minValue = (int) (widthPos < 0 ? mousePosX1 : mousePosX2);
                                widthPos = (widthPos < 0 ? -1 * widthPos : widthPos);
                                double loc = (seconds / duration * widthPos) + minValue;
                                g2.setColor(pink);
                                g2.setStroke(new BasicStroke(3));
                                g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                            } else if (mousePosX1 != 0 && mousePosX2 == 0) {
                                int widthPos = (int) (mousePosX1 - (int) ((samplingGraph.getSize().width) - 10));
                                int minValue = (int) (widthPos < 0 ? mousePosX1 : (int) ((samplingGraph.getSize().width) - 10));
                                widthPos = (widthPos < 0 ? -1 * widthPos : widthPos);
                                double loc = (seconds / duration * widthPos) + minValue;
                                g2.setColor(pink);
                                g2.setStroke(new BasicStroke(3));
                                if ((((int) loc % (jScrollPane1.getWidth())) < 50) && loc != 0 && ((loc + jScrollPane1.getWidth()) < (samplingGraph.getWidth() - 10))) {
                                    jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                } else {
                                    if (endPaint < loc) {
                                        jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) loc, 0));
                                    }
                                }
                                g2.draw(new Line2D.Double(loc, 0, loc, h - INFOPAD - 2));
                            }
                        }
                        //End Cursor Part

                    }

                    //End initial condision
                    subSambling.repaint();
                }
                //End else part
            } catch (Exception er) {
                System.err.println(er);
            }
        }
        //End function

        public void start() {
            thread = new Thread(this);
            thread.setName("SamplingGraph");
            thread.start();
            seconds = 0;
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {

            try {
                seconds = 0;
                while (thread != null) {

                    if ((playback.line != null) && (playback.line.isOpen())) {

                        long milliseconds = (long) (playback.line.getMicrosecondPosition() / 1000);
                        seconds = milliseconds / 1000.0;
                    } else if ((capture.line != null) && (capture.line.isActive())) {

                        long milliseconds = (long) (capture.line.getMicrosecondPosition() / 1000);
                        seconds = milliseconds / 1000.0;
                    }

                    try {
                        thread.sleep(100);
                    } catch (Exception e) {
                        break;
                    }

                    repaint();


                    while ((capture.line != null && !capture.line.isActive())
                            || (playback.line != null && !playback.line.isOpen())) {
                        try {
                            thread.sleep(10);

                        } catch (Exception e) {
                            break;
                        }
                    }
                }
                seconds = 0;
                selectedPlay = false;
                repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    }

// End class SamplingGraph
//*********************************************************************************************************
    class SubSamplingGraph extends JPanel implements Runnable {

        // Color pink = new Color(255, 175, 175);
        public SubSamplingGraph() {
            setBackground(new Color(255, 255, 255));
        }

        @Override
        public void paint(Graphics g) {
            try {
                Dimension d = this.getSize();
                int w = d.width;
                int h = 40;
                int INFOPAD = 15;

                Graphics2D g2 = (Graphics2D) g;
                g2.setBackground(getBackground());
                g2.clearRect(0, 0, w, h);
                g2.setColor(Color.white);
                g2.fillRect(0, h - INFOPAD, w, INFOPAD);

                if (audioInputStream != null) {

                    if (keyColorHandler.sourceValidation(frames_per_pixel)) {
                        int keyStPos = 0, keyEnPos = 0, mainPixtoSub = 0;
                        String currentKeyword;

                        mainPixtoSub = samplingGraph.getWidth() / subSambling.getWidth();
                        for (int col = 0; col < keyColorHandler.getStartPixel().size(); col++) {
                            keyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                            keyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());
                            keyStPos = keyStPos / mainPixtoSub;
                            keyEnPos = keyEnPos / mainPixtoSub;

                            currentKeyword = keyColorHandler.getKeyWordName().get(col).toString();

                            if (keyBuilder.getKeywordsColor() != null) {
                                if ((keyBuilder.getKeywordsColor().get(currentKeyword.toLowerCase())) != null) {
                                    g2.setColor((Color) (keyBuilder.getKeywordsColor().get(currentKeyword.toLowerCase())));
                                } else {
                                    g2.setColor(new Color(255, 255, 255));
                                }
                            } else {
                                g2.setColor(new Color(165, 42, 42));
                            }
                            g2.fillRect(keyStPos, 0, (keyEnPos - keyStPos), h);
                        }

                    }

                }
            } catch (Exception er) {
                System.err.println(er);
            }
        }

        public void run() {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    } // End class SamplingGraph

    public void scrollWaveFromRemote(int millSecond) {
        try {
            int pix = new PixcelConversion().milliSecondToPixcel(Integer.toString(millSecond), frames_per_pixel, (int) this.audioInputStream.getFormat().getFrameRate());
            jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) pix - 50, 0));
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    public void playWaveFromRemote(int millSecond) {

        try {
            int pix = new PixcelConversion().milliSecondToPixcel(Integer.toString(millSecond), frames_per_pixel, (int) this.audioInputStream.getFormat().getFrameRate());
            jScrollPane1.getViewport().setViewPosition(new java.awt.Point((int) pix - 150, 0));

            //Set Player and play keyword
            boolean mousedrawColor = false;
            int mousekeyStPos = 0, mousekeyEnPos = 0;
            for (int col = 0; col < keyColorHandler.getStartPixel().size(); col++) {
                mousekeyStPos = Integer.parseInt((keyColorHandler.getStartPixel().get(col)).toString());
                mousekeyEnPos = Integer.parseInt((keyColorHandler.getEndPixel().get(col)).toString());
                //  System.out.println("Key "+mousekeyStPos +" "+mousekeyEnPos);
                if (mousekeyStPos <= (pix + 1) && mousekeyEnPos >= (pix + 1)) {
                    mousedrawColor = true;
                    break;
                }

            }
            if (mousedrawColor) {
                if (mousekeyStPos < 10) {
                    mousekeyStPos = 10;
                }
                mousePosX1 = mousekeyStPos;
                mousePosX2 = mousekeyEnPos;
                if (rightClick.sourceAvailValidation()) {
                    rightClick.playSoundAll();
                }
            }
            //End play keyword
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    public void setSreemDrawGraph() {
        try {
            if (this.streamBytes.getCurrent() != null) {
                this.audioInputStream = StreamConverter.byteTostream(this.streamBytes.getCurrent(), this.audioInputStream);
                int widthScreen = this.setNormalScreen(this.audioInputStream);
                this.setGrphSizeinScreen(widthScreen);
                this.samplingGraph.createWaveForm(this.streamBytes.getCurrent());
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    @Override
    public void reorderWavePanel() {
        samplingGraph.createWaveForm(null);
    }
}
