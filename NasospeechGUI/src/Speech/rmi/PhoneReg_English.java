/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.rmi;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tatapower SED
 *
 */
public class PhoneReg_English {

    private String userID;
    String keyStartTime;
    String keyEndTime;
    String keyword;
    String keywordScore;
    double normalizedScore;
    public static final float CONST = 100000;
    int count = 1;
    //int v1,v2;
    BigInteger v1;
    BigInteger v2;
   
    BigInteger interval;
    float interval_in_sec;
    
    float v4;
    float normalized_score;
    
    static String previous_keyword;
    static float previous_score;
    static BigInteger old_v2 = new BigInteger("0");


    public PhoneReg_English(String userID) {
        this.userID = userID;
        
    }

    public void runCommand(String rootPath) {
        try {
            File wavefile = new File(rootPath + "/" + userID + "/" + userID + ".wav");
            if (!wavefile.exists()) {
                return;
            }
            phoneRec("./kwspotter/scripts/phoneRecnew2.sh " + wavefile.getAbsolutePath() + " english " + userID);
        } catch (Exception er) {
            System.err.println(er);
        }

    }

    private void phoneRec(String cmd) {
        // this is the command to execute in the Unix shell
        // create a process for the shell
        try {
            System.out.println(cmd);
            ProcessBuilder pb = new ProcessBuilder("bash", "-c", cmd);
            pb.redirectErrorStream(true); // use this to capture messages sent to stderr
            Process shell = null;
            try {
                shell = pb.start();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            InputStream shellIn = shell.getInputStream(); // this captures the output from the command
            try {
                int shellExitStatus = shell.waitFor();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } // wait for the shell to finish and get the return code
            // at this point you can process the output issued by the command
            // for instance, this reads the output and writes it to System.out:	
            int c;
            try {
                while ((c = shellIn.read()) != -1) {
                    System.out.write(c);
                }
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            // close the stream
            try {
                shellIn.close();
            } catch (IOException ignoreMe) {
            }
        } catch (Exception er) {
            System.err.println(er);
        }
    }

     // sort the lab file generated by phoneRec()
        public void sortFile() throws IOException, InterruptedException {
        String cmd1 = "cat kwspotter/misc/filtered_" + userID + ".lab | sort -n > kwspotter/misc/sorted_new" + userID + ".lab";
        // this is the command to execute in the Unix shell
        ProcessBuilder pb = new ProcessBuilder("bash", "-c", cmd1);
        pb.redirectErrorStream(true); // use this to capture messages sent to stderr
        Process shell = pb.start();
        InputStream shellIn = shell.getInputStream(); // this captures the output from the command
        int shellExitStatus = shell.waitFor(); // wait for the shell to finish and get the return code
        // at this point you can process the output issued by the command
        // for instance, this reads the output and writes it to System.out:
        int c;
        while ((c = shellIn.read()) != -1) {
            System.out.write(c);
        }
        // close the stream
        try {
            shellIn.close();
        } catch (IOException ignoreMe) {
        }

    }

        // sort the lab file generated by phoneRec(), sort by 4th column ie. score
        public void sortNormalizedFile() throws IOException, InterruptedException {
        String cmd1 = "cat kwspotter/misc/score_norm_" + userID + ".lab | sort -nk4 > kwspotter/misc/sorted_" + userID + ".lab";
        // this is the command to execute in the Unix shell
        ProcessBuilder pb = new ProcessBuilder("bash", "-c", cmd1);
        pb.redirectErrorStream(true); // use this to capture messages sent to stderr
        Process shell = pb.start();
        InputStream shellIn = shell.getInputStream(); // this captures the output from the command
        int shellExitStatus = shell.waitFor(); // wait for the shell to finish and get the return code
        // at this point you can process the output issued by the command
        // for instance, this reads the output and writes it to System.out:
        int c;
        while ((c = shellIn.read()) != -1) {
            System.out.write(c);
        }
        // close the stream
        try {
            shellIn.close();
        } catch (IOException ignoreMe) {
        }
        System.out.println("2. Normalized file sorted successfully ! Sorted by : score ");
    }

    //-------------------------------
    public void FilterSortedFile() {
        try {
            // Open the file that is the first
            // command line parameter
            FileInputStream fstream = null;
            try {
                fstream = new FileInputStream("kwspotter/misc/sorted_" + userID + ".lab");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ReadLabNormalize.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            try {
                //Read File Line By Line
                FileWriter fstreamout = new FileWriter("kwspotter/misc/filtered_" + userID + ".lab");
               
                BufferedWriter out = new BufferedWriter(fstreamout);
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console

                    strLine = strLine.trim();
                    if (strLine.startsWith("#") || strLine.startsWith("\"") || strLine.startsWith(".")) {
                        continue;
                    }

                    if (strLine.length() > 0) {
                        StringTokenizer st = new StringTokenizer(strLine, " ");
                        if (st.hasMoreElements()) {
                            keyStartTime = st.nextElement().toString();
                            v1 = new BigInteger(keyStartTime);
                        }
                        if (st.hasMoreElements()) {
                            keyEndTime = st.nextElement().toString();
                            v2 = new BigInteger(keyEndTime);
                        }
                        if (st.hasMoreElements()) {
                            keyword = st.nextElement().toString();
                        }

                        if (st.hasMoreElements()) {
                            keywordScore = st.nextElement().toString();
                            //--check if score <=-20.000000 ---
                            v4 = Float.valueOf(keywordScore.trim()).floatValue();
                            if (v4 > -85) {
                                continue;
                           }                         
                        }
                        
                       //out.write(keyStartTime + " " + keyEndTime + " " + keyword + " " + keywordScore);
                        out.write(keyStartTime + " " + keyEndTime + " " + keyword + " " + keywordScore);
                        out.newLine();
                        old_v2 = v2;
                    }
                }
                System.out.println("3. Normalized file filtered successfully ! Threshold : -85 ");
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadLabNormalize.class.getName()).log(Level.SEVERE, null, ex);
            }

            in.close();
            
            
        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
    }

// read the 'temp_<userid>.lab' file and manipulate the score
        public void normalizeScore() {
        try {
            // Open the file that is the first
            // command line parameter
            FileInputStream fstream = null;
            try {
                fstream = new FileInputStream("kwspotter/misc/temp_" + userID + ".lab");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ReadLabNormalize.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            try {
                //Read File Line By Line
                FileWriter fstreamout = new FileWriter("kwspotter/misc/score_norm_" + userID + ".lab");
               
                BufferedWriter out = new BufferedWriter(fstreamout);
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console

                    strLine = strLine.trim();
                    if (strLine.startsWith("#") || strLine.startsWith("\"") || strLine.startsWith(".")) {
                        continue;
                    }

                    if (strLine.length() > 0) {
                        StringTokenizer st = new StringTokenizer(strLine, " ");
                        if (st.hasMoreElements()) {
                            keyStartTime = st.nextElement().toString();
                            v1 = new BigInteger(keyStartTime);
                        }
                        if (st.hasMoreElements()) {
                            keyEndTime = st.nextElement().toString();
                            v2 = new BigInteger(keyEndTime);
                        }
                        if (st.hasMoreElements()) {
                            keyword = st.nextElement().toString();
                        }

                        if (st.hasMoreElements()) {
                            keywordScore = st.nextElement().toString();
                            v4 = Float.valueOf(keywordScore.trim()).floatValue();
                        }
                         
                        // manipulate/normalize the score of the generated lab file 
                        // formula for new score : v4=v4/(v2-v1/10000000)
                        interval=v2.subtract(v1); //v2-v1
                        float interval_f=(float)interval.floatValue()/10000000; //v2-v1 divided by 10000000
                        normalized_score=v4/interval_f;
                         
                        //out.write(keyStartTime + " " + keyEndTime + " " + keyword + " " + keywordScore);
                        out.write(keyStartTime + " " + keyEndTime + " " + keyword + " " + normalized_score);
                        out.newLine();
                        old_v2 = v2;
                    }
                }
                System.out.println("1. Score normalization successfully !");
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadLabNormalize.class.getName()).log(Level.SEVERE, null, ex);
            }

            in.close();
            
            
        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
    }

//----------------------------------------------------------
        public ArrayList readResultFile() {
        ArrayList fileData = null;
        try {
            fileData = new ArrayList();
            // Open the file that is the first
            // command line parameter
            FileInputStream fstream = new FileInputStream("kwspotter/misc/sorted_new" + userID + ".lab");
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            //Read File Line By Line
            while ((strLine = br.readLine()) != null) {
                // Print the content on the console
                strLine = strLine.trim();

                if (strLine.startsWith("#") || strLine.startsWith("\"")) {
                    continue;
                }

                if (strLine.length() > 0) {
                    fileData.add(strLine);
                }
            }
            //Close the input stream
            in.close();
        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
        if (fileData == null) {
            return null;
        }
        if (fileData.size() == 0) {
            return null;
        }
        return fileData;


    }

}
