/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.speakeridentification;

import Speech.common.StreamConverter;
import Speech.gui.MainFrame;
import Speech.rmi.VrasiClientSID;
import Speech.staticobjects.DisplayObjects;
import java.io.File;
import javax.swing.JInternalFrame;
import Speech.common.DatePicker;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tatapower SED
 *
 */
public class SIDTrain extends javax.swing.JPanel {

    /**
     * Creates new form SIDTest
     */
    private MainFrame mFrame;
    private String fileName;
    private JInternalFrame internalFrame;
    public static DisplaySIDTrainProgressBar displaysidTrainpro;
    public static DoSIDTrainProcess sidTrainProcess;
    private Ivector ivector;

    public SIDTrain(MainFrame mFrame, String fileName, JInternalFrame internalFrame, Ivector ivector) {
        this.mFrame = mFrame;
        this.fileName = fileName;
        this.internalFrame = internalFrame;
        this.ivector = ivector;
        initComponents();
        loadFields();
        try {
            File audioFile = new File(mFrame.getUserID() + ".wav");
            if (audioFile.exists()) {
                audioFile.delete();
            }
            StreamConverter.byteTowavefile(mFrame.pWave.streamBytes.getCurrent(), mFrame.pWave.audioInputStream, mFrame.getUserID() + ".wav");
        } catch (Exception er) {
            System.err.println(er.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comGender = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comLanguage = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        comChannel = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comGroup = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        comNationality = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comNetworkID = new javax.swing.JComboBox();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Gender  : ");

        comGender.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Language  :");

        comLanguage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Channel  :");

        comChannel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comChannel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Group  :");

        comGroup.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        jButton1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Name  :");

        txtName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Nationality  :");

        comNationality.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comNationality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Date  :");

        txtDate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/calender-icon.png"))); // NOI18N
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        jLabel9.setText("Network ID  :");

        comNetworkID.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        comNetworkID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comNationality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel5)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comNetworkID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8))
                                    .addComponent(comGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comLanguage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comChannel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtName))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comNetworkID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        HashMap<String, String> resField;
        resField = new HashMap<>();
        try {
            if (mFrame.rSidStatus) {
                javax.swing.JOptionPane.showMessageDialog(mFrame, "Process already running... ");
                return;
            }

            String n_name = txtName.getText().trim();

            if (n_name.length() == 0) {
                return;
            }
            String n_date = txtDate.getText().trim();
            if (n_date.length() == 0) {
                n_date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            }
            Random r = new Random();
            String n_uname = n_name + ((int) (Math.random() * 9000) + 1000);

            resField.put("filename", n_uname);
            resField.put("nationality", comNationality.getSelectedItem().toString());
            resField.put("date", n_date);
            resField.put("gender", comGender.getSelectedItem().toString());
            resField.put("language", comLanguage.getSelectedItem().toString());
            resField.put("channel", comChannel.getSelectedItem().toString());
            resField.put("network", comNetworkID.getSelectedItem().toString());
            resField.put("groupname", comGroup.getSelectedItem().toString());
            resField.put("wavefile", n_name + "_01.wav");
            resField.put("mode", "train");

            displaysidTrainpro = new DisplaySIDTrainProgressBar();
            sidTrainProcess = new DoSIDTrainProcess(resField);
            displaysidTrainpro.start();
            sidTrainProcess.start();


        } catch (Exception er) {
            System.err.println(er);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadFields() {
        try {
            String[][] fields = new SpeakerMaster(mFrame.getConn()).getAllFields();
            for (String[] subField : fields) {
                if (subField[0] == null) {
                    continue;
                }


                switch (subField[0].trim()) {

                    case "Language":
                        comLanguage.addItem(subField[1]);
                        break;
                    case "Gender":
                        comGender.addItem(subField[1]);
                        break;
                    case "Channel":
                        comChannel.addItem(subField[1]);
                        break;
                    case "Group":
                        comGroup.addItem(subField[1]);
                        break;
                    case "Nationality":
                        comNationality.addItem(subField[1]);
                        break;
                    case "Network":
                        comNetworkID.addItem(subField[1]);
                        break;
                    default:
                        System.out.println("No Group for " + subField[0]);

                }

            }
        } catch (Exception er) {
            Logger.getLogger(SIDTrain.class.getName()).log(Level.SEVERE, null, er);
        }
    }

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
        txtDate.setText(new DatePicker(this.getLocationOnScreen()).setPickedDate());
    }//GEN-LAST:event_jLabel8MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comChannel;
    private javax.swing.JComboBox comGender;
    private javax.swing.JComboBox comGroup;
    private javax.swing.JComboBox comLanguage;
    private javax.swing.JComboBox comNationality;
    private javax.swing.JComboBox comNetworkID;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    public class DoSIDTrainProcess implements Runnable {

        private Thread thread = null;
        private HashMap mapedValue = null;

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public DoSIDTrainProcess(HashMap mapedValue) {
            this.mapedValue = mapedValue;
        }

        public void run() {

            try {
                try {
                    boolean serverFind = true;

                    //Create training set

                    VrasiClientSID vClient = new VrasiClientSID();
                    if (!vClient.setRemoteConnection(mFrame.getUserID())) {
                        javax.swing.JOptionPane.showMessageDialog(mFrame, "Server Could not find", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        serverFind = false;
                    }

                    if (serverFind) {

                        boolean trained = new SpeakerMaster(mFrame.getConn()).trainNewSID(mapedValue);
                        if (!trained) {
                            serverFind = false;
                        }
                    }


                    if (serverFind) {

                        mFrame.jProgressToolBar.setVisible(true);
                        mFrame.sidButtonStatus(true);
                        DisplayObjects.setIsSidTrain(false);
                        DisplayObjects.setSidTrainObj(null);
                        internalFrame.dispose();
                        String result = vClient.processSIDTraining(mFrame.getUserID() + ".wav", mapedValue.get("filename").toString(), mapedValue.get("wavefile").toString());

                        if (result == null) {
                            javax.swing.JOptionPane.showMessageDialog(mFrame, "Could not train the file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                            ivector.lSpeakers.loadFileStruct();
                            javax.swing.JOptionPane.showMessageDialog(mFrame, "File has trained successfully, Generated id is " + mapedValue.get("filename").toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    }

                    //




                } catch (Exception er) {
                    System.out.println(er);
                }


                if (displaysidTrainpro != null) {
                    displaysidTrainpro.stop();
                }
            } catch (Exception er) {
                System.err.println(er);
            }
            mFrame.rSidStatus = false;

            if (mFrame.rKwsStatus || mFrame.rPdsStatus || mFrame.rPhoneStatus || mFrame.rSidStatus) {
                mFrame.jProgressToolBar.setVisible(true);
            } else {
                mFrame.jProgressToolBar.setVisible(false);
            }

            sidTrainProcess = null;
        }
    }

    public class DisplaySIDTrainProgressBar implements Runnable {

        private Thread thread = null;

        public void start() {

            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();

        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {
            try {

                while (thread != null) {
                    for (int i = 0; i <= 100; i = i + 3) {
                        if (thread == null) {
                            break;
                        }

                        //Progressively increment variable i
                        mFrame.jsidProgressBar.setValue(i);
                        mFrame.jsidProgressBar.repaint(); //Refresh graphics
                        try {
                            Thread.sleep(50);
                        } //Sleep 50 milliseconds
                        catch (InterruptedException err) {
                        }
                    }
                }
                mFrame.sidButtonStatus(false);
                mFrame.jsidProgressBar.setValue(0);
                mFrame.jsidProgressBar.repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
            displaysidTrainpro = null;

        }
    }

    public static void stopPhoneProcess() {

        if (sidTrainProcess != null) {
            sidTrainProcess.stop();
            if (!(sidTrainProcess.thread.isAlive())) {
                displaysidTrainpro.stop();
                displaysidTrainpro = null;
                sidTrainProcess = null;
            }
        }
        if (sidTrainProcess == null && displaysidTrainpro != null) {
            displaysidTrainpro.stop();
            displaysidTrainpro = null;
        }

    }
}
