/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.speakeridentification;

import Speech.common.DatePicker;
import Speech.common.StreamConverter;
import Speech.gui.MainFrame;
import Speech.rmi.VrasiClientSID;
import Speech.staticobjects.DisplayObjects;
import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;

/**
 *
 * @author Tatapower SED
 *
 */
public class SIDTest extends javax.swing.JPanel {

    /**
     * Creates new form SIDTest
     */
    private MainFrame mFrame;
    private String fileName;
    private JInternalFrame internalFrame;
    private Ivector ivector;
    public static DisplaySIDProgressBar displaysidpro;
    public static DoSIDProcess sidProcess;
    private List<JComboBox> fieldlist;

    public SIDTest(MainFrame mFrame, String fileName, JInternalFrame internalFrame, Ivector ivector) {
        this.ivector = ivector;
        this.mFrame = mFrame;
        this.internalFrame = internalFrame;
        initComponents();
        try {
            File audioFile = new File(mFrame.getUserID() + ".wav");
            if (audioFile.exists()) {
                audioFile.delete();

            }
            StreamConverter.byteTowavefile(mFrame.pWave.streamBytes.getCurrent(), mFrame.pWave.audioInputStream, mFrame.getUserID() + ".wav");
            //  ivector.setInformation("");

            loadFields();

        } catch (Exception er) {
            System.err.println(er.getMessage());
        }

    }

    private void loadFields() {
        try {

            fieldlist = new ArrayList<>();
            for (Component comp : this.jPanel1.getComponents()) {
                if (comp instanceof JComboBox) {
                    if (comp.getName() != null && (!comp.getName().equals("notdefined"))) {
                        fieldlist.add((JComboBox) comp);
                    }
                }
            }
            for (JComboBox jb : fieldlist) {
                System.err.println(jb.getName());
            }

            String[][] fields = null;//new SpeakerMaster(mFrame.getConn()).getAllFields("");
            for (String[] subField : fields) {
                if (subField[0] == null) {
                    continue;
                }
                for (JComboBox comfield : fieldlist) {
                    if (comfield == null) {
                        continue;
                    }
                    if (comfield.getName() == null) {
                        continue;
                    }

                    if (comfield.getName().trim().equals(subField[0])) {
                        comfield.addItem(subField[1]);
                        break;
                    }
                }

            }
        } catch (Exception er) {
            Logger.getLogger(SIDTest.class.getName()).log(Level.SEVERE, null, er);
        }

    }

    private String getfieldQuery() {
        String allFields = null;
        boolean findAll = false;
        allFields = "select distinct(filename) from sidmaster where ";
        for (JComboBox fcom : fieldlist) {
            if (fcom.getSelectedItem() != null && !fcom.getSelectedItem().equals("None")) {
                String selectedItem = fcom.getSelectedItem().toString();
                if (selectedItem.equals("All")) {
                    allFields = "select distinct(filename) from sidmaster";
                    findAll = true;
                    break;
                } else {
                    if (fcom.getName().equals("Group")) {
                        allFields = allFields + "groupname = '" + selectedItem + "' and ";
                    } else {
                        allFields = allFields + fcom.getName().toLowerCase() + " = '" + selectedItem + "' and ";
                    }
                }



            }
        }
        if (comDates.getText().trim().length() > 0 && !findAll) {
            allFields = allFields + "groupname = '" + comDates.getText().trim() + "'";
        }
        allFields = allFields.trim();
        if (allFields.endsWith("and")) {
            allFields = (allFields.substring(0, allFields.length() - 3)).trim();
        }
        if (allFields.endsWith("where")) {
            allFields = null;
        }


        return allFields;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comGender = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comLanguage = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        comChannel = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comNationality = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comThreshold = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        comGroup = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        comNetworkID = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        comDates = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jLabel7.setText("jLabel7");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Gender  :");

        comGender.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comGender.setToolTipText("Gender");
        comGender.setName("Gender"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Language  :");

        comLanguage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comLanguage.setToolTipText("Language");
        comLanguage.setName("Language"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Chennal  :");

        comChannel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comChannel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comChannel.setToolTipText("Channel");
        comChannel.setName("Channel"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Nationality   :");

        comNationality.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comNationality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comNationality.setToolTipText("Nationality");
        comNationality.setActionCommand("");
        comNationality.setName("Nationality"); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Threshold  :");

        comThreshold.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comThreshold.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2.0" }));
        comThreshold.setName("notdefined"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Group  :");

        comGroup.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comGroup.setToolTipText("Group");
        comGroup.setName("Group"); // NOI18N

        jLabel8.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        jLabel8.setText("Date :");

        comNetworkID.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        comNetworkID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "All", "Default" }));
        comNetworkID.setToolTipText("Network");
        comNetworkID.setName("Network"); // NOI18N

        jLabel9.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        jLabel9.setText("Network ID :");

        comDates.setEditable(false);
        comDates.setBackground(java.awt.Color.white);
        comDates.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/calender-icon.png"))); // NOI18N
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel8)))
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comGroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(comDates)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(comThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comNationality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comLanguage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comChannel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comNetworkID, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comNetworkID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(7, 7, 7))
        );

        comGender.getAccessibleContext().setAccessibleName("tm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String query = getfieldQuery();
        System.out.println(query);
        ArrayList userRecord = new SpeakerMaster(mFrame.getConn()).getAllUserRecords(query);
        if (userRecord == null) {
            return;
        }
        if (userRecord.size() < 1) {
            return;
        }

        try {
            if (mFrame.rSidStatus) {
                javax.swing.JOptionPane.showMessageDialog(mFrame, "Process already running... ");
                return;
            }
            displaysidpro = new DisplaySIDProgressBar();
            sidProcess = new DoSIDProcess(userRecord);
            displaysidpro.start();
            sidProcess.start();
        } catch (Exception er) {
            System.err.println(er);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:

        comDates.setText(new DatePicker(this.getLocationOnScreen()).setPickedDate());
    }//GEN-LAST:event_jLabel10MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comChannel;
    private javax.swing.JTextField comDates;
    private javax.swing.JComboBox comGender;
    private javax.swing.JComboBox comGroup;
    private javax.swing.JComboBox comLanguage;
    private javax.swing.JComboBox comNationality;
    private javax.swing.JComboBox comNetworkID;
    private javax.swing.JComboBox comThreshold;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public class DoSIDProcess implements Runnable {

        private Thread thread = null;
        private ArrayList userList = null;

        public DoSIDProcess(ArrayList userList) {
            this.userList = userList;
        }

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {

            try {
                try {
                    long start = System.currentTimeMillis();
                    DisplayObjects.setIsSidTest(false);
                    DisplayObjects.setSidTestObj(null);
                    internalFrame.dispose();
                    mFrame.rSidStatus = true;
                    String groupName = comGroup.getSelectedItem().toString();


                    boolean serverFind = true;


                    VrasiClientSID vClient = new VrasiClientSID();
                    if (!vClient.setRemoteConnection(mFrame.getUserID())) {
                        javax.swing.JOptionPane.showMessageDialog(mFrame, "Server Could not find", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        serverFind = false;
                    }
                    ArrayList<String> result = vClient.processSIDTest(mFrame.getUserID() + ".wav", userList, comThreshold.getSelectedItem().toString());


                    if (result == null) {
                        javax.swing.JOptionPane.showMessageDialog(mFrame, "Server Could not find", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        serverFind = false;
                    }
                    //-----
                    double elapsed = (System.currentTimeMillis() - start) / 1000.0;
                    System.out.println("Execution Time: " + elapsed);
                    String exTime = String.valueOf(elapsed);
                    mFrame.pWave.setExeutionTime("Exec Time: " + exTime + " Sec");
                    //-----

                    ivector.setInformation(result);


                } catch (Exception er) {
                    System.out.println(er.getMessage());

                }


                if (displaysidpro != null) {
                    displaysidpro.stop();
                }
            } catch (Exception er) {
                System.err.println(er);
            }
            mFrame.rSidStatus = false;

            if (mFrame.rKwsStatus || mFrame.rPdsStatus || mFrame.rPhoneStatus || mFrame.rSidStatus) {
                mFrame.jProgressToolBar.setVisible(true);
            } else {
                mFrame.jProgressToolBar.setVisible(false);
            }

            sidProcess = null;
        }
    }

    public class DisplaySIDProgressBar implements Runnable {

        private Thread thread = null;

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {
            try {
                mFrame.jProgressToolBar.setVisible(true);
                mFrame.sidButtonStatus(true);
                while (thread != null) {
                    for (int i = 0; i <= 100; i = i + 3) {
                        if (thread == null) {
                            break;
                        }

                        //Progressively increment variable i
                        mFrame.jsidProgressBar.setValue(i);
                        mFrame.jsidProgressBar.repaint(); //Refresh graphics
                        try {
                            Thread.sleep(50);
                        } //Sleep 50 milliseconds
                        catch (InterruptedException err) {
                        }
                    }
                }
                mFrame.sidButtonStatus(false);
                mFrame.jsidProgressBar.setValue(0);
                mFrame.jsidProgressBar.repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
            displaysidpro = null;

        }
    }

    public static void stopPhoneProcess() {

        if (sidProcess != null) {
            sidProcess.stop();
            if (!(sidProcess.thread.isAlive())) {
                displaysidpro.stop();
                displaysidpro = null;
                sidProcess = null;
            }
        }
        if (sidProcess == null && displaysidpro != null) {
            displaysidpro.stop();
            displaysidpro = null;
        }

    }
}
