/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.addLangugeKeywords;

import Speech.phoneme.*;
import Speech.common.StreamConverter;
import Speech.gui.MainFrame;
import Speech.settings.LanguageEntry;
import Speech.sqlconnection.MysqlConnect;
import com.mysql.jdbc.Connection;
import java.awt.Dimension;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import Speech.rmi.VrasiClientKWS;        
import java.awt.Font;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JDesktopPane;
import java.nio.charset.*;
/**
 *
 * @author Lok Bahadur Chetri<lok.b.chetri@gmail.com>
 * modified codes have been added on 8/8/2014 to check if keyword already 
 * exists before inserting into database
 */
public class AddLangKeyword extends javax.swing.JPanel
{
private MainFrame mframe;
private KeyWordBuilder keyBuilder;
AudioInputStream audioInputStream;
Connection conn;
private ResultSet rs = null, rs_search=null; //rs_search newly added to search for a keyword
private PreparedStatement pst = null;
Statement stmt_search=null;//stmt_search newly added to search for a keyword, import also added
String sql_search="", search_result="";//sql_search and search_result newly added to search for a keyword
String q_add="",tmp="";
 String indianTranscr;

    /**
     * Creates new form AddKeyword
     */
   
    
    
    
     public AddLangKeyword(String lang, MainFrame mframe) {
      //  initComponents();
        // txtKeyword.setMaximumSize(txtKeyword.getPreferredSize());
        try {
          //System.out.println("Default Charset=" + Charset.defaultCharset());
    	System.setProperty("file.encoding", "UTF-8");
    	//System.out.println("file.encoding=" + System.getProperty("file.encoding"));
    	//System.out.println("Default Charset=" + Charset.defaultCharset());
    	//System.out.println("Default Charset in Use=" + Charset.getDefaultCharSet());
            initComponents();
            if(lang == "Hindi")
            {
            setKeyMapHindi();
            
            /// transcBtn.setVisible(false);
            
            }
            else
            {
               
                
                helpLabel.setVisible(false);
               kybSelector.setVisible(false);
               jButton2.setVisible(false);
            //   jComboBox2.setPreferredSize(new Dimension(160, 23));
            // jComboBox2.setMinimumSize(new Dimension(160, 23));
          //   jRadioButton1.setVisible(false);
          //   jRadioButton2.setVisible(false);
            //kybOptinsHolder.setVisible(false);
            }
         
           txtKeyword.requestFocus();
            conn = (Connection) new MysqlConnect().getDBConnection();
        } catch (Exception ex) {
            Logger.getLogger(LanguageEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

        //lang=lang.toLowerCase();
        // invoke pr and get trans
        keyBuilder = new KeyWordBuilder();
        //boolean r= x.setSource(fname, lang, fname, redoStack);
        //StreamConverter.streamTowavefile(filename,  audioStream);
        
        keyBuilder=new KeyWordBuilder();
        boolean result = keyBuilder.setSource(mframe.getUserID() + "phoneme" + ".wav", lang, mframe.getUserID() + "phoneme", null);

        //System.out.println(filename+" "+lang+" "+mframe.getUserID()+" " +null);
        this.setVisible(true);
        this.setSize(new Dimension(350, 520)); 
        this.txtLang.setText(lang);
       // this.txtTransc.setText(displayTranscription());
        this.txtLang.setEnabled(false);
        //this.txtTransc.setEnabled(false);
        
    }
    
    
    
public String displayTranscription() 
{
        List spList = keyBuilder.keyExtract;
        if (spList == null) {
            return "Not found";
        }
        //
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < spList.size(); i++) 
        {
            if (spList.get(i).toString().startsWith("sil")) 
            {
                sb.append(" sil ");
            } else
            {
                sb.append(" "+spList.get(i).toString());
            }

        }
        return sb.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTransc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtLang = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        txtKeyword = new javax.swing.JTextField();
        kybOptinsHolder = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        transcBtn = new javax.swing.JButton();
        helpLabel = new javax.swing.JLabel();
        kybSelector = new javax.swing.JComboBox();

        setOpaque(false);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Keyword ");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Transcription");

        txtTransc.setColumns(30);
        txtTransc.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtTransc.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Language     ");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "list 1", "list 2", "list 3", "list 4", "list 5" }));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("List");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtLang.setPreferredSize(new java.awt.Dimension(6, 23));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Priority        ");

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "priority 1", "priority 2", "priority 3", "priority 4", "priority 5", "priority 6", "priority 7", "priority 8", "priority 9", "priority 10" }));
        jComboBox2.setMinimumSize(new java.awt.Dimension(160, 23));
        jComboBox2.setPreferredSize(new java.awt.Dimension(165, 23));

        txtKeyword.setColumns(30);
        txtKeyword.setMaximumSize(new java.awt.Dimension(150, 2147483647));
        txtKeyword.setMinimumSize(new java.awt.Dimension(160, 20));
        txtKeyword.setPreferredSize(new java.awt.Dimension(336, 23));
        txtKeyword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                convertToHindi(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                preventDefault(evt);
            }
        });

        kybOptinsHolder.setMaximumSize(new java.awt.Dimension(160, 32767));
        kybOptinsHolder.setMinimumSize(new java.awt.Dimension(160, 100));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/kyboardsign.png"))); // NOI18N
        jButton2.setToolTipText("Invoke on-screen keyboard");
        jButton2.setMargin(new java.awt.Insets(0, 14, 0, 14));
        jButton2.setMaximumSize(new java.awt.Dimension(51, 11));
        jButton2.setMinimumSize(new java.awt.Dimension(51, 11));
        jButton2.setPreferredSize(new java.awt.Dimension(51, 11));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kybOptinsHolderLayout = new javax.swing.GroupLayout(kybOptinsHolder);
        kybOptinsHolder.setLayout(kybOptinsHolderLayout);
        kybOptinsHolderLayout.setHorizontalGroup(
            kybOptinsHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        kybOptinsHolderLayout.setVerticalGroup(
            kybOptinsHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kybOptinsHolderLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        transcBtn.setText("Generate Transcription");
        transcBtn.setActionCommand("Generate ");
        transcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcBtnActionPerformed(evt);
            }
        });

        helpLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Speech/Icons/kybHelp.png"))); // NOI18N
        helpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showHelp(evt);
            }
        });

        kybSelector.setFont(new java.awt.Font("Times New Roman", 1, 9)); // NOI18N
        kybSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inscript", "Phonetic" }));
        kybSelector.setToolTipText("Select Keyboard Type");
        kybSelector.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        kybSelector.setMaximumSize(new java.awt.Dimension(32767, 8));
        kybSelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changeKybType(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(helpLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(kybSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(kybOptinsHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(79, 79, 79))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtLang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTransc, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(transcBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kybOptinsHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(helpLabel)
                    .addComponent(kybSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtTransc, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtLang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcBtn)
                    .addComponent(jButton1))
                .addGap(43, 43, 43))
        );

        transcBtn.getAccessibleContext().setAccessibleDescription("");
        helpLabel.getAccessibleContext().setAccessibleDescription("");
        helpLabel.setToolTipText("Help");
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //save the keyword and update dictionary 
       String kw=txtKeyword.getText().trim();
       /* String trans=txtTransc.getText().trim();*/
        String language=txtLang.getText().trim();
       // String transc1=jTextField1.getText().trim();
        String trans=txtTransc.getText().trim();
        String listname=jComboBox1.getSelectedItem().toString();
        String priority=jComboBox2.getSelectedItem().toString();
        if(kw.length()==0 || kw==null)
            JOptionPane.showMessageDialog(null, "Please enter a valid keyword","Warning",JOptionPane.WARNING_MESSAGE);
//        else if (trans.length()==0 || trans==null)
//            JOptionPane.showMessageDialog(null, "Transcription cannot be blank","Warning",JOptionPane.WARNING_MESSAGE);
        else
        {
            //add to database
            if(language.equals("Hindi")){
                language="Hindi_part1";
            }
            else if(language.equals("English")){
                
                language="English";
            }
                
            
             /* First check if keyword exists
             * 1. if it exists, display alert message and return
             * 2. else insert keyword to database
             */
            sql_search = "SELECT * FROM keyword_master where keyword='"+kw+"'";
            try {
               
               
                stmt_search = conn.createStatement();
                rs_search = stmt_search.executeQuery(sql_search);
                if(rs_search.next()){
                    System.out.println("Found keyword="+kw);
                    System.out.println("Keyword was not added to avoid redundant data");
                    JOptionPane.showMessageDialog(null, "This Keyword was already added!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    
                    //search_result="This Keyword was already added! Do you still want to add?";
                    //JOptionPane.showMessageDialog(null, search_result, "Information",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    //int response =  JOptionPane.showConfirmDialog(null, search_result, "Confirm Keyword Addition", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                  
                  /*If user still wants to add, do the following: add to Dictionary but not to DB*/
                  /*  if (response == JOptionPane.YES_OPTION) {
                        System.out.println("Yes button clicked");                        
                        //----- update dict
                        if(language.equals("Hindi_part1")){
                            language="Hindi";
                        }
                        if(language.equals("Assamese_part1")){
                            language="Assamese";
                        }
                        VrasiClientKWS vClient=new VrasiClientKWS() ;
                        tmp=txtTransc.getText().trim();
                        tmp=tmp.replaceAll(" ", "_").toLowerCase();
                        vClient.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), tmp);
                        //---
                        System.out.println("dictionary updated");                        
                        JOptionPane.showMessageDialog(null, "Keyword transcripion saved successfully !", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                     
                    else if (response == JOptionPane.NO_OPTION) {
                        JOptionPane.showMessageDialog(null,"Keyword not saved","Information",JOptionPane.INFORMATION_MESSAGE);
                        //System.out.println("No button clicked, Do nothing");
                    }
                    */
                }
                else {
                    /* addition of keyword with the key field */
                    System.out.println("Trying to add keyword=" + kw);
                    q_add = "insert into keyword_master (language,keyword,listname,groupname)values('" + language + "','" + kw + "','" + listname + "','" + priority + "')";
                    try {
                        pst = conn.prepareStatement(q_add);
                        pst.execute();




                        VrasiClientKWS vClient = new VrasiClientKWS();
                        // tmp=txtTransc.getText().trim();
                        tmp = indianTranscr.trim();
                        tmp = tmp.replaceAll(" ", "_").toLowerCase();
                        vClient.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), tmp);
                        //-------------------------------------------------------// 
                        System.out.println("Added keyword " + kw + " successfully");
                    } catch (SQLException ex) {
                        Logger.getLogger(LanguageEntry.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("There was some problem in adding=" + kw);
                    }

                    //----- update dict -----------------




//                    VrasiClientKWS vClient=new VrasiClientKWS() ;
//                    tmp=txtTransc.getText().trim();
//                    tmp=tmp.replaceAll(" ", "_").toLowerCase();
//                    vClient.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), tmp);
                    //---prompt for confirming keyword addition.
                    JOptionPane.showMessageDialog(null, "New keyword saved successfully !", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddKeyword.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }

        
    }//GEN-LAST:event_jButton1ActionPerformed

    
   
    //------------methods for hindi typing on keypress starts----------------------//
      
    
        private void setKeyMapHindi()
    {
        keyMap.clear();
        
        keyMap.put("`","'");
        keyMap.put("1","१");
        keyMap.put("2","२");
        keyMap.put("3","३");    
        keyMap.put("4","४");
        keyMap.put("5","५");
        keyMap.put("6","६");
        keyMap.put("7","७");
        keyMap.put("8","८");
        keyMap.put("9","९");
        keyMap.put("0","०"); 
        keyMap.put("=","ृ"); 
        keyMap.put("\\","ॉ"); 
        
        keyMap.put("q","ौ");
        keyMap.put("w","ै");
        keyMap.put("e","ा");
        keyMap.put("r","ी");    
        keyMap.put("t","ू");
        keyMap.put("y","ब");
        keyMap.put("u","ह");
        keyMap.put("i","ग");
        keyMap.put("o","द");
        keyMap.put("p","ज");
        keyMap.put("[","ड"); 
        keyMap.put("]","़"); 
         
        keyMap.put("a","ो");
        keyMap.put("s","े");
        keyMap.put("d","्");
        keyMap.put("f","ि");    
        keyMap.put("g","ु");
        keyMap.put("h","प");
        keyMap.put("j","र");
        keyMap.put("k","क");
        keyMap.put("l","त");
        keyMap.put(";","च"); 
        keyMap.put("'","ट");
          
        keyMap.put("z","");
        keyMap.put("x","ं");
        keyMap.put("c","म");
        keyMap.put("v","न");    
        keyMap.put("b","व");
        keyMap.put("n","ल");
        keyMap.put("m","स");
      
        keyMap.put("/","य");
        
         
  
        keyMap.put("!","ऍ");
        keyMap.put("@","ॅ");
        keyMap.put("#","्");    
        keyMap.put("$","र्");
        keyMap.put("%","ज्ञ");
        keyMap.put("^","त्र");
        keyMap.put("&","क्ष");
        
        keyMap.put("*","श्र");
        
        keyMap.put("_","ः"); 
        keyMap.put("+","ऋ"); 
        keyMap.put("|","ऑ"); 
        
        keyMap.put("Q","औ");
        keyMap.put("W","ऐ");
        keyMap.put("E","आ");
        keyMap.put("R","ई");    
        keyMap.put("T","ऊ");
        keyMap.put("Y","भ");
        keyMap.put("U","ङ");
        keyMap.put("I","घ");
        keyMap.put("O","ध");
        keyMap.put("P","झ");
        keyMap.put("{","ढ"); 
        keyMap.put("}","ञ"); 
         
        keyMap.put("A","ओ");
        keyMap.put("S","ए");
        keyMap.put("D","अ");
        keyMap.put("F","इ");    
        keyMap.put("G","उ");
        keyMap.put("H","फ");
        keyMap.put("J","ऱ");
        keyMap.put("K","ख");
        keyMap.put("L","थ");
        keyMap.put(":","छ");
        keyMap.put("\"","ठ"); 
        
        keyMap.put("Z","");
        keyMap.put("X","ँ");
        keyMap.put("C","ण");
        keyMap.put("V","");    
        keyMap.put("B","");
        keyMap.put("N","ळ");
        keyMap.put("M","श");
      
        keyMap.put("<","ष");
        keyMap.put(">","|");
    
    }
      
    
        private void setPhoneticKeyMapHindi()
        {
        keyMap.clear();
        
        keyMap.put("`","ॆ");
        keyMap.put("1","१");
        keyMap.put("2","२");
        keyMap.put("3","३");    
        keyMap.put("4","४");
        keyMap.put("5","५");
        keyMap.put("6","६");
        keyMap.put("7","७");
        keyMap.put("8","८");
        keyMap.put("9","९");
        keyMap.put("0","०"); 
       // keyMap.put("=","ृ"); 
        keyMap.put("\\","ो"); 
        
        keyMap.put("q","ओ");
        keyMap.put("w","ट");
        keyMap.put("e","े");
        keyMap.put("r","र");    
        keyMap.put("t","त");
        keyMap.put("y","य");
        keyMap.put("u","ु");
        keyMap.put("i","ि");
        keyMap.put("o","ो");
        keyMap.put("p","प");
        keyMap.put("[","ड"); 
        keyMap.put("]","ऋ"); 
         
        keyMap.put("a","ा");
        keyMap.put("s","स");
        keyMap.put("d","द");
        keyMap.put("f","्");    
        keyMap.put("g","ग");
        keyMap.put("h","ह");
        keyMap.put("j","ज");
        keyMap.put("k","क");
        keyMap.put("l","ल");
        keyMap.put(";","इ"); 
        keyMap.put("'","उ");
          
        keyMap.put("z","ङ");
        keyMap.put("x","ष");
        keyMap.put("c","च");
        keyMap.put("v","व");    
        keyMap.put("b","ब");
        keyMap.put("n","न");
        keyMap.put("m","म");
        keyMap.put(".","|");
        keyMap.put("/","ए");
        
         
        keyMap.put("~","ऎ");
        keyMap.put("!","ऍ");
        keyMap.put("@","ॅ");
        keyMap.put("#","ऑ");    
        keyMap.put("$","ॉ");
        keyMap.put("%","ञ");
        keyMap.put("^","ज्ञ");
       // keyMap.put("&","क्ष");
        
        keyMap.put("*","श्र");
        
      //  keyMap.put("_","ः"); 
        keyMap.put("'","उ"); 
        keyMap.put("|","ऒ"); 
        
        keyMap.put("Q","औ");
        keyMap.put("W","ठ");
        keyMap.put("E","ै");
        keyMap.put("R","ृ");    
        keyMap.put("T","थ");
        keyMap.put("Y","य़");
        keyMap.put("U","ू");
        keyMap.put("I","ी");
        keyMap.put("O","ौ");
        keyMap.put("P","फ");
        keyMap.put("{","ढ"); 
        keyMap.put("}","ऱ"); 
         
        keyMap.put("A","आ");
        keyMap.put("S","श");
        keyMap.put("D","ध");
        keyMap.put("F","अ");    
        keyMap.put("G","घ");
        keyMap.put("H","ः");
        keyMap.put("J","झ");
        keyMap.put("K","ख");
        keyMap.put("L","ळ");
        keyMap.put(":","ई");
        keyMap.put("\"","ऊ"); 
        
        keyMap.put("Z","ँ");
        keyMap.put("X","क्ष");
        keyMap.put("C","छ");
        keyMap.put("V","ऴ");    
        keyMap.put("B","भ");
        keyMap.put("N","ण");
        keyMap.put("M","ं");
      
        keyMap.put("<","ऩ");
        keyMap.put(">","़"); 
        keyMap.put("?","ऐ"); 

        }
        
  
  
    
     //--- for adding text  to textarea from external class 
   public void addTojta(String val,int caretPos)//with caret position
   {
   txtKeyword.setText(val);
   txtKeyword.requestFocus();
   txtKeyword.setCaretPosition(caretPos);
   }
     public String getjta()
   {
   return txtKeyword.getText();
   }
     
     
      public javax.swing.JTextField getContentArea()
     {
     return txtKeyword;
     }
     
    
    private void convertToHindi(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_convertToHindi
     // javax.swing.JOptionPane.showMessageDialog(null, evt.getKeyChar(), "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        try
        {
         int carPos = txtKeyword.getCaretPosition();
          String content = txtKeyword.getText();
         String typedKey;
        String hindiChar;
        typedKey = String.valueOf(evt.getKeyChar());
       // javax.swing.JOptionPane.showMessageDialog(null, typedKey, "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);   
        if(keyMap.containsKey(typedKey))
        {
    this.MapNotExists = false;
        // jTextField1.setText(String.valueOf(content.length()));
          hindiChar = keyMap.get(typedKey);
         //  javax.swing.JOptionPane.showMessageDialog(null, hindiChar+keyMap.get(typedKey), "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE); 
           
           txtKeyword.setText(new StringBuffer(content).insert(carPos, hindiChar).toString());
           txtKeyword.setCaretPosition(carPos+1);
           //jTextField1.setText(new StringBuffer(content).insert(carPos, hindiChar).toString());
//javax.swing.JOptionPane.showMessageDialog(null,txtKeyword.getText() , "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);
           evt.consume();//--stop default operation
        }
        else
        {
        this.MapNotExists = true;
        }
        }
        catch(Exception exe)
        {
       System.out.println(exe.getMessage());
        }   // TODO add your handling code here:
    }//GEN-LAST:event_convertToHindi

    private void preventDefault(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_preventDefault
          // TODO add your handling code here:
        if(this.MapNotExists == false)
        {
          evt.consume();
        }
    }//GEN-LAST:event_preventDefault

    private void transcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcBtnActionPerformed
        // TODO add your handling code here:
        //----temporary code--//
        //processed word--
        
        
        //vClient11.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), "s d s d d");
                   
                   
                    
                          //System.out.println("genrerate transcpt"+trn1);
        
        System.out.println(this.txtLang.getText());
        if (this.txtLang.getText().equals("English")){
            
                 if(txtKeyword.getText().equals(""))
                 {
                     
                     System.out.println("Enter a valid word");
                     
                 }
                  System.out.println("english selected");
                  
                  // get pronunciationfrom server
                   VrasiClientKWS vClient11=new VrasiClientKWS() ;
                 String trn1= vClient11.generateIndianEnglishDic(txtKeyword.getText());
                
                 txtTransc.setText(trn1);
                 // code take pronouciationfrom client
                 /* 
                  IndianEnglish IndEngTrans=new IndianEnglish();      
                  txtTransc.setText(IndEngTrans.getTranscription(txtKeyword.getText()));   
                  
                 */
                  
        }
        else{
        Hindiparsing hp = new Hindiparsing();
        String text=txtKeyword.getText();
        String transcrip="";
        String[] word=text.split("-");
        for(String parts:word){
            transcrip=transcrip+hp.deleteSchwa(parts);
        }
       txtTransc.setText(hp.deleteSchwa(transcrip));                         // Schwa deletion algorithm called here
       
       String temptext=txtTransc.getText();  //temptext stores the transcripted string of the hindi script using schwa deletion algorithm.
       txtTransc.setText(temptext.trim());
       indianTranscr="";                        // indianTranscr will give the reduced phone set transcription, which will be updated inthe kws_dict.txt in the server.
                        
                       
                        String [] transcript = temptext.split(" ");
                        String [] transcript1= temptext.split(" ");;
                        int i=0;
                        
                       
                        for (i=0;i<transcript.length;i++){
                            
                            
                              
                           if (transcript[i].equals("a")){
                              // System.out.println("me works"+i);
                                transcript1[i]="a";                                                    
                           }
                           if (transcript[i].equals("aa")){
                                transcript1[i]="a";                                                    
                           }
                           if (transcript[i].equals("ax")){
                                transcript1[i]="a";                                                    
                           }
                            if (transcript[i].equals("i")){
                                transcript1[i]="i";                                                    
                           }
                           if (transcript[i].equals("ii")){
                                transcript1[i]="i";                                                    
                           }
                           if (transcript[i].equals("u")){
                                transcript1[i]="u";                                                    
                           }
                           if (transcript[i].equals("uu")){
                                transcript1[i]="u";                                                    
                           }
                           if (transcript[i].equals("rrq")){
                                transcript1[i]="r";                                                    
                           }
                           if (transcript[i].equals("ee")){
                                transcript1[i]="e";                                                    
                           }
                           if (transcript[i].equals("ae")){
                                transcript1[i]="e";                                                    
                           }
                           if (transcript[i].equals("ei")){
                                transcript1[i]="e";                                                    
                           }
                           if (transcript[i].equals("o")){
                                transcript1[i]="o";                                                    
                           }
                           if (transcript[i].equals("ou")){
                                transcript1[i]="o";                                                    
                           }
                           if (transcript[i].equals("k")){
                                transcript1[i]="k";                                                    
                           }
                           if (transcript[i].equals("kh")){
                                transcript1[i]="k";                                                    
                           }
                           if (transcript[i].equals("g")){
                                transcript1[i]="g";                                                    
                           }
                           if (transcript[i].equals("gh")){
                                transcript1[i]="g";                                                    
                           }
                           if (transcript[i].equals("ng")){
                                transcript1[i]="n";                                                    
                           }
                           if (transcript[i].equals("c")){
                                transcript1[i]="ch";                                                    
                           }
                           if (transcript[i].equals("ch")){
                                transcript1[i]="ch";                                                    
                           }
                           if (transcript[i].equals("j")){
                                transcript1[i]="j";                                                    
                           }
                           if (transcript[i].equals("jh")){
                                transcript1[i]="j";                                                    
                           }
                           if (transcript[i].equals("nj")){
                                transcript1[i]="n";                                                    
                           }
                           if (transcript[i].equals("tx")){
                                transcript1[i]="t";                                                    
                           }
                           if (transcript[i].equals("txh")){
                                transcript1[i]="t";                                                    
                           }
                           if (transcript[i].equals("dx")){
                                transcript1[i]="d";                                                    
                           }
                           if (transcript[i].equals("dxh")){
                                transcript1[i]="d";                                                    
                           }
                           if (transcript[i].equals("nx")){
                                transcript1[i]="n";                                                    
                           }
                           if (transcript[i].equals("t")){
                                transcript1[i]="t";                                                    
                           }
                           if (transcript[i].equals("th")){
                                transcript1[i]="t";                                                    
                           }
                           if (transcript[i].equals("d")){
                                transcript1[i]="d";                                                    
                           }
                           if (transcript[i].equals("dh")){
                                transcript1[i]="d";                                                    
                           }
                           if (transcript[i].equals("n")){
                                transcript1[i]="n";                                                    
                           }
                           if (transcript[i].equals("p")){
                                transcript1[i]="p";                                                    
                           }
                           if (transcript[i].equals("ph")){
                                transcript1[i]="p";                                                    
                           }
                           if (transcript[i].equals("b")){
                                transcript1[i]="b";                                                    
                           }
                           if (transcript[i].equals("bh")){
                                transcript1[i]="b";                                                    
                           }
                            if (transcript[i].equals("m")){
                                transcript1[i]="m";                                                    
                           }
                             if (transcript[i].equals("y")){
                                transcript1[i]="y";                                                    
                           }
                              if (transcript[i].equals("r")){
                                transcript1[i]="r";                                                    
                           }
                              
                                 if (transcript[i].equals("l")){
                                transcript1[i]="l";          
                                 }
                              if (transcript[i].equals("w")){
                                transcript1[i]="w";          
                                 }
                              if (transcript[i].equals("sh")){
                                transcript1[i]="s";          
                                 }
                              if (transcript[i].equals("sx")){
                                transcript1[i]="s";          
                                 }
                             if (transcript[i].equals("s")){
                                transcript1[i]="s";          
                                 }
                              if (transcript[i].equals("h")){
                                transcript1[i]="h";          
                                 }
                                if (transcript[i].equals("kq")){
                                transcript1[i]="k";          
                                 }
                                 if (transcript[i].equals("khq")){
                                transcript1[i]="k";          
                                 }
                                  if (transcript[i].equals("gq"))
                                  {
                                transcript1[i]="g";          
                                 }
                                    
                                  
                        }
                        
                        
                        for (i=0;i<transcript1.length;i++){
                            
                            indianTranscr=indianTranscr+ " "+ transcript1[i];
                            
                        }
                      //  jTextField1.setText(indianTranscr.trim());
                        System.out.println("****************"+indianTranscr.trim());

        }
        
        //generate transcription here
    }//GEN-LAST:event_transcBtnActionPerformed

    private void showHelp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showHelp
        // TODO add your handling code here:
      KeyboardHelp kh = new KeyboardHelp("Help");  
      kh.setVisible(true);
    }//GEN-LAST:event_showHelp

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        HindiKyb hk =  HindiKyb.getInstance(this);
        // this.add(hk);

        hk.setVisible(true);

        txtKeyword.requestFocus();
        txtKeyword.setFont(new Font("Serif", Font.PLAIN, 13));

    }//GEN-LAST:event_jButton2MouseClicked

    private void changeKybType(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changeKybType
        // TODO add your handling code here:
        HindiKyb hk =  HindiKyb.getInstance(this);
        // boolean IshkVisible = hk.isVisible();
        if(kybSelector.getSelectedItem().toString().trim()=="Inscript")
        {
            setKeyMapHindi();
            hk.setInscriptKey();
        }
        else
        {
            setPhoneticKeyMapHindi();

            hk.setPhoneticKey();
        }

        //   hk.setVisible(IshkVisible);

        txtKeyword.requestFocus();
    }//GEN-LAST:event_changeKybType
  //------------methods for hindi typing ends ----------------------------//
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel kybOptinsHolder;
    private javax.swing.JComboBox kybSelector;
    private javax.swing.JButton transcBtn;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtLang;
    private javax.swing.JTextField txtTransc;
    // End of variables declaration//GEN-END:variables

//---for mapping keys to hindi   characters
private Map<String,String> keyMap =  new HashMap<String,String>();
private FileWriter fw;
private  boolean MapNotExists = false;//---if not available in mapping   
private String fileName;

}
