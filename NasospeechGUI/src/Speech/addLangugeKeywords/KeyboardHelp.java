/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.addLangugeKeywords;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import javax.swing.border.EmptyBorder;
/**
 *
 * @author SWN TATA PWR PC3
 */
public class KeyboardHelp extends javax.swing.JFrame {

    /**
     * Creates new form KeyboardHelp
     */
    public KeyboardHelp(String fName) {
          
        initComponents();
         
       this.setTitle(fName);
    
    // Create the StyleContext, the document and add to pane
    StyleContext sc = new StyleContext();
    final DefaultStyledDocument doc = new DefaultStyledDocument(sc);
  helpPane.setDocument(doc);

helpPane.setBorder(new EmptyBorder(10,25,0,0));//for padding
  // Create and add the style
    final Style heading2Style = sc.addStyle("Heading2", null);
    heading2Style.addAttribute(StyleConstants.FontSize, new Integer(16));
    heading2Style.addAttribute(StyleConstants.FontFamily, "Tahoma");
    heading2Style.addAttribute(StyleConstants.Bold, new Boolean(true));
 // heading2Style.addAttribute(StyleConstants.LineSpacing, new Float(2)); 
   
 try {
            // Add the text to the document
            doc.insertString(0, text, null);

            
            // Finally, apply the style to the heading
            doc.setParagraphAttributes(0, 1, heading2Style, false);

            int pos = doc.getLength();
             // Add the text2 to the document
            doc.insertString(pos, text2, null);

            
            // Finally, apply the style to the heading
            doc.setParagraphAttributes(pos, 1, heading2Style, false);
            
            
          } catch (BadLocationException e) {
          }
  
helpPane.setCaretPosition(0);//to scroll to top when first appears
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        helpPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        helpPane.setEditable(false);
        helpPane.setBorder(null);
        helpPane.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        helpPane.setMargin(new java.awt.Insets(50, 50, 50, 50));
        jScrollPane1.setViewportView(helpPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeyboardHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeyboardHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeyboardHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeyboardHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeyboardHelp("Help").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane helpPane;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

 public static final String text = " Keymapping for hindi typing for inscript keyboard \n\n"
         +"Mapping of the hindi characters to hardware keyboard are as follows: - \n\n1.  ` -  '"+ "\n2.  1 - १\n3.  2 - २\n4.  3 – ३\n5.  4 – ४\n6.  5 – ५\n7.  6 – ६\n8.  7 – ७\n9.  8 – ८\n10.  9 – ९\n11.  0 – ०\n12.  = - ृ\n13.  \\ - ॉ\n14.  q - ौ \n15.  w – ै\n16.  e – ा\n17.  r -  ी\n18.  t -  ू\n19.  y - ब \n20.  u -  ह\n21.  i -  ग\n22.  o -  द\n23.  p -  ज\n24.  [ -  ड\n25.  ] - ़ \n26.  { –ढ \n27.  } - ञ \n28.  a - ो \n29.  s – े\n30.  d – ्\n31.  f -  ि\n32.  g -  ु\n33.  h - प \n34.  j -  र\n35.  k -  क\n36.  l -  त\n37.  ; -  च\n38.  ‘ -  ट\n39.  x - ं \n40.  c –म\n41.  v – न\n42.  b – व\n43.  n – ल\n44.  m – स\n45.  / - य\n46.  Q - औ \n47.  W - ऐ \n48.  E - आ \n49.  R - ई \n50.  T - ऊ \n51.  Y - भ \n52.  U – ङ\n53.  I -  घ\n54.  O-  ध\n55. P -  झ\n56.  A - ओ \n57.  S - ए \n58.  D - अ \n59.  F - इ \n60.  G - उ \n61.  H - फ \n62.  J – ऱ\n63.  K -  ख\n64.  L-  थ\n65. SHIFT+ ; -  छ\n66. SHIFT+ ‘ – ठ\n67.  X – ँ\n68.  C -  ण   \n69.  N -  ळ \n70.  M – श\n71. SHIFT+ , -  ष \n72. SHIFT+ . - ।\n73.  ! - ऍ \n74.  @ - ॅ \n75.  # – ्\n76.  $ – र्\n77.  % -  ज्ञ\n78.  ^ – त्र\n79.  & - क्ष \n80.  * - श्र \n81.  | - ऑ\n\n\n";

  public static final String text2 = " Keymapping for hindi typing for phonetic keyboard \n\n"
          + "Mapping of the hindi characters to hardware keyboard are as follows: - \n\n1.  F – अ\n2.  A - आ\n3.  ; - इ\n4.  : - ई\n5.  ‘ – उ\n6.  “ – ऊ\n7.  / - ए\n8.  ? – ऐ\n9.  ! – ऍ\n10.  ~ - ऎ\n11.  q – ओ\n12.  Q – औ\n13.  # - ऑ\n14.  | - ऒ\n15.  FM – अं\n16.  FH – अः\n17.  ] – ऋ\n18.  k - क\t\n19.  K - ख\t\n20.  g - ग\t\n21.  G - घ\t\n22.  z - ङ\n23.  c - च\t\n24.  C - छ\t\n25.  j - ज\t\n26.  J- झ\t\n27.  % - ञ\n28.  w - ट\t\n29.  W - ठ\t\n30.  [ - ड\t\n31.  { - ढ\t\n32.  N - ण\n33.  t - त\t\n34.  T - थ\t\n35.  d - द\t\n36.  D - ध\t\n37.  n - न\n38.  p - प\t\n39.  P - फ\t\n40.  b - ब\t\n41.  B - भ\t\n42.  m – म\n43.  y - य\t\n44.  r - र\t\n45.  l - ल\t\n46.  v - व\t\n47.  S - श\t\n48.  x - ष\t\n49.  s - स\t\n50.  h - ह\t\n51.  X - क्ष\t\n52.  tfr - त्र\t\n53.  ^ - ज्ञ\t\n54.  * - श्र\t\n55.  SR - शृ\t\n56.  [> - ड़\t\n57.  {> - ढ़\t\n58.  L - ळ\n59.  < - ऩ\n60.  Y - य़\t\n61.  } - ऱ\t\n62.  V - ऴ\t\n63.  a - ा\t\n64.  i - ि\t\n65.  I - ी\t\n66.  u - ु\t\n67.  U - ू\t\n68.  e – े\n69.  E - ै\t\n70.  @ - ॅ\t\n71.  o or \\  - ो\t\n72.  O - ौ\n73.  $ - ॉ\t\n74.  M – ं\n75.  Z – ँ\n76.  H – ः\n77.  f – ्\n78.  R – ृ\n79.  > - ़\n80.  . - |\n81.  1 - १\n82.  2 - २\n83.  3 – ३\n84.  4 – ४\n85.  5 – ५\n86.  6 – ६\n87.  7 – ७\n88.  8 – ८\n89.  9 – ९\n90.  0 – ०\n";
 
}
