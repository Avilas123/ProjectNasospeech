/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.workspace;

import Speech.annotations.InsertAnnotation;
import Speech.annotations.UpdateAnnotation;
import Speech.gui.MainFrame;
import Speech.gui.SubFunctionInternalFrame;
import Speech.rmi.VrasiClientSID;
import java.awt.Dimension;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tatapower SED
 *
 */
public class WorkspacePanel extends javax.swing.JPanel {

    /**
     * Creates new form WorkspacePanel
     */
    private String filepath;
    private MainFrame mframe;
    private String hash_value;
    private DisplayTranferProgressBar displaypdspro;
    public DoTransferProcess pdsProcess;
    public String threshold;
    private SubFunctionInternalFrame subInternalFrame;
    private boolean closed;

    public WorkspacePanel(String filepath, MainFrame mframe, String hashvalue, SubFunctionInternalFrame subInternalFrame, boolean closed) {

        this.filepath = filepath;
        this.mframe = mframe;
        this.hash_value = hashvalue;
        this.subInternalFrame = subInternalFrame;
        this.closed = closed;
        initComponents();
        this.setPreferredSize(new Dimension(300, 300));
        try {
            File tfile = new File(filepath);
            if (tfile.exists()) {
                String tfileName = tfile.getName().toLowerCase();
                jfilename.setText(tfileName.substring(0, tfileName.indexOf(".wav")));
            }
        } catch (Exception er) {
            Logger.getLogger(WorkspacePanel.class.getName()).log(Level.SEVERE, null, er);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jfilename = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel2.setText("File move to");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Location", "PDS", "SID", "PRS_KWS/ASSAMESE", "PRS_KWS/ENGLISH", "PRS_KWS/HINDI", "PRS_KWS/TELUGU", " " }));

        jButton1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel3.setText("File Name");

        jButton2.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jfilename)
                    .addComponent(jComboBox1, 0, 186, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jfilename, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (jComboBox1.getSelectedIndex() == 0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Select location ");
                return;
            }

            if (jfilename.getText().isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(null, "Enter file name");
                return;
            }

            try {

                displaypdspro = new DisplayTranferProgressBar();
                pdsProcess = new DoTransferProcess();
                displaypdspro.start();
                pdsProcess.start();
                subInternalFrame.dispose();
            } catch (Exception er) {
                Logger.getLogger(WorkspacePanel.class.getName()).log(Level.SEVERE, null, er);
            }



        } catch (Exception er) {
            Logger.getLogger(WorkspacePanel.class.getName()).log(Level.SEVERE, null, er);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        subInternalFrame.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jfilename;
    // End of variables declaration//GEN-END:variables

    public class DoTransferProcess implements Runnable {

        private Thread thread = null;
        long start = System.currentTimeMillis();

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {

            try {

                String location = jComboBox1.getSelectedItem().toString().trim();
                String fileName = jfilename.getText().trim();
                fileName = fileName.replace(".wav", "");
                fileName = fileName.replace(".WAV", "");
                fileName = fileName + ".wav";
                new VrasiClientSID().sentToRemote(location, filepath, fileName);
                new InsertAnnotation(mframe.getConn()).insertAnnotaionFilePostion(hash_value, "server");
                mframe.fileBrowser("");

                if (displaypdspro != null) {
                    displaypdspro.stop();
                }
            } catch (Exception er) {
                Logger.getLogger(WorkspacePanel.class.getName()).log(Level.SEVERE, null, er);
            } finally {
                if (closed) {
                    try {
                        new UpdateAnnotation(mframe.getConn()).deleteTempFileAnnotation();
                        System.exit(0);
                    } catch (Exception er) {
                        System.exit(0);
                    }
                }
            }

            mframe.rPdsStatus = false;

            if (mframe.rKwsStatus || mframe.rPdsStatus || mframe.rPhoneStatus || mframe.rSidStatus) {
                mframe.jProgressToolBar.setVisible(true);
            } else {
                mframe.jProgressToolBar.setVisible(false);
            }

            pdsProcess = null;

            double elapsed = (System.currentTimeMillis() - start) / 1000.0;
            System.out.println("Execution Time: " + elapsed);
            String exTime = String.valueOf(elapsed);
            mframe.pWave.setExeutionTime("Exec Time: " + exTime + " Sec");
        }
    }

    public class DisplayTranferProgressBar implements Runnable {

        private Thread thread = null;

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {
            try {
                mframe.jProgressToolBar.setVisible(true);
                mframe.pdsButtonStatus(true);
                while (thread != null) {
                    for (int i = 0; i <= 100; i = i + 3) {
                        if (thread == null) {
                            break;
                        }

                        //Progressively increment variable i
                        mframe.jpdsProgressBar.setValue(i);
                        mframe.jpdsProgressBar.repaint(); //Refresh graphics
                        try {
                            Thread.sleep(50);
                        } //Sleep 50 milliseconds
                        catch (InterruptedException err) {
                        }
                    }
                }
                mframe.pdsButtonStatus(false);
                mframe.jpdsProgressBar.setValue(0);
                mframe.jpdsProgressBar.repaint();
            } catch (Exception er) {
                System.err.println(er);
            }
            displaypdspro = null;

        }
    }
}
