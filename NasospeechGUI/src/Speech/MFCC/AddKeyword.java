/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.MFCC;

import Speech.phoneme.*;
import Speech.common.StreamConverter;
import Speech.gui.MainFrame;
import Speech.settings.LanguageEntry;
import Speech.sqlconnection.MysqlConnect;
import com.mysql.jdbc.Connection;
import java.awt.Dimension;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import Speech.rmi.VrasiClientKWS;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Lok Bahadur Chetri<lok.b.chetri@gmail.com>
 * modified codes have been added on 8/8/2014 to check if keyword already 
 * exists before inserting into database
 */
public class AddKeyword extends javax.swing.JPanel {
private MainFrame mframe;
private KeyWordBuilder keyBuilder;
AudioInputStream audioInputStream;
Connection conn;
private ResultSet rs = null, rs_search=null; //rs_search newly added to search for a keyword
private PreparedStatement pst = null;
Statement stmt_search=null;//stmt_search newly added to search for a keyword, import also added
String sql_search="", search_result="";//sql_search and search_result newly added to search for a keyword
String q_add="",tmp="";


    /**
     * Creates new form AddKeyword
     */
    public AddKeyword(String lang, MainFrame mframe, int startPos, int endPos, String filename, AudioInputStream audioStream) {
        initComponents();
        try {
            initComponents();
            
            conn = (Connection) new MysqlConnect().getDBConnection();
        } catch (Exception ex) {
            Logger.getLogger(LanguageEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

        //lang=lang.toLowerCase();
        // invoke pr and get trans
        keyBuilder = new KeyWordBuilder();
        //boolean r= x.setSource(fname, lang, fname, redoStack);
        //StreamConverter.streamTowavefile(filename,  audioStream);
        
        keyBuilder=new KeyWordBuilder();
        boolean result = keyBuilder.setSource(mframe.getUserID() + "phoneme" + ".wav", lang, mframe.getUserID() + "phoneme", null);

        //System.out.println(filename+" "+lang+" "+mframe.getUserID()+" " +null);
        this.setVisible(true);
        this.setSize(new Dimension(290, 490)); 
        this.txtLang.setText(lang);
        this.txtTransc.setText(displayTranscription());
        this.txtLang.setEnabled(false);
        //this.txtTransc.setEnabled(false);
        
    }
    
    
    
     public AddKeyword(String lang, MainFrame mframe) {
        initComponents();
        try {
            initComponents();
            setKeyMapHindi();
            conn = (Connection) new MysqlConnect().getDBConnection();
        } catch (Exception ex) {
            Logger.getLogger(LanguageEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

        //lang=lang.toLowerCase();
        // invoke pr and get trans
        keyBuilder = new KeyWordBuilder();
        //boolean r= x.setSource(fname, lang, fname, redoStack);
        //StreamConverter.streamTowavefile(filename,  audioStream);
        
        keyBuilder=new KeyWordBuilder();
        boolean result = keyBuilder.setSource(mframe.getUserID() + "phoneme" + ".wav", lang, mframe.getUserID() + "phoneme", null);

        //System.out.println(filename+" "+lang+" "+mframe.getUserID()+" " +null);
        this.setVisible(true);
        this.setSize(new Dimension(290, 490)); 
        this.txtLang.setText(lang);
        this.txtTransc.setText(displayTranscription());
        this.txtLang.setEnabled(false);
        //this.txtTransc.setEnabled(false);
        
    }
    
    
    
public String displayTranscription() {
        List spList = keyBuilder.keyExtract;
        if (spList == null) {
            return "Not found";
        }
        //
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < spList.size(); i++) {
            if (spList.get(i).toString().startsWith("sil")) {
                sb.append(" sil ");
            } else {
                sb.append(" "+spList.get(i).toString());
            }

        }
        return sb.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTransc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtLang = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Keyword ");

        txtKeyword.setColumns(30);
        txtKeyword.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtKeyword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                convertToHindi(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                preventDefault(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Transc.    ");

        txtTransc.setColumns(30);
        txtTransc.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtTransc.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Language     ");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "list 1", "list 2", "list 3", "list 4", "list 5" }));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("List");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Priority        ");

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "priority 1", "priority 2", "priority 3", "priority 4", "priority 5", "priority 6", "priority 7", "priority 8", "priority 9", "priority 10" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTransc, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtLang)
                                .addGap(4, 4, 4))
                            .addComponent(jComboBox1, 0, 290, Short.MAX_VALUE))))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTransc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //save the keyword and update dictionary 
        String kw=txtKeyword.getText().trim();
        String trans=txtTransc.getText().trim();
        String language=txtLang.getText().trim();
        String listname=jComboBox1.getSelectedItem().toString();
        String priority=jComboBox2.getSelectedItem().toString();
        if(kw.length()==0 || kw==null)
            JOptionPane.showMessageDialog(null, "Please enter a valid keyword","Warning",JOptionPane.WARNING_MESSAGE);
        else if (trans.length()==0 || trans==null)
            JOptionPane.showMessageDialog(null, "Transcription cannot be blank","Warning",JOptionPane.WARNING_MESSAGE);
        else
        {
            //add to database
            if(language.equals("Hindi")){
                language="Hindi_part1";
            }
            
            if(language.equals("Assamese")){
                language="Assamese_part1";
            }
           
            if(language.equals("Telugu")){
                priority=priority.replace(" ","");                                
                
            } 
            /* First check if keyword exists
             * 1. if it exists, display alert message and return
             * 2. else insert keyword to database
             */
            sql_search = "SELECT * FROM keyword_master where keyword='"+kw+"'";
            try {
                stmt_search = conn.createStatement();
                rs_search = stmt_search.executeQuery(sql_search);
                if(rs_search.next()){
                    System.out.println("Found keyword="+kw);
                    System.out.println("Keyword was not added to avoid redundant data");
                    JOptionPane.showMessageDialog(null, "This Keyword was already added!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    
                    //search_result="This Keyword was already added! Do you still want to add?";
                    //JOptionPane.showMessageDialog(null, search_result, "Information",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    //int response =  JOptionPane.showConfirmDialog(null, search_result, "Confirm Keyword Addition", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                  
                  /*If user still wants to add, do the following: add to Dictionary but not to DB*/
                  /*  if (response == JOptionPane.YES_OPTION) {
                        System.out.println("Yes button clicked");                        
                        //----- update dict
                        if(language.equals("Hindi_part1")){
                            language="Hindi";
                        }
                        if(language.equals("Assamese_part1")){
                            language="Assamese";
                        }
                        VrasiClientKWS vClient=new VrasiClientKWS() ;
                        tmp=txtTransc.getText().trim();
                        tmp=tmp.replaceAll(" ", "_").toLowerCase();
                        vClient.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), tmp);
                        //---
                        System.out.println("dictionary updated");                        
                        JOptionPane.showMessageDialog(null, "Keyword transcripion saved successfully !", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                     
                    else if (response == JOptionPane.NO_OPTION) {
                        JOptionPane.showMessageDialog(null,"Keyword not saved","Information",JOptionPane.INFORMATION_MESSAGE);
                        //System.out.println("No button clicked, Do nothing");
                    }
                    */
                }
                else{
                     /* addition of keyword with the key field */                 
                    System.out.println("Trying to add keyword="+kw);
                    q_add = "insert into keyword_master (language,keyword,listname,groupname)values('"+language+"','"+kw+"','"+listname+"','"+priority+"')";

                    try {
                        pst = conn.prepareStatement(q_add);
                        pst.execute();
                        System.out.println("Added keyword"+kw+" successfully");
                    } catch (SQLException ex) {
                        Logger.getLogger(LanguageEntry.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("There was some problem in adding="+kw);
                    }
                    //----- update dict -----------------
                    if(language.equals("Hindi_part1")){
                        language="Hindi";
                    }

                    if(language.equals("Assamese_part1")){
                        language="Assamese";
                    }

                    VrasiClientKWS vClient=new VrasiClientKWS() ;
                    tmp=txtTransc.getText().trim();
                    tmp=tmp.replaceAll(" ", "_").toLowerCase();
                    vClient.updateDictionary(txtLang.getText().trim(), txtKeyword.getText().trim(), tmp);
                    //---prompt for confirming keyword addition.
                    JOptionPane.showMessageDialog(null, "New keyword saved successfully !", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddKeyword.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }

        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    //------------methods for hindi typing starts----------------------//
      
    
        private void setKeyMapHindi()
    {
        keyMap.clear();
        
        keyMap.put("`","'");
        keyMap.put("1","१");
        keyMap.put("2","२");
        keyMap.put("3","३");    
        keyMap.put("4","४");
        keyMap.put("5","५");
        keyMap.put("6","६");
        keyMap.put("7","७");
        keyMap.put("8","८");
        keyMap.put("9","९");
        keyMap.put("0","०"); 
        keyMap.put("=","ृ"); 
        keyMap.put("\\","ॉ"); 
        
        keyMap.put("q","ौ");
        keyMap.put("w","ै");
        keyMap.put("e","ा");
        keyMap.put("r","ी");    
        keyMap.put("t","ू");
        keyMap.put("y","ब");
        keyMap.put("u","ह");
        keyMap.put("i","ग");
        keyMap.put("o","द");
        keyMap.put("p","ज");
        keyMap.put("[","ड"); 
        keyMap.put("]","़"); 
         
        keyMap.put("a","ो");
        keyMap.put("s","े");
        keyMap.put("d","्");
        keyMap.put("f","ि");    
        keyMap.put("g","ु");
        keyMap.put("h","प");
        keyMap.put("j","र");
        keyMap.put("k","क");
        keyMap.put("l","त");
        keyMap.put(";","च"); 
        keyMap.put("'","ट");
          
        keyMap.put("z","");
        keyMap.put("x","ं");
        keyMap.put("c","म");
        keyMap.put("v","न");    
        keyMap.put("b","व");
        keyMap.put("n","ल");
        keyMap.put("m","स");
      
        keyMap.put("/","य");
        
         
  
        keyMap.put("!","ऍ");
        keyMap.put("@","ॅ");
        keyMap.put("#","्");    
        keyMap.put("$","र्");
        keyMap.put("%","ज्ञ");
        keyMap.put("^","त्र");
        keyMap.put("&","क्ष");
        
        keyMap.put("*","श्र");
        
        keyMap.put("_","ः"); 
        keyMap.put("+","ऋ"); 
        keyMap.put("|","ऑ"); 
        
        keyMap.put("Q","औ");
        keyMap.put("W","ऐ");
        keyMap.put("E","आ");
        keyMap.put("R","ई");    
        keyMap.put("T","ऊ");
        keyMap.put("Y","भ");
        keyMap.put("U","ङ");
        keyMap.put("I","घ");
        keyMap.put("O","ध");
        keyMap.put("P","झ");
        keyMap.put("{","ढ"); 
        keyMap.put("}","ञ"); 
         
        keyMap.put("A","ओ");
        keyMap.put("S","ए");
        keyMap.put("D","अ");
        keyMap.put("F","इ");    
        keyMap.put("G","उ");
        keyMap.put("H","फ");
        keyMap.put("J","ऱ");
        keyMap.put("K","ख");
        keyMap.put("L","थ");
        keyMap.put(":","छ");
        keyMap.put("\"","ठ"); 
        
        keyMap.put("Z","");
        keyMap.put("X","ँ");
        keyMap.put("C","ण");
        keyMap.put("V","");    
        keyMap.put("B","");
        keyMap.put("N","ळ");
        keyMap.put("M","श");
      
        keyMap.put("<","ष");
        keyMap.put(">","|");
    
    }
      
    
        private void setPhoneticKeyMapHindi()
        {
        keyMap.clear();
        
        keyMap.put("`","ॆ");
        keyMap.put("1","१");
        keyMap.put("2","२");
        keyMap.put("3","३");    
        keyMap.put("4","४");
        keyMap.put("5","५");
        keyMap.put("6","६");
        keyMap.put("7","७");
        keyMap.put("8","८");
        keyMap.put("9","९");
        keyMap.put("0","०"); 
       // keyMap.put("=","ृ"); 
        keyMap.put("\\","ो"); 
        
        keyMap.put("q","ओ");
        keyMap.put("w","ट");
        keyMap.put("e","े");
        keyMap.put("r","र");    
        keyMap.put("t","त");
        keyMap.put("y","य");
        keyMap.put("u","ु");
        keyMap.put("i","ि");
        keyMap.put("o","ो");
        keyMap.put("p","प");
        keyMap.put("[","ड"); 
        keyMap.put("]","ऋ"); 
         
        keyMap.put("a","ा");
        keyMap.put("s","स");
        keyMap.put("d","द");
        keyMap.put("f","्");    
        keyMap.put("g","ग");
        keyMap.put("h","ह");
        keyMap.put("j","ज");
        keyMap.put("k","क");
        keyMap.put("l","ल");
        keyMap.put(";","इ"); 
        keyMap.put("'","उ");
          
        keyMap.put("z","ङ");
        keyMap.put("x","ष");
        keyMap.put("c","च");
        keyMap.put("v","व");    
        keyMap.put("b","ब");
        keyMap.put("n","न");
        keyMap.put("m","म");
        keyMap.put(".","|");
        keyMap.put("/","ए");
        
         
        keyMap.put("~","ऎ");
        keyMap.put("!","ऍ");
        keyMap.put("@","ॅ");
        keyMap.put("#","ऑ");    
        keyMap.put("$","ॉ");
        keyMap.put("%","ञ");
        keyMap.put("^","ज्ञ");
       // keyMap.put("&","क्ष");
        
        keyMap.put("*","श्र");
        
      //  keyMap.put("_","ः"); 
        keyMap.put("'","उ"); 
        keyMap.put("|","ऒ"); 
        
        keyMap.put("Q","औ");
        keyMap.put("W","ठ");
        keyMap.put("E","ै");
        keyMap.put("R","ृ");    
        keyMap.put("T","थ");
        keyMap.put("Y","य़");
        keyMap.put("U","ू");
        keyMap.put("I","ी");
        keyMap.put("O","ौ");
        keyMap.put("P","फ");
        keyMap.put("{","ढ"); 
        keyMap.put("}","ऱ"); 
         
        keyMap.put("A","आ");
        keyMap.put("S","श");
        keyMap.put("D","ध");
        keyMap.put("F","अ");    
        keyMap.put("G","घ");
        keyMap.put("H","ः");
        keyMap.put("J","झ");
        keyMap.put("K","ख");
        keyMap.put("L","ळ");
        keyMap.put(":","ई");
        keyMap.put("\"","ऊ"); 
        
        keyMap.put("Z","ँ");
        keyMap.put("X","क्ष");
        keyMap.put("C","छ");
        keyMap.put("V","ऴ");    
        keyMap.put("B","भ");
        keyMap.put("N","ण");
        keyMap.put("M","ं");
      
        keyMap.put("<","ऩ");
        keyMap.put(">","़"); 
        keyMap.put("?","ऐ"); 

        }
        

    
    
    
    private void convertToHindi(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_convertToHindi
     // javax.swing.JOptionPane.showMessageDialog(null, evt.getKeyChar(), "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        try
        {
         int carPos = txtKeyword.getCaretPosition();
          String content = txtKeyword.getText();
         String typedKey;
        String hindiChar;
        typedKey = String.valueOf(evt.getKeyChar());
       // javax.swing.JOptionPane.showMessageDialog(null, typedKey, "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);   
        if(keyMap.containsKey(typedKey))
        {
    this.MapNotExists = false;
        // jTextField1.setText(String.valueOf(content.length()));
          hindiChar = keyMap.get(typedKey);
         //  javax.swing.JOptionPane.showMessageDialog(null, hindiChar+keyMap.get(typedKey), "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE); 
           
           txtKeyword.setText(new StringBuffer(content).insert(carPos, hindiChar).toString());
           txtKeyword.setCaretPosition(carPos+1);
           //jTextField1.setText(new StringBuffer(content).insert(carPos, hindiChar).toString());
//javax.swing.JOptionPane.showMessageDialog(null,txtKeyword.getText() , "InfoBox: ", javax.swing.JOptionPane.INFORMATION_MESSAGE);
           evt.consume();//--stop default operation
        }
        else
        {
        this.MapNotExists = true;
        }
        }
        catch(Exception exe)
        {
       System.out.println(exe.getMessage());
        }   // TODO add your handling code here:
    }//GEN-LAST:event_convertToHindi

    private void preventDefault(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_preventDefault
          // TODO add your handling code here:
        if(this.MapNotExists == false)
        {
          evt.consume();
        }
    }//GEN-LAST:event_preventDefault
  //------------methods for hindi typing ends ----------------------------//
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtLang;
    private javax.swing.JTextField txtTransc;
    // End of variables declaration//GEN-END:variables

//---for mapping keys to hindi characters
private Map<String,String> keyMap =  new HashMap<String,String>();

private  boolean MapNotExists = false;//---if not available in mapping   


}
