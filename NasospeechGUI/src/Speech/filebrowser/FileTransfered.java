/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.filebrowser;

import Speech.gui.MainFrame;
import Speech.gui.SubFunctionInternalFrame;
import Speech.rmi.VrasiClientPDS;
import Speech.staticobjects.DisplayObjects;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author Tatapower SED
 *
 */
public class FileTransfered extends javax.swing.JPanel {

    /**
     * Creates new form Annotation
     */
    private MainFrame mframe;
    private int ann_startPos = 0, ann_endPos = 0;
    private ArrayList fileList;
    private SubFunctionInternalFrame subIFrame;
    private DisplayFileTransProgressBar displayFilePro;
    private DoFileTransProcess fileTranPro;

    public FileTransfered(ArrayList fileList, SubFunctionInternalFrame subIFrame, MainFrame mframe) {

        this.mframe = mframe;
        this.fileList = fileList;
        this.subIFrame = subIFrame;
        initComponents();
        screenProperties();
        displayScreen();
    }

    private FileTransfered() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        initComponents();
        screenProperties();
        displayScreen();

    }

    private void screenProperties() {
        this.setSize(new Dimension(500, 500));
        jPanel1.setPreferredSize(new Dimension(500, 500));
        jPanel1.revalidate();
        jPanel1.repaint();


    }

    private void displayScreen() {
        try {
            if (fileList == null) {
                return;
            }

            final List<TableCellEditor> editors = new ArrayList<TableCellEditor>(3);
            String[] items1 = {"PDS", "Kws - Assamese", "Kws - Hindi", "Kws - Telugu", "Kws - English"};
            JComboBox comboBox = new JComboBox(items1);
            DefaultCellEditor dce1 = new DefaultCellEditor(comboBox);
            editors.add(dce1);


            //  Create the table with default data
            Object[][] data = new Object[fileList.size()][3];
            for (int i = 0; i < fileList.size(); i++) {
                if (fileList.get(i) == null) {
                    continue;
                }
                String filePath = fileList.get(i).toString();
                File fileName = new File(filePath);
                if (fileName.exists()) {
                    data[i][0] = fileName.getAbsoluteFile();
                    data[i][1] = fileName.getName().toLowerCase();
                }
                fileName = null;
            }

            String[] columnNames = {" File Path ", " File Name ", " Location "};
            DefaultTableModel model = new DefaultTableModel(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    if (column == 0) {
                        return false;
                    } else {
                        return true;
                    }
                }
            };

            jTable1.setModel(model);

            //jTable1.getc
            // for (int i= 0; i < jTable1.getRowCount(); i++ ) {
            jTable1.getColumnModel().getColumn(2).setCellEditor(editors.get(0));

            //}
        } catch (Exception er) {
            System.err.println(er);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setToolTipText("Annotation");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(482, 280));
        jPanel1.setRequestFocusEnabled(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "File Path", "File Name", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Files are transferring to server");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
//Pre validation
        try {
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 0) != null && jTable1.getModel().getValueAt(i, 1) != null && jTable1.getModel().getValueAt(i, 2) != null) {
                    String fileName = (jTable1.getModel().getValueAt(i, 1).toString()).trim();
                    String location = (jTable1.getModel().getValueAt(i, 2).toString()).trim();
                    if (fileName.length() < 1) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Enter file name for " + jTable1.getModel().getValueAt(i, 0));
                        return;
                    }
                    if (location.length() < 1) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Enter location for " + jTable1.getModel().getValueAt(i, 0));
                        return;
                    }
                    if (fileName.indexOf(".wav") < 1) {
                        jTable1.getModel().setValueAt(fileName + ".wav", i, 1);
                    }
                    copyFile(jTable1.getModel().getValueAt(i, 0).toString().trim(), fileName);

                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "Enter file name and location");
                    return;
                }
            }


//File availablity
            FileTransferMaster fileMaster = new FileTransferMaster(mframe.getConn());
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 0) != null && jTable1.getModel().getValueAt(i, 1) != null && jTable1.getModel().getValueAt(i, 2) != null) {
                    String fileName = (jTable1.getModel().getValueAt(i, 1).toString()).trim();
                    String location = (jTable1.getModel().getValueAt(i, 2).toString()).trim();
                    if (fileMaster.isFileExists(fileName, location)) {
                        int option = JOptionPane.showConfirmDialog(this, "There is already a file " + fileName + " with the same name in this location, do you want to copy and replace ?", "Exit", JOptionPane.YES_NO_OPTION);
                        if (option == JOptionPane.NO_OPTION) {
                            return;
                        }
                    }

                }
            }
            fileMaster = null;
            displayFilePro = new DisplayFileTransProgressBar();
            fileTranPro = new DoFileTransProcess();
            displayFilePro.start();
            fileTranPro.start();
            //Insert and load file

        } catch (Exception er) {
            System.err.println(er);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DisplayObjects.setIsFileBrowser(false);
        DisplayObjects.setFileBrowser(null);
        subIFrame.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void copyFile(String trim, String fileName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public class DisplayFileTransProgressBar implements Runnable {

        private Thread thread = null;

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {
            try {

                while (thread != null) {
                    for (int i = 0; i <= 100; i++) {
                        if (thread == null) {
                            break;
                        }

                        //Progressively increment variable i
                        jProgressBar1.setValue(i);
                        jProgressBar1.repaint(); //Refresh graphics
                        try {
                            Thread.sleep(100);
                        } //Sleep 50 milliseconds
                        catch (InterruptedException err) {
                        }
                    }
                }

                jProgressBar1.setValue(0);
                jProgressBar1.repaint();
            } catch (Exception er) {
                System.err.println(er);
            }

        }
    }

    public class DoFileTransProcess implements Runnable {

        private Thread thread = null;

        public void start() {
            thread = new Thread(this);
            thread.setName("ProgressBar");
            thread.start();
        }

        public void stop() {
            if (thread != null) {
                thread.interrupt();
            }
            thread = null;
        }

        public void run() {

            try {

                FileTransferMaster fileMaster = new FileTransferMaster(mframe.getConn());
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    if (jTable1.getModel().getValueAt(i, 0) != null && jTable1.getModel().getValueAt(i, 1) != null && jTable1.getModel().getValueAt(i, 2) != null) {
                        String filePath = (jTable1.getModel().getValueAt(i, 0).toString()).trim();
                        String fileName = (jTable1.getModel().getValueAt(i, 1).toString()).trim();
                        String location = (jTable1.getModel().getValueAt(i, 2).toString()).trim();
                        boolean sendStatus = false;
                        thread.sleep(500);
                        switch ((location.toLowerCase())) {
                            case "pds":
                                VrasiClientPDS vrasPds = new VrasiClientPDS();
                                sendStatus = vrasPds.sentToRemote("pds", fileName, filePath);
                                break;
                            case "kws - assamese":
                                vrasPds = new VrasiClientPDS();
                                sendStatus = vrasPds.sentToRemote("kws/assamese", fileName, filePath);
                                break;
                            case "kws - hindi":
                                vrasPds = new VrasiClientPDS();
                                sendStatus = vrasPds.sentToRemote("kws/hindi", fileName, filePath);
                                break;

                            case "kws - telugu":
                                vrasPds = new VrasiClientPDS();
                                sendStatus = vrasPds.sentToRemote("kws/telugu", fileName, filePath);
                                break;

                            case "kws - english":
                                vrasPds = new VrasiClientPDS();
                                sendStatus = vrasPds.sentToRemote("kws/english", fileName, filePath);
                                break;
                            default:
                                break;

                        }
                        if (sendStatus) {
                            fileMaster.insertfileInfo(fileName, location, mframe.getUserID());
                        }

                    }
                }
                fileMaster = null;
                displayFilePro.stop();
                try {
                    File ripfile = new File("conf/ripped");
                    if (ripfile.exists()) {
                        deleteDir(ripfile);
                    }
                } catch (Exception er) {
                    System.out.println(er);
                }
                mframe.fileBrowser("");

                javax.swing.JOptionPane.showMessageDialog(null, "Saved Successfully.....");

            } catch (Exception er) {
                System.err.println(er);
            }
        }

        private void deleteDir(File file) {
            try {
                if (file.isDirectory()) {

                    //directory is empty, then delete it
                    if (file.list().length == 0) {

                        file.delete();
                        System.out.println("Directory is deleted : "
                                + file.getAbsolutePath());

                    } else {

                        //list all the directory contents
                        String files[] = file.list();

                        for (String temp : files) {
                            //construct the file structure
                            File fileDelete = new File(file, temp);

                            //recursive delete
                            deleteDir(fileDelete);
                        }

                        //check the directory again, if empty then delete it
                        if (file.list().length == 0) {
                            file.delete();
                            System.out.println("Directory is deleted : "
                                    + file.getAbsolutePath());
                        }
                    }

                } else {
                    //if file, then delete it
                    file.delete();
                    System.out.println("File is deleted : " + file.getAbsolutePath());
                }
            } catch (Exception er) {
                System.err.println(er);
            }
        }
    }

    public static void main(String[] args) {
        JFrame f = new JFrame();
        FileTransfered ft = new FileTransfered();
        f.setContentPane(ft);
        f.setVisible(true);
    }
}
