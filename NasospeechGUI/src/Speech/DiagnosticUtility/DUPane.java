/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Speech.DiagnosticUtility;

import Speech.common.StreamConverter;
import Speech.gui.MainFrame;
import Speech.rmi.VrasiClientKWS;
import Speech.rmi.VrasiClientSID;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JCheckBox;
import javax.swing.JLabel;

/**
 *
 *  @author Tatapower SED
 *  
 */
public class DUPane extends javax.swing.JPanel {

    MainFrame mframe;

    /**
     * Creates new form DUPane
     */
    public DUPane(MainFrame mframe) {
        this.mframe = mframe;
        initComponents();
        this.setSize(new Dimension(800, 400));
        // this.setBounds(0, 0, 590, 450);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jkwsPhome = new javax.swing.JCheckBox();
        jphoneme = new javax.swing.JCheckBox();
        jpds = new javax.swing.JCheckBox();
        jsid = new javax.swing.JCheckBox();
        jkwsWord = new javax.swing.JCheckBox();
        kwsPhoneme = new javax.swing.JLabel();
        phonemeRec = new javax.swing.JLabel();
        pds = new javax.swing.JLabel();
        sid = new javax.swing.JLabel();
        kwsWord = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jstartBut = new javax.swing.JButton();

        setLayout(null);

        jLabel1.setText("KeyWord Spotting System Word Based");
        add(jLabel1);
        jLabel1.setBounds(20, 60, 370, 40);

        jLabel2.setText("Phoneme Recognition");
        add(jLabel2);
        jLabel2.setBounds(20, 160, 310, 40);

        jLabel3.setText("Processing of Degraded System");
        add(jLabel3);
        jLabel3.setBounds(20, 210, 272, 40);

        jLabel4.setText("Speaker Identification System");
        add(jLabel4);
        jLabel4.setBounds(20, 260, 272, 40);
        add(jSeparator1);
        jSeparator1.setBounds(0, 36, 690, 6);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator2);
        jSeparator2.setBounds(10, 40, 10, 270);

        jLabel5.setText("KeyWord Spotting System Phoneme Based");
        add(jLabel5);
        jLabel5.setBounds(20, 110, 390, 40);
        add(jSeparator3);
        jSeparator3.setBounds(-10, 310, 700, 10);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator4);
        jSeparator4.setBounds(460, 40, 10, 270);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator5);
        jSeparator5.setBounds(430, 40, 10, 270);

        jkwsPhome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jkwsPhomeActionPerformed(evt);
            }
        });
        add(jkwsPhome);
        jkwsPhome.setBounds(440, 120, 20, 24);

        jphoneme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jphonemeActionPerformed(evt);
            }
        });
        add(jphoneme);
        jphoneme.setBounds(440, 170, 20, 24);

        jpds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpdsActionPerformed(evt);
            }
        });
        add(jpds);
        jpds.setBounds(440, 220, 20, 24);

        jsid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsidActionPerformed(evt);
            }
        });
        add(jsid);
        jsid.setBounds(440, 270, 20, 24);

        jkwsWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jkwsWordActionPerformed(evt);
            }
        });
        add(jkwsWord);
        jkwsWord.setBounds(440, 70, 20, 24);

        kwsPhoneme.setText("Select For Processing");
        add(kwsPhoneme);
        kwsPhoneme.setBounds(480, 120, 170, 30);

        phonemeRec.setText("Select For Processing");
        add(phonemeRec);
        phonemeRec.setBounds(480, 170, 170, 30);

        pds.setText("Select For Processing");
        add(pds);
        pds.setBounds(480, 220, 170, 30);

        sid.setText("Select For Processing");
        add(sid);
        sid.setBounds(480, 270, 180, 30);

        kwsWord.setText("Select For Processing");
        add(kwsWord);
        kwsWord.setBounds(480, 67, 180, 30);

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(570, 330, 110, 30);

        jstartBut.setText("Start ");
        jstartBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstartButActionPerformed(evt);
            }
        });
        add(jstartBut);
        jstartBut.setBounds(450, 330, 110, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jstartButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstartButActionPerformed

        Thread thread = new Thread() {
            public void run() {
                comSetEnable(false);


                File du = new File("conf/buf/DU.wav");
                if (!du.exists()) {
                    javax.swing.JOptionPane.showMessageDialog(mframe, "Unable to test");
                    return;
                }
                try {
                    StreamConverter.streamTowavefile(mframe.getUserID() + ".wav", AudioSystem.getAudioInputStream(du));
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(DUPane.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DUPane.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (jkwsWord.isSelected()) {
                    setText(kwsWord, "Processing Started");
                    try {
                        //new KeywordExe(inputWave, language);

                        VrasiClientKWS vClient = new VrasiClientKWS();

                        if (!vClient.setRemoteConnection(mframe.getUserID(), mframe.getUserID() + ".wav")) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Server could not find due to missing some resource");
                            kwsWord.setText("Not Working Porperly");
                            colorStatus(kwsWord, Color.red);
                            return;
                        }
                        ArrayList selectedKeyword = new ArrayList();
                        selectedKeyword.add("pokmou");
                        selectedKeyword.add("babori");
                        selectedKeyword.add("chandubilake");
                        selectedKeyword.add("apahita");
                        List<String> keyRes = vClient.processKwsReg("Assamese_part2", selectedKeyword);
                        if (keyRes.isEmpty()) {
                            kwsWord.setText("Not Working Porperly");
                            colorStatus(kwsWord, Color.red);

                        } else {
                            kwsWord.setText("Working Porperly");
                            colorStatus(kwsWord, Color.black);

                        }

                    } catch (Exception er) {
                        System.out.println(er);
                        kwsWord.setText("Not Working Porperly");
                        colorStatus(kwsWord, Color.red);
                    }
                }
                if (jkwsPhome.isSelected()) {
                    setText(kwsPhoneme, "Processing Started");

                    try {
                        //new KeywordExe(inputWave, language);

                        VrasiClientKWS vClient = new VrasiClientKWS();

                        if (!vClient.setRemoteConnection(mframe.getUserID(), mframe.getUserID() + ".wav")) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Server could not find due to missing some resource");
                            kwsPhoneme.setText("Not Working Porperly");
                            colorStatus(kwsPhoneme, Color.red);
                            return;

                        }
                        ArrayList selectedKeyword = new ArrayList();
                        selectedKeyword.add("pokmou");
                        selectedKeyword.add("moricha");
                        selectedKeyword.add("paleng");
                        selectedKeyword.add("upadex");


                        List<String> keyRes = vClient.processKwsReg("Assamese_part1", selectedKeyword);


                        if (keyRes.isEmpty()) {
                            kwsPhoneme.setText("Not Working Porperly");
                            colorStatus(kwsPhoneme, Color.red);

                        } else {
                            kwsPhoneme.setText("Working Porperly");
                            colorStatus(kwsPhoneme, Color.black);
                        }

                    } catch (Exception er) {
                        System.out.println(er);
                        kwsPhoneme.setText("Not Working Porperly");
                        colorStatus(kwsPhoneme, Color.red);

                    }


                }

                if (jphoneme.isSelected()) {
//            jLabel7.setText("Processing Started");
                    int x = setText(phonemeRec, "Processing Started");
                    if (x == 0) {

                        try {
                            //new KeywordExe(inputWave, language);

                            VrasiClientKWS vClient = new VrasiClientKWS();

                            if (!vClient.setRemoteConnection(mframe.getUserID(), mframe.getUserID() + ".wav")) {
                                javax.swing.JOptionPane.showMessageDialog(null, "Server could not find due to missing some resource");
                                phonemeRec.setText("Not Working Porperly");
                                colorStatus(phonemeRec, Color.red);
                                return;
                            }


                            List<String> keyRes = vClient.processPhoneReg("assamese");


                            if (keyRes.isEmpty()) {
                                phonemeRec.setText("Not Working Porperly");
                                colorStatus(phonemeRec, Color.red);

                            } else {
                                phonemeRec.setText("Working Porperly");
                                colorStatus(phonemeRec, Color.black);
                            }

                        } catch (Exception er) {
                            System.out.println(er);
                            phonemeRec.setText("Not Working Porperly");
                            colorStatus(phonemeRec, Color.red);
                        }
                    }

                }

                if (jpds.isSelected()) {
                    pds.setText("Processing Started");
                    try {
                        //new KeywordExe(inputWave, language);

                        VrasiClientKWS vClient = new VrasiClientKWS();

                        if (!vClient.setRemoteConnection(mframe.getUserID(), mframe.getUserID() + ".wav")) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Server could not find due to missing some resource");
                            pds.setText("Not Working Porperly");
                            colorStatus(pds, Color.red);
                            return;
                        }
                        ArrayList annotation = new ArrayList();

                        List<String> keyRes = vClient.processPDS("Combined", annotation, "0.9");


                        if (keyRes.isEmpty()) {
                            pds.setText("Not Working Porperly");
                            colorStatus(pds, Color.red);

                        } else {
                            pds.setText("Working Porperly");
                            colorStatus(pds, Color.black);
                        }

                    } catch (Exception er) {
                        System.out.println(er);
                        pds.setText("Not Working Porperly");
                        colorStatus(pds, Color.red);
                    }

                }

                if (jsid.isSelected()) {
                    sid.setText("Processing Started");

                    try {
                        //new KeywordExe(inputWave, language);

                        VrasiClientSID vClient = new VrasiClientSID();

                        if (!vClient.setRemoteConnection(mframe.getUserID(), mframe.getUserID() + ".wav")) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Server could not find due to missing some resource");
                            sid.setText("Not Working Porperly");
                            colorStatus(sid, Color.red);
                            return;
                        }
                        ArrayList userList = new ArrayList();
                        userList.add("Ringo4283");
                        userList.add("Sayoko8313");

                        ArrayList<String> keyRes = vClient.processSIDTest(mframe.getUserID() + ".wav", userList, "1.5");


                        if (keyRes.isEmpty()) {
                            sid.setText("Not Working Porperly");
                            colorStatus(sid, Color.red);

                        } else {
                            sid.setText("Working Porperly");
                            colorStatus(sid, Color.black);
                        }

                    } catch (Exception er) {
                        System.out.println(er);
                        sid.setText("Not Working Porperly");
                        colorStatus(sid, Color.red);

                    }


                }
                comSetEnable(true);
            }
        };

        thread.start();

    }//GEN-LAST:event_jstartButActionPerformed

    private void comSetEnable(boolean status) {
        jstartBut.setEnabled(status);
        for (Component comp : this.getComponents()) {
            if (comp instanceof JCheckBox) {
                comp.setEnabled(status);
            }
        }
    }

    private void colorStatus(JLabel label, Color color) {
        label.setForeground(color);
        label.revalidate();
        label.repaint();
    }

    private void jkwsWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jkwsWordActionPerformed
        if (jkwsWord.isSelected()) {
            kwsWord.setText("Ready For Processing");
            colorStatus(kwsWord, Color.black);
        } else {
            kwsWord.setText("Select For Processing");
            colorStatus(kwsWord, Color.black);
        }
    }//GEN-LAST:event_jkwsWordActionPerformed

    private void jkwsPhomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jkwsPhomeActionPerformed
        if (jkwsPhome.isSelected()) {
            kwsPhoneme.setText("Ready For Processing");
            colorStatus(kwsPhoneme, Color.black);
        } else {
            kwsPhoneme.setText("Select For Processing");
            colorStatus(kwsPhoneme, Color.black);
        }
    }//GEN-LAST:event_jkwsPhomeActionPerformed

    private void jphonemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jphonemeActionPerformed
        if (jphoneme.isSelected()) {
            phonemeRec.setText("Ready For Processing");
            colorStatus(phonemeRec, Color.black);
        } else {
            phonemeRec.setText("Select For Processing");
            colorStatus(phonemeRec, Color.black);
        }
    }//GEN-LAST:event_jphonemeActionPerformed

    private void jpdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpdsActionPerformed
        if (jpds.isSelected()) {
            pds.setText("Ready For Processing");
            colorStatus(pds, Color.black);
        } else {
            pds.setText("Select For Processing");
            colorStatus(pds, Color.black);
        }
    }//GEN-LAST:event_jpdsActionPerformed

    private void jsidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsidActionPerformed
        if (jsid.isSelected()) {
            sid.setText("Ready For Processing");
            colorStatus(sid, Color.black);
        } else {
            sid.setText("Select For Processing");
            colorStatus(sid, Color.black);
        }
    }//GEN-LAST:event_jsidActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        for (Component comp : this.getComponents()) {
            if (comp instanceof JCheckBox) {
                JCheckBox com = (JCheckBox) comp;
                com.setSelected(false);
            }

            setText(kwsWord, "Select For Processing");
            colorStatus(kwsWord, Color.black);

            setText(kwsPhoneme, "Select For Processing");
            colorStatus(kwsPhoneme, Color.black);

            setText(phonemeRec, "Select For Processing");
            colorStatus(phonemeRec, Color.black);

            setText(pds, "Select For Processing");
            colorStatus(pds, Color.black);

            setText(sid, "Select For Processing");
            colorStatus(sid, Color.black);

        }

    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JCheckBox jkwsPhome;
    private javax.swing.JCheckBox jkwsWord;
    private javax.swing.JCheckBox jpds;
    private javax.swing.JCheckBox jphoneme;
    private javax.swing.JCheckBox jsid;
    private javax.swing.JButton jstartBut;
    private javax.swing.JLabel kwsPhoneme;
    private javax.swing.JLabel kwsWord;
    private javax.swing.JLabel pds;
    private javax.swing.JLabel phonemeRec;
    private javax.swing.JLabel sid;
    // End of variables declaration//GEN-END:variables

    private int setText(JLabel jLabel, String processing_Started) {
        jLabel.setText(processing_Started);
        return 0;
    }
}
